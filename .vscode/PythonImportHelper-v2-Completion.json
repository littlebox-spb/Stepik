[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "monthrange",
        "importPath": "calendar",
        "description": "calendar",
        "isExtraImport": true,
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "relativedelta",
        "importPath": "dateutil.relativedelta",
        "description": "dateutil.relativedelta",
        "isExtraImport": true,
        "detail": "dateutil.relativedelta",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "name",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "current_thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "current_thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "current_thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "total_ordering",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "ascii_uppercase",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "simplecrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "simplecrypt",
        "description": "simplecrypt",
        "detail": "simplecrypt",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "contextmanager;",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "123",
        "description": "123",
        "peekOfCode": "file = open(\"example.txt\", \"w\")  # –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ ‚úèÔ∏è\nfile.write(\"–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞.\")  # –ó–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª üìù\nfile.close()  # –ó–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª üîí\nfile = open(\"example.txt\", \"a\")  # –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ‚ûï\nfile.write(\"\\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞.\")  # –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ üìù\nfile.close()  # –ó–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª üîí\nfile = open(\"example.txt\", \"r\")  # –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è üìñ\ncontent = file.read()  # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª üìö\nprint(content)  # –ü–µ—á–∞—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ üñ®Ô∏è\nfile.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª üìï",
        "detail": "123",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "123",
        "description": "123",
        "peekOfCode": "file = open(\"example.txt\", \"a\")  # –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ‚ûï\nfile.write(\"\\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞.\")  # –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ üìù\nfile.close()  # –ó–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª üîí\nfile = open(\"example.txt\", \"r\")  # –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è üìñ\ncontent = file.read()  # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª üìö\nprint(content)  # –ü–µ—á–∞—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ üñ®Ô∏è\nfile.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª üìï",
        "detail": "123",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "123",
        "description": "123",
        "peekOfCode": "file = open(\"example.txt\", \"r\")  # –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è üìñ\ncontent = file.read()  # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª üìö\nprint(content)  # –ü–µ—á–∞—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ üñ®Ô∏è\nfile.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª üìï",
        "detail": "123",
        "documentation": {}
    },
    {
        "label": "content",
        "kind": 5,
        "importPath": "123",
        "description": "123",
        "peekOfCode": "content = file.read()  # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª üìö\nprint(content)  # –ü–µ—á–∞—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ üñ®Ô∏è\nfile.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª üìï",
        "detail": "123",
        "documentation": {}
    },
    {
        "label": "Fig",
        "kind": 6,
        "importPath": "Class",
        "description": "Class",
        "peekOfCode": "class Fig:\n    def __init__(self, a, b, c, d):\n        self.sp = (a, b)\n        self.ep = (c, d)\n    def clear(self):\n        pass\n    def __str__(self) -> str:\n        return f\"{self.sp} - {self.ep}\"\nclass Line(Fig):\n    def clear(self):",
        "detail": "Class",
        "documentation": {}
    },
    {
        "label": "Line",
        "kind": 6,
        "importPath": "Class",
        "description": "Class",
        "peekOfCode": "class Line(Fig):\n    def clear(self):\n        self.sp = (0, 0)\n        self.ep = (0, 0)\nclass Rect(Fig):\n    pass\nclass Ellipse(Fig):\n    pass\nelements = []\nfor _ in range(217):",
        "detail": "Class",
        "documentation": {}
    },
    {
        "label": "Rect",
        "kind": 6,
        "importPath": "Class",
        "description": "Class",
        "peekOfCode": "class Rect(Fig):\n    pass\nclass Ellipse(Fig):\n    pass\nelements = []\nfor _ in range(217):\n    choices = [Line, Rect, Ellipse]\n    elements.append(choice(choices)(random(), random(), random(), random()))\nfor i in elements:\n    i.clear()",
        "detail": "Class",
        "documentation": {}
    },
    {
        "label": "Ellipse",
        "kind": 6,
        "importPath": "Class",
        "description": "Class",
        "peekOfCode": "class Ellipse(Fig):\n    pass\nelements = []\nfor _ in range(217):\n    choices = [Line, Rect, Ellipse]\n    elements.append(choice(choices)(random(), random(), random(), random()))\nfor i in elements:\n    i.clear()\nprint([str(i) for i in elements])",
        "detail": "Class",
        "documentation": {}
    },
    {
        "label": "elements",
        "kind": 5,
        "importPath": "Class",
        "description": "Class",
        "peekOfCode": "elements = []\nfor _ in range(217):\n    choices = [Line, Rect, Ellipse]\n    elements.append(choice(choices)(random(), random(), random(), random()))\nfor i in elements:\n    i.clear()\nprint([str(i) for i in elements])",
        "detail": "Class",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Dat21",
        "description": "Dat21",
        "peekOfCode": "n = int(input())\nf = True\nsp = []\nfor i in range(n):\n    sp.append(list(map(int, input().split())))\nwhile f:\n    for i in range(len(sp)):\n        for j in range(i, len(sp)):\n            if sp[i][0] > sp[j][0] or (sp[i][0] == sp[j][0] and sp[i][1] > sp[j][1]):\n                sp[i], sp[j] = sp[j], sp[i]",
        "detail": "Dat21",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "Dat21",
        "description": "Dat21",
        "peekOfCode": "f = True\nsp = []\nfor i in range(n):\n    sp.append(list(map(int, input().split())))\nwhile f:\n    for i in range(len(sp)):\n        for j in range(i, len(sp)):\n            if sp[i][0] > sp[j][0] or (sp[i][0] == sp[j][0] and sp[i][1] > sp[j][1]):\n                sp[i], sp[j] = sp[j], sp[i]\n    f = False",
        "detail": "Dat21",
        "documentation": {}
    },
    {
        "label": "sp",
        "kind": 5,
        "importPath": "Dat21",
        "description": "Dat21",
        "peekOfCode": "sp = []\nfor i in range(n):\n    sp.append(list(map(int, input().split())))\nwhile f:\n    for i in range(len(sp)):\n        for j in range(i, len(sp)):\n            if sp[i][0] > sp[j][0] or (sp[i][0] == sp[j][0] and sp[i][1] > sp[j][1]):\n                sp[i], sp[j] = sp[j], sp[i]\n    f = False\n    for i in range(len(sp) - 1):",
        "detail": "Dat21",
        "documentation": {}
    },
    {
        "label": "Location",
        "kind": 6,
        "importPath": "Dataclasses",
        "description": "Dataclasses",
        "peekOfCode": "class Location:\n    name: str\n    longitude: float = 0\n    latitude: float = 11.5\nstonehenge = Location(\"Stonehenge\", 51, 1.5)\nprint(stonehenge)\n# @dataclass\n# class Point:\n#     x: int\n#     y: int",
        "detail": "Dataclasses",
        "documentation": {}
    },
    {
        "label": "stonehenge",
        "kind": 5,
        "importPath": "Dataclasses",
        "description": "Dataclasses",
        "peekOfCode": "stonehenge = Location(\"Stonehenge\", 51, 1.5)\nprint(stonehenge)\n# @dataclass\n# class Point:\n#     x: int\n#     y: int\n# point1 = Point(5, 7)\n# point2 = Point(-10, 12)\n# print(point1, point2, sep=\"\\n\")",
        "detail": "Dataclasses",
        "documentation": {}
    },
    {
        "label": "candy_wrapper",
        "kind": 2,
        "importPath": "Decorator",
        "description": "Decorator",
        "peekOfCode": "def candy_wrapper(fun):\n    s=fun()\n    print('------------------------')\n    print(s)\n    print('------------------------')\n@candy_wrapper    \ndef ask(input):\n    return input('–í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—É: ')\nask(input)",
        "detail": "Decorator",
        "documentation": {}
    },
    {
        "label": "ask",
        "kind": 2,
        "importPath": "Decorator",
        "description": "Decorator",
        "peekOfCode": "def ask(input):\n    return input('–í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—É: ')\nask(input)",
        "detail": "Decorator",
        "documentation": {}
    },
    {
        "label": "is_prime",
        "kind": 2,
        "importPath": "dj21",
        "description": "dj21",
        "peekOfCode": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\nprimes = [i for i in range(1, 20) if is_prime(i)]\nprint(primes)\n# def decorator(func):",
        "detail": "dj21",
        "documentation": {}
    },
    {
        "label": "primes",
        "kind": 5,
        "importPath": "dj21",
        "description": "dj21",
        "peekOfCode": "primes = [i for i in range(1, 20) if is_prime(i)]\nprint(primes)\n# def decorator(func):\n#     # Your decorator code\n#     def neg (a,b):\n#         if a<0 or b<0: print('YES')\n#         s = func(a,b)\n#         return s\n#     return neg\n# # Connect decorator please",
        "detail": "dj21",
        "documentation": {}
    },
    {
        "label": "appendMonth",
        "kind": 2,
        "importPath": "dvp_21",
        "description": "dvp_21",
        "peekOfCode": "def appendMonth(year, numberMonth):\n    output[str(numberMonth)].append(\n        {\n            \"start_date\": date(year, numberMonth, 1).strftime(\"%Y-%m-%d\"),\n            \"end_date\": date(\n                year,\n                numberMonth,\n                monthrange(year, numberMonth)[1],\n            ).strftime(\"%Y-%m-%d\"),\n        }",
        "detail": "dvp_21",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "dvp_21",
        "description": "dvp_21",
        "peekOfCode": "data = []\noutput = {}\nfy = int(input())\nfor i in range(int(input())):\n    start, end = map(lambda x: datetime.strptime(x, \"%Y-%m-%d\"), input().split())\n    data.append([start, end])\nif len(data) > 1:\n    i = 0\n    while i < len(data) - 1:\n        j = i + 1",
        "detail": "dvp_21",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "dvp_21",
        "description": "dvp_21",
        "peekOfCode": "output = {}\nfy = int(input())\nfor i in range(int(input())):\n    start, end = map(lambda x: datetime.strptime(x, \"%Y-%m-%d\"), input().split())\n    data.append([start, end])\nif len(data) > 1:\n    i = 0\n    while i < len(data) - 1:\n        j = i + 1\n        while j < len(data):",
        "detail": "dvp_21",
        "documentation": {}
    },
    {
        "label": "fy",
        "kind": 5,
        "importPath": "dvp_21",
        "description": "dvp_21",
        "peekOfCode": "fy = int(input())\nfor i in range(int(input())):\n    start, end = map(lambda x: datetime.strptime(x, \"%Y-%m-%d\"), input().split())\n    data.append([start, end])\nif len(data) > 1:\n    i = 0\n    while i < len(data) - 1:\n        j = i + 1\n        while j < len(data):\n            if data[i][1] + timedelta(days=1) == data[j][0]:",
        "detail": "dvp_21",
        "documentation": {}
    },
    {
        "label": "namemon",
        "kind": 2,
        "importPath": "dvp_22",
        "description": "dvp_22",
        "peekOfCode": "def namemon(month):\n    if month == 1:\n        return \"–º–µ—Å—è—Ü\"\n    elif 2 <= month <= 4:\n        return \"–º–µ—Å—è—Ü–∞\"\n    else:\n        return \"–º–µ—Å—è—Ü–µ–≤\"\ndef nameyear(year):\n    if year == 1:\n        return \"–≥–æ–¥\"",
        "detail": "dvp_22",
        "documentation": {}
    },
    {
        "label": "nameyear",
        "kind": 2,
        "importPath": "dvp_22",
        "description": "dvp_22",
        "peekOfCode": "def nameyear(year):\n    if year == 1:\n        return \"–≥–æ–¥\"\n    elif 2 <= year <= 4:\n        return \"–≥–æ–¥–∞\"\n    else:\n        return \"–ª–µ—Ç\"\ndef nameday(day):\n    if day == 1:\n        return \"–¥–µ–Ω—å\"",
        "detail": "dvp_22",
        "documentation": {}
    },
    {
        "label": "nameday",
        "kind": 2,
        "importPath": "dvp_22",
        "description": "dvp_22",
        "peekOfCode": "def nameday(day):\n    if day == 1:\n        return \"–¥–µ–Ω—å\"\n    elif 2 <= day <= 4:\n        return \"–¥–Ω—è\"\n    else:\n        return \"–¥–Ω–µ–π\"\nd1 = datetime.date.fromisoformat(input())\nd2 = datetime.date.fromisoformat(input())\nif d1 != d2:",
        "detail": "dvp_22",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "dvp_22",
        "description": "dvp_22",
        "peekOfCode": "d1 = datetime.date.fromisoformat(input())\nd2 = datetime.date.fromisoformat(input())\nif d1 != d2:\n    result = relativedelta(d2, d1)\n    oyear = f\"{result.years} {nameyear(result.years)} \" if result.years else \"\"\n    omonth = f\"{result.months} {namemon(result.months)} \" if result.months else \"\"\n    oday = f\"{result.days} {nameday(result.days)}\" if result.days else \"\"\n    print(f\"{oyear}{omonth}{oday}\")\nelse:\n    print(f\"–ú–µ–Ω–µ–µ –¥–Ω—è\")",
        "detail": "dvp_22",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "dvp_22",
        "description": "dvp_22",
        "peekOfCode": "d2 = datetime.date.fromisoformat(input())\nif d1 != d2:\n    result = relativedelta(d2, d1)\n    oyear = f\"{result.years} {nameyear(result.years)} \" if result.years else \"\"\n    omonth = f\"{result.months} {namemon(result.months)} \" if result.months else \"\"\n    oday = f\"{result.days} {nameday(result.days)}\" if result.days else \"\"\n    print(f\"{oyear}{omonth}{oday}\")\nelse:\n    print(f\"–ú–µ–Ω–µ–µ –¥–Ω—è\")\n# –†–µ—à–µ–Ω–∏–µ —á—É–∂–æ–µ, –Ω–∞–¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è, –∫–∞–∫ —Å–¥–µ–ª–∞–Ω–æ",
        "detail": "dvp_22",
        "documentation": {}
    },
    {
        "label": "dataIn",
        "kind": 5,
        "importPath": "dvp_23",
        "description": "dvp_23",
        "peekOfCode": "dataIn = []\ndataPre = []\ndataResult = []\nfmt = \"%M:%S\"\nfor _ in range(int(input())):\n    dataIn = input().split()\n    dataPre.append([time.strptime(dataIn[0], fmt), int(dataIn[1])])\nsl = int(input())\nfor d in dataPre:\n    if d[1] == sl:",
        "detail": "dvp_23",
        "documentation": {}
    },
    {
        "label": "dataPre",
        "kind": 5,
        "importPath": "dvp_23",
        "description": "dvp_23",
        "peekOfCode": "dataPre = []\ndataResult = []\nfmt = \"%M:%S\"\nfor _ in range(int(input())):\n    dataIn = input().split()\n    dataPre.append([time.strptime(dataIn[0], fmt), int(dataIn[1])])\nsl = int(input())\nfor d in dataPre:\n    if d[1] == sl:\n        dataResult.append(d[0].tm_min * 60 + d[0].tm_sec)",
        "detail": "dvp_23",
        "documentation": {}
    },
    {
        "label": "dataResult",
        "kind": 5,
        "importPath": "dvp_23",
        "description": "dvp_23",
        "peekOfCode": "dataResult = []\nfmt = \"%M:%S\"\nfor _ in range(int(input())):\n    dataIn = input().split()\n    dataPre.append([time.strptime(dataIn[0], fmt), int(dataIn[1])])\nsl = int(input())\nfor d in dataPre:\n    if d[1] == sl:\n        dataResult.append(d[0].tm_min * 60 + d[0].tm_sec)\nif dataResult:",
        "detail": "dvp_23",
        "documentation": {}
    },
    {
        "label": "fmt",
        "kind": 5,
        "importPath": "dvp_23",
        "description": "dvp_23",
        "peekOfCode": "fmt = \"%M:%S\"\nfor _ in range(int(input())):\n    dataIn = input().split()\n    dataPre.append([time.strptime(dataIn[0], fmt), int(dataIn[1])])\nsl = int(input())\nfor d in dataPre:\n    if d[1] == sl:\n        dataResult.append(d[0].tm_min * 60 + d[0].tm_sec)\nif dataResult:\n    dataResult.sort()",
        "detail": "dvp_23",
        "documentation": {}
    },
    {
        "label": "sl",
        "kind": 5,
        "importPath": "dvp_23",
        "description": "dvp_23",
        "peekOfCode": "sl = int(input())\nfor d in dataPre:\n    if d[1] == sl:\n        dataResult.append(d[0].tm_min * 60 + d[0].tm_sec)\nif dataResult:\n    dataResult.sort()\n    if len(dataResult) % 2 == 0:\n        td = (\n            int(\n                (",
        "detail": "dvp_23",
        "documentation": {}
    },
    {
        "label": "Size",
        "kind": 6,
        "importPath": "Enum",
        "description": "Enum",
        "peekOfCode": "class Size(Enum):\n    S = \"small\"\n    M = \"medium\"\n    L = \"large\"\n    XL = \"extra large\"\n    XXL = \"extra extra large\"\n# print(Direction[\"WEST\"].name, Direction[\"SOUTH\"].value, sep=\"\\n\")",
        "detail": "Enum",
        "documentation": {}
    },
    {
        "label": "gen_fibonacci_numbers",
        "kind": 2,
        "importPath": "fibonacci",
        "description": "fibonacci",
        "peekOfCode": "def gen_fibonacci_numbers(n):\n    one = 1\n    two = 1\n    for i in range(n):\n        yield one\n        one, two = two, one + two\nfor i in gen_fibonacci_numbers(10):\n    print(i)",
        "detail": "fibonacci",
        "documentation": {}
    },
    {
        "label": "Elevator",
        "kind": 6,
        "importPath": "Flask1",
        "description": "Flask1",
        "peekOfCode": "class Elevator:\n    def __init__(self,et=5,cur=3):\n        self.et=et\n        self.cur=cur\n    def up(self):\n        if self.cur+1>self.et: print('–õ–∏—Ñ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–Ω—è—Ç—å—Å—è –≤—ã—à–µ')\n        else: \n            self.cur+=1\n            print(f'–õ–∏—Ñ—Ç –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∞ {self.cur} —ç—Ç–∞–∂')\n    def down(self):        ",
        "detail": "Flask1",
        "documentation": {}
    },
    {
        "label": "get_msg",
        "kind": 2,
        "importPath": "ianus_mess",
        "description": "ianus_mess",
        "peekOfCode": "def get_msg(m):\n    return f\"Hello {m} World\"\nm = \"–Ø\"\nprint(get_msg(m))",
        "detail": "ianus_mess",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "ianus_mess",
        "description": "ianus_mess",
        "peekOfCode": "m = \"–Ø\"\nprint(get_msg(m))",
        "detail": "ianus_mess",
        "documentation": {}
    },
    {
        "label": "my_range_gen",
        "kind": 2,
        "importPath": "MyRange",
        "description": "MyRange",
        "peekOfCode": "def my_range_gen(*args):\n    if len(args) == 1:\n        i = 0\n        while i < args[0]:\n            yield i\n            i += 1\n    elif len(args) == 2:\n        i = args[0]\n        while args[1] - i != 0:\n            yield i",
        "detail": "MyRange",
        "documentation": {}
    },
    {
        "label": "mask",
        "kind": 5,
        "importPath": "name_correct",
        "description": "name_correct",
        "peekOfCode": "mask = input(\"–í–≤–µ–¥–∏—Ç–µ –º–∞—Å–∫—É - \")\n#mask = mask if mask else \"[InfoVolna.com] \"\n#mask = mask if mask else \"[Boominfo.ORG] \"\n#mask = mask if mask else \"[SuperSliv.biz] \"\n#mask = mask if mask else \"[pirat-zerkalo.com] \"\n#mask = mask if mask else \"[sharewood-zerkalo.pro] \"\nmask = mask if mask else \"[SW.BAND] \"\nfor file in os.listdir(\".\"):\n    if file.startswith(mask):\n        os.rename(file, file[len(mask) :])",
        "detail": "name_correct",
        "documentation": {}
    },
    {
        "label": "#mask",
        "kind": 5,
        "importPath": "name_correct",
        "description": "name_correct",
        "peekOfCode": "#mask = mask if mask else \"[InfoVolna.com] \"\n#mask = mask if mask else \"[Boominfo.ORG] \"\n#mask = mask if mask else \"[SuperSliv.biz] \"\n#mask = mask if mask else \"[pirat-zerkalo.com] \"\n#mask = mask if mask else \"[sharewood-zerkalo.pro] \"\nmask = mask if mask else \"[SW.BAND] \"\nfor file in os.listdir(\".\"):\n    if file.startswith(mask):\n        os.rename(file, file[len(mask) :])",
        "detail": "name_correct",
        "documentation": {}
    },
    {
        "label": "#mask",
        "kind": 5,
        "importPath": "name_correct",
        "description": "name_correct",
        "peekOfCode": "#mask = mask if mask else \"[Boominfo.ORG] \"\n#mask = mask if mask else \"[SuperSliv.biz] \"\n#mask = mask if mask else \"[pirat-zerkalo.com] \"\n#mask = mask if mask else \"[sharewood-zerkalo.pro] \"\nmask = mask if mask else \"[SW.BAND] \"\nfor file in os.listdir(\".\"):\n    if file.startswith(mask):\n        os.rename(file, file[len(mask) :])",
        "detail": "name_correct",
        "documentation": {}
    },
    {
        "label": "#mask",
        "kind": 5,
        "importPath": "name_correct",
        "description": "name_correct",
        "peekOfCode": "#mask = mask if mask else \"[SuperSliv.biz] \"\n#mask = mask if mask else \"[pirat-zerkalo.com] \"\n#mask = mask if mask else \"[sharewood-zerkalo.pro] \"\nmask = mask if mask else \"[SW.BAND] \"\nfor file in os.listdir(\".\"):\n    if file.startswith(mask):\n        os.rename(file, file[len(mask) :])",
        "detail": "name_correct",
        "documentation": {}
    },
    {
        "label": "#mask",
        "kind": 5,
        "importPath": "name_correct",
        "description": "name_correct",
        "peekOfCode": "#mask = mask if mask else \"[pirat-zerkalo.com] \"\n#mask = mask if mask else \"[sharewood-zerkalo.pro] \"\nmask = mask if mask else \"[SW.BAND] \"\nfor file in os.listdir(\".\"):\n    if file.startswith(mask):\n        os.rename(file, file[len(mask) :])",
        "detail": "name_correct",
        "documentation": {}
    },
    {
        "label": "#mask",
        "kind": 5,
        "importPath": "name_correct",
        "description": "name_correct",
        "peekOfCode": "#mask = mask if mask else \"[sharewood-zerkalo.pro] \"\nmask = mask if mask else \"[SW.BAND] \"\nfor file in os.listdir(\".\"):\n    if file.startswith(mask):\n        os.rename(file, file[len(mask) :])",
        "detail": "name_correct",
        "documentation": {}
    },
    {
        "label": "mask",
        "kind": 5,
        "importPath": "name_correct",
        "description": "name_correct",
        "peekOfCode": "mask = mask if mask else \"[SW.BAND] \"\nfor file in os.listdir(\".\"):\n    if file.startswith(mask):\n        os.rename(file, file[len(mask) :])",
        "detail": "name_correct",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "note",
        "description": "note",
        "peekOfCode": "class Shape:\n    def calculate_area(self):\n        return 0\n    def __add__(self, other):\n        pass\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n    def calculate_area(self):\n        return round(math.pi * self.radius**2, 2)",
        "detail": "note",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "note",
        "description": "note",
        "peekOfCode": "class Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n    def calculate_area(self):\n        return round(math.pi * self.radius**2, 2)\nclass Rectangle(Shape):\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def calculate_area(self):",
        "detail": "note",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "note",
        "description": "note",
        "peekOfCode": "class Rectangle(Shape):\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def calculate_area(self):\n        return self.length * self.width\nclass Triangle(Shape):\n    def __init__(self, base, height):\n        self.base = base\n        self.height = height",
        "detail": "note",
        "documentation": {}
    },
    {
        "label": "Triangle",
        "kind": 6,
        "importPath": "note",
        "description": "note",
        "peekOfCode": "class Triangle(Shape):\n    def __init__(self, base, height):\n        self.base = base\n        self.height = height\n    def calculate_area(self):\n        return 0.5 * self.base * self.height\nshapes = [Shape(), Circle(5), Rectangle(4, 6), Triangle(3, 8)]\nfor shape in shapes:\n    area = shape.calculate_area()\n    print(f\"Area of {type(shape).__name__}: {area}\")",
        "detail": "note",
        "documentation": {}
    },
    {
        "label": "shapes",
        "kind": 5,
        "importPath": "note",
        "description": "note",
        "peekOfCode": "shapes = [Shape(), Circle(5), Rectangle(4, 6), Triangle(3, 8)]\nfor shape in shapes:\n    area = shape.calculate_area()\n    print(f\"Area of {type(shape).__name__}: {area}\")",
        "detail": "note",
        "documentation": {}
    },
    {
        "label": "print_numbers",
        "kind": 2,
        "importPath": "only_one",
        "description": "only_one",
        "peekOfCode": "def print_numbers(start, end, delay):\n    for i in range(start, end + 1):\n        time.sleep(delay)\n        print(i)\ndef print_letters(seq, delay):\n    for letter in seq:\n        time.sleep(delay)\n        print(letter)\nif __name__ == \"__main__\":\n    start_time = time.perf_counter()",
        "detail": "only_one",
        "documentation": {}
    },
    {
        "label": "print_letters",
        "kind": 2,
        "importPath": "only_one",
        "description": "only_one",
        "peekOfCode": "def print_letters(seq, delay):\n    for letter in seq:\n        time.sleep(delay)\n        print(letter)\nif __name__ == \"__main__\":\n    start_time = time.perf_counter()\n    t1 = threading.Thread(target=print_numbers, args=(1, 5, 1))\n    t2 = threading.Thread(target=print_letters, args=('abcde', 0.5))\n    t1.start()\n    t2.start()",
        "detail": "only_one",
        "documentation": {}
    },
    {
        "label": "TriangleChecker",
        "kind": 6,
        "importPath": "oop-test",
        "description": "oop-test",
        "peekOfCode": "class TriangleChecker:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n    def is_triangle(self):\n        if not (\n            type(self.a) in (int, float)\n            and type(self.b) in (int, float)\n            and type(self.c) in (int, float)",
        "detail": "oop-test",
        "documentation": {}
    },
    {
        "label": "tr",
        "kind": 5,
        "importPath": "oop-test",
        "description": "oop-test",
        "peekOfCode": "tr = TriangleChecker(a, b, c)\nprint(tr.is_triangle())",
        "detail": "oop-test",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "oop12",
        "description": "oop12",
        "peekOfCode": "class Person:\n    name = \"John Smith\"\n    age = 30\n    gender = \"male\"\n    address = \"123 Main St\"\n    phone_number = \"555-555-5555\"\n    email = \"johnsmith@example.com\"\n    is_employed = True\nfor i in list(input().split()):\n    print(f'{i} - {\"YES\" if hasattr(Person,i) else \"NO\"}')",
        "detail": "oop12",
        "documentation": {}
    },
    {
        "label": "Point",
        "kind": 6,
        "importPath": "oop21",
        "description": "oop21",
        "peekOfCode": "class Point:\n    x: Optional[int] = None\n    y: Optional[int] = None\n    def set_coordinates(self,x,y):\n        self.x=x\n        self.y=y\n    def get_distance(self,p2):\n        if hasattr(p2,'x') and hasattr(p2,'y'):\n            return ((p2.x-self.x)**2+(p2.y-self.y)**2)**0.5\n        else:",
        "detail": "oop21",
        "documentation": {}
    },
    {
        "label": "p1",
        "kind": 5,
        "importPath": "oop21",
        "description": "oop21",
        "peekOfCode": "p1 = Point()\np2 = Point()\nassert isinstance(p1, Point)\nassert isinstance(p2, Point)\np1.set_coordinates(1, 2)\nassert p1.x == 1\nassert p1.y == 2\np2.set_coordinates(4, 6)\nassert p2.x == 4\nassert p2.y == 6",
        "detail": "oop21",
        "documentation": {}
    },
    {
        "label": "p2",
        "kind": 5,
        "importPath": "oop21",
        "description": "oop21",
        "peekOfCode": "p2 = Point()\nassert isinstance(p1, Point)\nassert isinstance(p2, Point)\np1.set_coordinates(1, 2)\nassert p1.x == 1\nassert p1.y == 2\np2.set_coordinates(4, 6)\nassert p2.x == 4\nassert p2.y == 6\nassert p1.get_distance(p2) == 5.0",
        "detail": "oop21",
        "documentation": {}
    },
    {
        "label": "p3",
        "kind": 5,
        "importPath": "oop21",
        "description": "oop21",
        "peekOfCode": "p3 = Point()\np3.set_coordinates(10, 10)\np1.set_coordinates(4, 2)\nassert p1.get_distance(p3) == 10.0\nres = p1.get_distance(10)  # –†–∞—Å–ø–µ—á–∞—Ç–∞–µ—Ç \"–ü–µ—Ä–µ–¥–∞–Ω–∞ –Ω–µ —Ç–æ—á–∫–∞\", –≤–µ—Ä–Ω–µ—Ç None\nassert res is None, '–ú–µ—Ç–æ–¥ get_distance –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None, –µ—Å–ª–∏ –≤ –Ω–µ–≥–æ –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–µ —Ç–æ—á–∫–∞'\nassert p2.get_distance([1, 2, 3]) is None  # –†–∞—Å–ø–µ—á–∞—Ç–∞–µ—Ç \"–ü–µ—Ä–µ–¥–∞–Ω–∞ –Ω–µ —Ç–æ—á–∫–∞\", –≤–µ—Ä–Ω–µ—Ç None",
        "detail": "oop21",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "oop21",
        "description": "oop21",
        "peekOfCode": "res = p1.get_distance(10)  # –†–∞—Å–ø–µ—á–∞—Ç–∞–µ—Ç \"–ü–µ—Ä–µ–¥–∞–Ω–∞ –Ω–µ —Ç–æ—á–∫–∞\", –≤–µ—Ä–Ω–µ—Ç None\nassert res is None, '–ú–µ—Ç–æ–¥ get_distance –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None, –µ—Å–ª–∏ –≤ –Ω–µ–≥–æ –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–µ —Ç–æ—á–∫–∞'\nassert p2.get_distance([1, 2, 3]) is None  # –†–∞—Å–ø–µ—á–∞—Ç–∞–µ—Ç \"–ü–µ—Ä–µ–¥–∞–Ω–∞ –Ω–µ —Ç–æ—á–∫–∞\", –≤–µ—Ä–Ω–µ—Ç None",
        "detail": "oop21",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "oop210",
        "description": "oop210",
        "peekOfCode": "class User:\n    def __init__(self,name,role):\n        self.name=name\n        self.role=role\nclass Access:\n    __access_list=['admin', 'developer']\n    @staticmethod\n    def __check_access(role):\n        return role in Access.__access_list\n    @staticmethod",
        "detail": "oop210",
        "documentation": {}
    },
    {
        "label": "Access",
        "kind": 6,
        "importPath": "oop210",
        "description": "oop210",
        "peekOfCode": "class Access:\n    __access_list=['admin', 'developer']\n    @staticmethod\n    def __check_access(role):\n        return role in Access.__access_list\n    @staticmethod\n    def get_access(user):\n        if isinstance(user, User):\n            print(f'User {user.name}: success' if Access.__check_access(user.role) else f'AccessDenied')\n        else:",
        "detail": "oop210",
        "documentation": {}
    },
    {
        "label": "user1",
        "kind": 5,
        "importPath": "oop210",
        "description": "oop210",
        "peekOfCode": "user1 = User('batya99', 'admin')\nAccess.get_access(user1) # –ø–µ—á–∞—Ç–∞–µ—Ç \"User batya99: success\"\nzaya = User('milaya_zaya999', 'user')\nAccess.get_access(zaya) # –ø–µ—á–∞—Ç–∞–µ—Ç AccessDenied\nAccess.get_access(5) # –ø–µ—á–∞—Ç–∞–µ—Ç AccessTypeError\n# class Robot:\n#     population=0\n#     def __init__(self,name):\n#         self.name=name\n#         Robot.population+=1",
        "detail": "oop210",
        "documentation": {}
    },
    {
        "label": "zaya",
        "kind": 5,
        "importPath": "oop210",
        "description": "oop210",
        "peekOfCode": "zaya = User('milaya_zaya999', 'user')\nAccess.get_access(zaya) # –ø–µ—á–∞—Ç–∞–µ—Ç AccessDenied\nAccess.get_access(5) # –ø–µ—á–∞—Ç–∞–µ—Ç AccessTypeError\n# class Robot:\n#     population=0\n#     def __init__(self,name):\n#         self.name=name\n#         Robot.population+=1\n#         print(f'–†–æ–±–æ—Ç {name} –±—ã–ª —Å–æ–∑–¥–∞–Ω')\n#     def destroy(self):",
        "detail": "oop210",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "oop211",
        "description": "oop211",
        "peekOfCode": "class Product:\n    def __init__(self, name, price) -> None:\n        self.name = name\n        self.price = price\nclass User:\n    def __init__(self, login, balance=0) -> None:\n        self.login = login\n        self.balance = balance\n    def __str__(self) -> str:\n        return f\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.login}, –±–∞–ª–∞–Ω—Å - {self.balance}\"",
        "detail": "oop211",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "oop211",
        "description": "oop211",
        "peekOfCode": "class User:\n    def __init__(self, login, balance=0) -> None:\n        self.login = login\n        self.balance = balance\n    def __str__(self) -> str:\n        return f\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.login}, –±–∞–ª–∞–Ω—Å - {self.balance}\"\n    @property\n    def balance(self):\n        return self.__balance\n    @balance.setter",
        "detail": "oop211",
        "documentation": {}
    },
    {
        "label": "Cart",
        "kind": 6,
        "importPath": "oop211",
        "description": "oop211",
        "peekOfCode": "class Cart:\n    def __init__(self, user) -> None:\n        self.goods = {}\n        self.__total = 0\n        self.user = user\n    @property\n    def total(self):\n        return self.__total\n    def add(self, product, goods=1):\n        self.goods[product] = self.goods.get(product, 0) + goods",
        "detail": "oop211",
        "documentation": {}
    },
    {
        "label": "billy",
        "kind": 5,
        "importPath": "oop211",
        "description": "oop211",
        "peekOfCode": "billy = User(\"billy@rambler.ru\")\nlemon = Product(\"lemon\", 20)\ncarrot = Product(\"carrot\", 30)\ncart_billy = Cart(billy)\nprint(cart_billy.user)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å billy@rambler.ru, –±–∞–ª–∞–Ω—Å - 0\ncart_billy.add(lemon, 2)\ncart_billy.add(carrot)\ncart_billy.print_check()\n\"\"\" –ü–µ—á–∞—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ\n---Your check---",
        "detail": "oop211",
        "documentation": {}
    },
    {
        "label": "lemon",
        "kind": 5,
        "importPath": "oop211",
        "description": "oop211",
        "peekOfCode": "lemon = Product(\"lemon\", 20)\ncarrot = Product(\"carrot\", 30)\ncart_billy = Cart(billy)\nprint(cart_billy.user)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å billy@rambler.ru, –±–∞–ª–∞–Ω—Å - 0\ncart_billy.add(lemon, 2)\ncart_billy.add(carrot)\ncart_billy.print_check()\n\"\"\" –ü–µ—á–∞—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ\n---Your check---\ncarrot 30 1 30",
        "detail": "oop211",
        "documentation": {}
    },
    {
        "label": "carrot",
        "kind": 5,
        "importPath": "oop211",
        "description": "oop211",
        "peekOfCode": "carrot = Product(\"carrot\", 30)\ncart_billy = Cart(billy)\nprint(cart_billy.user)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å billy@rambler.ru, –±–∞–ª–∞–Ω—Å - 0\ncart_billy.add(lemon, 2)\ncart_billy.add(carrot)\ncart_billy.print_check()\n\"\"\" –ü–µ—á–∞—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ\n---Your check---\ncarrot 30 1 30\nlemon 20 2 40",
        "detail": "oop211",
        "documentation": {}
    },
    {
        "label": "cart_billy",
        "kind": 5,
        "importPath": "oop211",
        "description": "oop211",
        "peekOfCode": "cart_billy = Cart(billy)\nprint(cart_billy.user)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å billy@rambler.ru, –±–∞–ª–∞–Ω—Å - 0\ncart_billy.add(lemon, 2)\ncart_billy.add(carrot)\ncart_billy.print_check()\n\"\"\" –ü–µ—á–∞—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ\n---Your check---\ncarrot 30 1 30\nlemon 20 2 40\n---Total: 70---\"\"\"",
        "detail": "oop211",
        "documentation": {}
    },
    {
        "label": "CustomLabel",
        "kind": 6,
        "importPath": "oop23",
        "description": "oop23",
        "peekOfCode": "class CustomLabel:\n    def __init__(self, text, **kwargs):\n        self.text = text\n        for key, value in kwargs.items():\n            self.__dict__[key] = value\n    def config(self, **kwargs):\n        for key, value in kwargs.items():\n            self.__dict__[key] = value\n# –ù–∏–∂–µ –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ CustomLabel\nlabel1 = CustomLabel(text=\"Hello Python\", fg=\"#eee\", bg=\"#333\")",
        "detail": "oop23",
        "documentation": {}
    },
    {
        "label": "label1",
        "kind": 5,
        "importPath": "oop23",
        "description": "oop23",
        "peekOfCode": "label1 = CustomLabel(text=\"Hello Python\", fg=\"#eee\", bg=\"#333\")\nlabel2 = CustomLabel(text=\"Username\")\nlabel3 = CustomLabel(text=\"Password\", font=(\"Comic Sans MS\", 24, \"bold\"), bd=20, bg=\"#ffaaaa\")\nlabel4 = CustomLabel(text=\"Hello\", bd=20, bg=\"#ffaaaa\")\nlabel5 = CustomLabel(text=\"qwwerty\", a=20, b=\"#ffaaaa\", r=[3, 4, 5, 6], p=32)\nassert label1.__dict__ == {\"text\": \"Hello Python\", \"fg\": \"#eee\", \"bg\": \"#333\"}\nassert label2.__dict__ == {\"text\": \"Username\"}\nassert label3.__dict__ == {\"text\": \"Password\", \"font\": (\"Comic Sans MS\", 24, \"bold\"), \"bd\": 20, \"bg\": \"#ffaaaa\"}\nassert label4.__dict__ == {\"text\": \"Hello\", \"bd\": 20, \"bg\": \"#ffaaaa\"}\nassert label5.__dict__ == {\"text\": \"qwwerty\", \"a\": 20, \"b\": \"#ffaaaa\", \"r\": [3, 4, 5, 6], \"p\": 32}",
        "detail": "oop23",
        "documentation": {}
    },
    {
        "label": "label2",
        "kind": 5,
        "importPath": "oop23",
        "description": "oop23",
        "peekOfCode": "label2 = CustomLabel(text=\"Username\")\nlabel3 = CustomLabel(text=\"Password\", font=(\"Comic Sans MS\", 24, \"bold\"), bd=20, bg=\"#ffaaaa\")\nlabel4 = CustomLabel(text=\"Hello\", bd=20, bg=\"#ffaaaa\")\nlabel5 = CustomLabel(text=\"qwwerty\", a=20, b=\"#ffaaaa\", r=[3, 4, 5, 6], p=32)\nassert label1.__dict__ == {\"text\": \"Hello Python\", \"fg\": \"#eee\", \"bg\": \"#333\"}\nassert label2.__dict__ == {\"text\": \"Username\"}\nassert label3.__dict__ == {\"text\": \"Password\", \"font\": (\"Comic Sans MS\", 24, \"bold\"), \"bd\": 20, \"bg\": \"#ffaaaa\"}\nassert label4.__dict__ == {\"text\": \"Hello\", \"bd\": 20, \"bg\": \"#ffaaaa\"}\nassert label5.__dict__ == {\"text\": \"qwwerty\", \"a\": 20, \"b\": \"#ffaaaa\", \"r\": [3, 4, 5, 6], \"p\": 32}\nprint(label1.__dict__)",
        "detail": "oop23",
        "documentation": {}
    },
    {
        "label": "label3",
        "kind": 5,
        "importPath": "oop23",
        "description": "oop23",
        "peekOfCode": "label3 = CustomLabel(text=\"Password\", font=(\"Comic Sans MS\", 24, \"bold\"), bd=20, bg=\"#ffaaaa\")\nlabel4 = CustomLabel(text=\"Hello\", bd=20, bg=\"#ffaaaa\")\nlabel5 = CustomLabel(text=\"qwwerty\", a=20, b=\"#ffaaaa\", r=[3, 4, 5, 6], p=32)\nassert label1.__dict__ == {\"text\": \"Hello Python\", \"fg\": \"#eee\", \"bg\": \"#333\"}\nassert label2.__dict__ == {\"text\": \"Username\"}\nassert label3.__dict__ == {\"text\": \"Password\", \"font\": (\"Comic Sans MS\", 24, \"bold\"), \"bd\": 20, \"bg\": \"#ffaaaa\"}\nassert label4.__dict__ == {\"text\": \"Hello\", \"bd\": 20, \"bg\": \"#ffaaaa\"}\nassert label5.__dict__ == {\"text\": \"qwwerty\", \"a\": 20, \"b\": \"#ffaaaa\", \"r\": [3, 4, 5, 6], \"p\": 32}\nprint(label1.__dict__)\nprint(label2.__dict__)",
        "detail": "oop23",
        "documentation": {}
    },
    {
        "label": "label4",
        "kind": 5,
        "importPath": "oop23",
        "description": "oop23",
        "peekOfCode": "label4 = CustomLabel(text=\"Hello\", bd=20, bg=\"#ffaaaa\")\nlabel5 = CustomLabel(text=\"qwwerty\", a=20, b=\"#ffaaaa\", r=[3, 4, 5, 6], p=32)\nassert label1.__dict__ == {\"text\": \"Hello Python\", \"fg\": \"#eee\", \"bg\": \"#333\"}\nassert label2.__dict__ == {\"text\": \"Username\"}\nassert label3.__dict__ == {\"text\": \"Password\", \"font\": (\"Comic Sans MS\", 24, \"bold\"), \"bd\": 20, \"bg\": \"#ffaaaa\"}\nassert label4.__dict__ == {\"text\": \"Hello\", \"bd\": 20, \"bg\": \"#ffaaaa\"}\nassert label5.__dict__ == {\"text\": \"qwwerty\", \"a\": 20, \"b\": \"#ffaaaa\", \"r\": [3, 4, 5, 6], \"p\": 32}\nprint(label1.__dict__)\nprint(label2.__dict__)\nprint(label3.__dict__)",
        "detail": "oop23",
        "documentation": {}
    },
    {
        "label": "label5",
        "kind": 5,
        "importPath": "oop23",
        "description": "oop23",
        "peekOfCode": "label5 = CustomLabel(text=\"qwwerty\", a=20, b=\"#ffaaaa\", r=[3, 4, 5, 6], p=32)\nassert label1.__dict__ == {\"text\": \"Hello Python\", \"fg\": \"#eee\", \"bg\": \"#333\"}\nassert label2.__dict__ == {\"text\": \"Username\"}\nassert label3.__dict__ == {\"text\": \"Password\", \"font\": (\"Comic Sans MS\", 24, \"bold\"), \"bd\": 20, \"bg\": \"#ffaaaa\"}\nassert label4.__dict__ == {\"text\": \"Hello\", \"bd\": 20, \"bg\": \"#ffaaaa\"}\nassert label5.__dict__ == {\"text\": \"qwwerty\", \"a\": 20, \"b\": \"#ffaaaa\", \"r\": [3, 4, 5, 6], \"p\": 32}\nprint(label1.__dict__)\nprint(label2.__dict__)\nprint(label3.__dict__)\nprint(label4.__dict__)",
        "detail": "oop23",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "oop25",
        "description": "oop25",
        "peekOfCode": "class Student:\n    def __init__(self, name, age, branch):\n        self.__name = name\n        self.__age = age\n        self.__branch = branch\n    def __display_details(self):\n        print(f\"–ò–º—è: {self.__name}\\n–í–æ–∑—Ä–∞—Å—Ç: {self.__age}\\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {self.__branch}\")\n    def access_private_method(self):\n        self.__display_details()\n# –Ω–∏–∂–µ –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∞—Å—Å–∞ Student",
        "detail": "oop25",
        "documentation": {}
    },
    {
        "label": "adam",
        "kind": 5,
        "importPath": "oop25",
        "description": "oop25",
        "peekOfCode": "adam = Student(\"Adam Smith\", 25, \"Information Technology\")\npiter = Student(\"Piter Parker\", 34, \"Information Security\")\nadam.access_private_method()\nassert piter._Student__age == 34, \"–ì–¥–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç __age?\"\nassert piter._Student__branch == \"Information Security\", \"–ì–¥–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç __branch?\"\nassert piter._Student__name == \"Piter Parker\", \"–ì–¥–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç __name?\"\npiter.access_private_method()\nadam._Student__display_details()\npiter._Student__display_details()",
        "detail": "oop25",
        "documentation": {}
    },
    {
        "label": "piter",
        "kind": 5,
        "importPath": "oop25",
        "description": "oop25",
        "peekOfCode": "piter = Student(\"Piter Parker\", 34, \"Information Security\")\nadam.access_private_method()\nassert piter._Student__age == 34, \"–ì–¥–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç __age?\"\nassert piter._Student__branch == \"Information Security\", \"–ì–¥–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç __branch?\"\nassert piter._Student__name == \"Piter Parker\", \"–ì–¥–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç __name?\"\npiter.access_private_method()\nadam._Student__display_details()\npiter._Student__display_details()",
        "detail": "oop25",
        "documentation": {}
    },
    {
        "label": "UserMail",
        "kind": 6,
        "importPath": "oop26",
        "description": "oop26",
        "peekOfCode": "class UserMail:\n    def __init__(self, login, email):\n        self.login = login\n        self.__email = email\n    def get_email(self):\n        return self.__email\n    def set_email(self, email):\n        s = \"\"\n        for i in email:\n            if i == \"@\" or i == \".\":",
        "detail": "oop26",
        "documentation": {}
    },
    {
        "label": "jim",
        "kind": 5,
        "importPath": "oop26",
        "description": "oop26",
        "peekOfCode": "jim = UserMail(\"aka47\", \"hello@com.org\")\nassert jim.login == \"aka47\"\nassert jim._UserMail__email == \"hello@com.org\"\nassert isinstance(jim, UserMail)\nassert isinstance(type(jim).email, property), \"–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ property email\"\njim.email = [1, 2, 3]  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:[1, 2, 3]\njim.email = \"hello@@re.ee\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:hello@@re.ee\njim.email = \"hello@re.w3\"\nassert jim.email == \"hello@re.w3\"\nk = UserMail(\"belosnezhka\", \"prince@wait.you\")",
        "detail": "oop26",
        "documentation": {}
    },
    {
        "label": "jim.email",
        "kind": 5,
        "importPath": "oop26",
        "description": "oop26",
        "peekOfCode": "jim.email = [1, 2, 3]  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:[1, 2, 3]\njim.email = \"hello@@re.ee\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:hello@@re.ee\njim.email = \"hello@re.w3\"\nassert jim.email == \"hello@re.w3\"\nk = UserMail(\"belosnezhka\", \"prince@wait.you\")\nassert k.email == \"prince@wait.you\"\nassert k.login == \"belosnezhka\"\nassert isinstance(k, UserMail)\nk.email = {1, 2, 3}  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:{1, 2, 3}\nk.email = \"prince@still@.wait\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:prince@still@.wait",
        "detail": "oop26",
        "documentation": {}
    },
    {
        "label": "jim.email",
        "kind": 5,
        "importPath": "oop26",
        "description": "oop26",
        "peekOfCode": "jim.email = \"hello@@re.ee\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:hello@@re.ee\njim.email = \"hello@re.w3\"\nassert jim.email == \"hello@re.w3\"\nk = UserMail(\"belosnezhka\", \"prince@wait.you\")\nassert k.email == \"prince@wait.you\"\nassert k.login == \"belosnezhka\"\nassert isinstance(k, UserMail)\nk.email = {1, 2, 3}  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:{1, 2, 3}\nk.email = \"prince@still@.wait\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:prince@still@.wait\nk.email = \"prince@stillwait\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:prince@stillwait",
        "detail": "oop26",
        "documentation": {}
    },
    {
        "label": "jim.email",
        "kind": 5,
        "importPath": "oop26",
        "description": "oop26",
        "peekOfCode": "jim.email = \"hello@re.w3\"\nassert jim.email == \"hello@re.w3\"\nk = UserMail(\"belosnezhka\", \"prince@wait.you\")\nassert k.email == \"prince@wait.you\"\nassert k.login == \"belosnezhka\"\nassert isinstance(k, UserMail)\nk.email = {1, 2, 3}  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:{1, 2, 3}\nk.email = \"prince@still@.wait\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:prince@still@.wait\nk.email = \"prince@stillwait\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:prince@stillwait\nk.email = \"prince@still.wait\"",
        "detail": "oop26",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "oop26",
        "description": "oop26",
        "peekOfCode": "k = UserMail(\"belosnezhka\", \"prince@wait.you\")\nassert k.email == \"prince@wait.you\"\nassert k.login == \"belosnezhka\"\nassert isinstance(k, UserMail)\nk.email = {1, 2, 3}  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:{1, 2, 3}\nk.email = \"prince@still@.wait\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:prince@still@.wait\nk.email = \"prince@stillwait\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:prince@stillwait\nk.email = \"prince@still.wait\"\nassert k.get_email() == \"prince@still.wait\"\nk.email = \"pri.nce@stillwait\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:pri.nce@stillwait",
        "detail": "oop26",
        "documentation": {}
    },
    {
        "label": "k.email",
        "kind": 5,
        "importPath": "oop26",
        "description": "oop26",
        "peekOfCode": "k.email = {1, 2, 3}  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:{1, 2, 3}\nk.email = \"prince@still@.wait\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:prince@still@.wait\nk.email = \"prince@stillwait\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:prince@stillwait\nk.email = \"prince@still.wait\"\nassert k.get_email() == \"prince@still.wait\"\nk.email = \"pri.nce@stillwait\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:pri.nce@stillwait\nassert k.email == \"prince@still.wait\"",
        "detail": "oop26",
        "documentation": {}
    },
    {
        "label": "k.email",
        "kind": 5,
        "importPath": "oop26",
        "description": "oop26",
        "peekOfCode": "k.email = \"prince@still@.wait\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:prince@still@.wait\nk.email = \"prince@stillwait\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:prince@stillwait\nk.email = \"prince@still.wait\"\nassert k.get_email() == \"prince@still.wait\"\nk.email = \"pri.nce@stillwait\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:pri.nce@stillwait\nassert k.email == \"prince@still.wait\"",
        "detail": "oop26",
        "documentation": {}
    },
    {
        "label": "k.email",
        "kind": 5,
        "importPath": "oop26",
        "description": "oop26",
        "peekOfCode": "k.email = \"prince@stillwait\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:prince@stillwait\nk.email = \"prince@still.wait\"\nassert k.get_email() == \"prince@still.wait\"\nk.email = \"pri.nce@stillwait\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:pri.nce@stillwait\nassert k.email == \"prince@still.wait\"",
        "detail": "oop26",
        "documentation": {}
    },
    {
        "label": "k.email",
        "kind": 5,
        "importPath": "oop26",
        "description": "oop26",
        "peekOfCode": "k.email = \"prince@still.wait\"\nassert k.get_email() == \"prince@still.wait\"\nk.email = \"pri.nce@stillwait\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:pri.nce@stillwait\nassert k.email == \"prince@still.wait\"",
        "detail": "oop26",
        "documentation": {}
    },
    {
        "label": "k.email",
        "kind": 5,
        "importPath": "oop26",
        "description": "oop26",
        "peekOfCode": "k.email = \"pri.nce@stillwait\"  # –ø–µ—á–∞—Ç–∞–µ—Ç ErrorMail:pri.nce@stillwait\nassert k.email == \"prince@still.wait\"",
        "detail": "oop26",
        "documentation": {}
    },
    {
        "label": "Money",
        "kind": 6,
        "importPath": "oop27",
        "description": "oop27",
        "peekOfCode": "class Money:\n    def __init__(self, dollars, cents):\n        self.total_cents = dollars * 100 + cents\n    @property\n    def dollars(self):\n        return self.total_cents // 100\n    @dollars.setter\n    def dollars(self, dollars):\n        if isinstance(dollars, int) and dollars >= 0:\n            self.total_cents = dollars * 100 + self.cents",
        "detail": "oop27",
        "documentation": {}
    },
    {
        "label": "Bill",
        "kind": 5,
        "importPath": "oop27",
        "description": "oop27",
        "peekOfCode": "Bill = Money(101, 99)\nprint(Bill)  # –í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 101 –¥–æ–ª–ª–∞—Ä–æ–≤ 99 —Ü–µ–Ω—Ç–æ–≤\nprint(Bill.dollars, Bill.cents)  # 101 99\nprint(Bill.total_cents)  # 10199\nBill.dollars = 666\nprint(Bill)  # –í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 666 –¥–æ–ª–ª–∞—Ä–æ–≤ 99 —Ü–µ–Ω—Ç–æ–≤\nBill.cents = 12\nprint(Bill)  # –í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 666 –¥–æ–ª–ª–∞—Ä–æ–≤ 12 —Ü–µ–Ω—Ç–æ–≤\n# class Notebook:\n#     def __init__(self, listn: list):",
        "detail": "oop27",
        "documentation": {}
    },
    {
        "label": "Bill.dollars",
        "kind": 5,
        "importPath": "oop27",
        "description": "oop27",
        "peekOfCode": "Bill.dollars = 666\nprint(Bill)  # –í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 666 –¥–æ–ª–ª–∞—Ä–æ–≤ 99 —Ü–µ–Ω—Ç–æ–≤\nBill.cents = 12\nprint(Bill)  # –í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 666 –¥–æ–ª–ª–∞—Ä–æ–≤ 12 —Ü–µ–Ω—Ç–æ–≤\n# class Notebook:\n#     def __init__(self, listn: list):\n#         self._notes = listn\n#     @property\n#     def notes_list(self):\n#         j = 1",
        "detail": "oop27",
        "documentation": {}
    },
    {
        "label": "Bill.cents",
        "kind": 5,
        "importPath": "oop27",
        "description": "oop27",
        "peekOfCode": "Bill.cents = 12\nprint(Bill)  # –í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 666 –¥–æ–ª–ª–∞—Ä–æ–≤ 12 —Ü–µ–Ω—Ç–æ–≤\n# class Notebook:\n#     def __init__(self, listn: list):\n#         self._notes = listn\n#     @property\n#     def notes_list(self):\n#         j = 1\n#         for i in self._notes:\n#             print(f\"{j}. {i}\")",
        "detail": "oop27",
        "documentation": {}
    },
    {
        "label": "Date",
        "kind": 6,
        "importPath": "oop28",
        "description": "oop28",
        "peekOfCode": "class Date:\n    def __init__(self, d, m, y):\n        self.__date = d\n        self.__month = m\n        self.__year = y\n    @property\n    def date(self):\n        return f\"{self.__date:02d}/{self.__month:02d}/{self.__year:04d}\"\n    @property\n    def usa_date(self):",
        "detail": "oop28",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "oop28",
        "description": "oop28",
        "peekOfCode": "d1 = Date(5, 10, 2001)\nassert isinstance(d1, Date)\nassert d1.date == \"05/10/2001\"\nassert d1.usa_date == \"10-05-2001\"\nassert isinstance(type(d1).date, property), \"–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ property date\"\nprint(d1.date, d1.usa_date)\nd2 = Date(15, 3, 999)\nassert isinstance(d2, Date)\nassert d2.date == \"15/03/0999\"\nassert d2.usa_date == \"03-15-0999\"",
        "detail": "oop28",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "oop28",
        "description": "oop28",
        "peekOfCode": "d2 = Date(15, 3, 999)\nassert isinstance(d2, Date)\nassert d2.date == \"15/03/0999\"\nassert d2.usa_date == \"03-15-0999\"\nassert isinstance(type(d2).date, property), \"–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ property date\"\nprint(d2.date, d2.usa_date)\nd3 = Date(3, 5, 3)\nassert d3.date == \"03/05/0003\"\nassert d3.usa_date == \"05-03-0003\"\nprint(d3.date, d3.usa_date)",
        "detail": "oop28",
        "documentation": {}
    },
    {
        "label": "d3",
        "kind": 5,
        "importPath": "oop28",
        "description": "oop28",
        "peekOfCode": "d3 = Date(3, 5, 3)\nassert d3.date == \"03/05/0003\"\nassert d3.usa_date == \"05-03-0003\"\nprint(d3.date, d3.usa_date)",
        "detail": "oop28",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "kind": 6,
        "importPath": "oop29",
        "description": "oop29",
        "peekOfCode": "class AppConfig:\n    myConfig = {}\n    @classmethod\n    def load_config(cls, fname):\n        with open(fname, \"r\") as file:\n            cls.myConfig = json.loads(file.read())\n    @classmethod\n    def isValidParam(cls, key):\n        test = key[0] in cls.myConfig\n        if len(key) > 1:",
        "detail": "oop29",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "oop29",
        "description": "oop29",
        "peekOfCode": "config = AppConfig()\nassert config.get_config(\"max_connections\") == 10\nassert config.get_config(\"min_connections\") is None\nconf = AppConfig()\nassert conf.get_config(\"max_connections\") == 10\nassert conf.get_config(\"database.user\") == \"owner\"\nassert conf.get_config(\"database.host\") == \"127.0.0.1\"\nassert conf.get_config(\"host\") is None\nprint(\"Good\")\n# class Circle:",
        "detail": "oop29",
        "documentation": {}
    },
    {
        "label": "conf",
        "kind": 5,
        "importPath": "oop29",
        "description": "oop29",
        "peekOfCode": "conf = AppConfig()\nassert conf.get_config(\"max_connections\") == 10\nassert conf.get_config(\"database.user\") == \"owner\"\nassert conf.get_config(\"database.host\") == \"127.0.0.1\"\nassert conf.get_config(\"host\") is None\nprint(\"Good\")\n# class Circle:\n#     def __init__(self, radius):\n#         if not Circle.is_positive(radius):\n#             raise ValueError(\"–†–∞–¥–∏—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º\")",
        "detail": "oop29",
        "documentation": {}
    },
    {
        "label": "GroceryItem",
        "kind": 6,
        "importPath": "oop31",
        "description": "oop31",
        "peekOfCode": "class GroceryItem:\n    def __init__(self, name, price, quantity) -> None:\n        self.name = name\n        self.price = price\n        self.quantity = quantity\n    def __str__(self) -> str:\n        return f\"Name: {self.name}\\nPrice: {self.price}\\nQuantity: {self.quantity}\"\n    def __repr__(self) -> str:\n        return f\"GroceryItem({self.name}, {self.price}, {self.quantity})\"\n# –ù–∏–∂–µ –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ GroceryItem",
        "detail": "oop31",
        "documentation": {}
    },
    {
        "label": "banana",
        "kind": 5,
        "importPath": "oop31",
        "description": "oop31",
        "peekOfCode": "banana = GroceryItem(\"Banana\", 10, 5)\nassert (\n    banana.__str__()\n    == \"\"\"Name: Banana\nPrice: 10\nQuantity: 5\"\"\"\n)\nassert repr(banana) == \"GroceryItem(Banana, 10, 5)\"\nprint(banana)\nprint(f\"{banana!r}\")",
        "detail": "oop31",
        "documentation": {}
    },
    {
        "label": "dragon_fruit",
        "kind": 5,
        "importPath": "oop31",
        "description": "oop31",
        "peekOfCode": "dragon_fruit = GroceryItem(\"Dragon fruit\", 5, 350)\nassert (\n    dragon_fruit.__str__()\n    == \"\"\"Name: Dragon fruit\nPrice: 5\nQuantity: 350\"\"\"\n)\nassert repr(dragon_fruit) == \"GroceryItem(Dragon fruit, 5, 350)\"\nprint(dragon_fruit)\nprint(f\"{dragon_fruit!r}\")",
        "detail": "oop31",
        "documentation": {}
    },
    {
        "label": "AttributeChecker",
        "kind": 6,
        "importPath": "oop310",
        "description": "oop310",
        "peekOfCode": "class AttributeChecker:\n    def __contains__(self, item):\n        return item in self.__dict__\n# –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–ª–∞—Å—Å–∞ AttributeChecker\n# –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞\ncheck = AttributeChecker()\nassert \"name\" not in check\nassert \"age\" not in check\nsetattr(check, 'name', 'Russell')\ncheck.age = 10",
        "detail": "oop310",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 5,
        "importPath": "oop310",
        "description": "oop310",
        "peekOfCode": "check = AttributeChecker()\nassert \"name\" not in check\nassert \"age\" not in check\nsetattr(check, 'name', 'Russell')\ncheck.age = 10\n# –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤\nassert \"name\" in check\nassert \"age\" in check\n# –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥—Ä—É–≥–æ–≥–æ –≠–ö\ncheck_2 = AttributeChecker()",
        "detail": "oop310",
        "documentation": {}
    },
    {
        "label": "check.age",
        "kind": 5,
        "importPath": "oop310",
        "description": "oop310",
        "peekOfCode": "check.age = 10\n# –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤\nassert \"name\" in check\nassert \"age\" in check\n# –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥—Ä—É–≥–æ–≥–æ –≠–ö\ncheck_2 = AttributeChecker()\nassert \"name\" not in check_2\nassert \"age\" not in check_2\n# –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è\ndelattr(check, \"name\")",
        "detail": "oop310",
        "documentation": {}
    },
    {
        "label": "check_2",
        "kind": 5,
        "importPath": "oop310",
        "description": "oop310",
        "peekOfCode": "check_2 = AttributeChecker()\nassert \"name\" not in check_2\nassert \"age\" not in check_2\n# –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è\ndelattr(check, \"name\")\nassert \"name\" not in check\nassert \"age\" in check\nprint(\"Good\")",
        "detail": "oop310",
        "documentation": {}
    },
    {
        "label": "Hero",
        "kind": 6,
        "importPath": "oop32",
        "description": "oop32",
        "peekOfCode": "class Hero:\n    def __len__(self):\n        return len(self.__dict__)\n    def __str__(self) -> str:\n        if len(self)==0:\n            return ''\n        else:\n            s=''\n            for key, value in sorted(self.__dict__.items()):\n                s+=f'{key}: {value}\\n'",
        "detail": "oop32",
        "documentation": {}
    },
    {
        "label": "hero",
        "kind": 5,
        "importPath": "oop32",
        "description": "oop32",
        "peekOfCode": "hero = Hero()\nassert len(hero) == 0\nhero.health = 50\nhero.damage = 10\nassert len(hero) == 2\nassert str(hero) == '''damage: 10\nhealth: 50'''\nhero.weapon = ['sword', ' bow']\nhero.skill = '–ù–µ–∫—Ä–æ–º–∞–Ω—Ç'\nassert str(hero) == '''damage: 10",
        "detail": "oop32",
        "documentation": {}
    },
    {
        "label": "hero.health",
        "kind": 5,
        "importPath": "oop32",
        "description": "oop32",
        "peekOfCode": "hero.health = 50\nhero.damage = 10\nassert len(hero) == 2\nassert str(hero) == '''damage: 10\nhealth: 50'''\nhero.weapon = ['sword', ' bow']\nhero.skill = '–ù–µ–∫—Ä–æ–º–∞–Ω—Ç'\nassert str(hero) == '''damage: 10\nhealth: 50\nskill: –ù–µ–∫—Ä–æ–º–∞–Ω—Ç",
        "detail": "oop32",
        "documentation": {}
    },
    {
        "label": "hero.damage",
        "kind": 5,
        "importPath": "oop32",
        "description": "oop32",
        "peekOfCode": "hero.damage = 10\nassert len(hero) == 2\nassert str(hero) == '''damage: 10\nhealth: 50'''\nhero.weapon = ['sword', ' bow']\nhero.skill = '–ù–µ–∫—Ä–æ–º–∞–Ω—Ç'\nassert str(hero) == '''damage: 10\nhealth: 50\nskill: –ù–µ–∫—Ä–æ–º–∞–Ω—Ç\nweapon: ['sword', ' bow']'''",
        "detail": "oop32",
        "documentation": {}
    },
    {
        "label": "hero.weapon",
        "kind": 5,
        "importPath": "oop32",
        "description": "oop32",
        "peekOfCode": "hero.weapon = ['sword', ' bow']\nhero.skill = '–ù–µ–∫—Ä–æ–º–∞–Ω—Ç'\nassert str(hero) == '''damage: 10\nhealth: 50\nskill: –ù–µ–∫—Ä–æ–º–∞–Ω—Ç\nweapon: ['sword', ' bow']'''\nprint(hero)\nvillain = Hero()\nassert str(villain) == ''\nassert len(villain) == 0",
        "detail": "oop32",
        "documentation": {}
    },
    {
        "label": "hero.skill",
        "kind": 5,
        "importPath": "oop32",
        "description": "oop32",
        "peekOfCode": "hero.skill = '–ù–µ–∫—Ä–æ–º–∞–Ω—Ç'\nassert str(hero) == '''damage: 10\nhealth: 50\nskill: –ù–µ–∫—Ä–æ–º–∞–Ω—Ç\nweapon: ['sword', ' bow']'''\nprint(hero)\nvillain = Hero()\nassert str(villain) == ''\nassert len(villain) == 0\nvillain.level = 15",
        "detail": "oop32",
        "documentation": {}
    },
    {
        "label": "villain",
        "kind": 5,
        "importPath": "oop32",
        "description": "oop32",
        "peekOfCode": "villain = Hero()\nassert str(villain) == ''\nassert len(villain) == 0\nvillain.level = 15\nvillain.skill = '–ë–æ–µ—Ü'\nvillain.armor = 25\nassert len(villain) == 3\nassert str(villain) == '''armor: 25\nlevel: 15\nskill: –ë–æ–µ—Ü'''",
        "detail": "oop32",
        "documentation": {}
    },
    {
        "label": "villain.level",
        "kind": 5,
        "importPath": "oop32",
        "description": "oop32",
        "peekOfCode": "villain.level = 15\nvillain.skill = '–ë–æ–µ—Ü'\nvillain.armor = 25\nassert len(villain) == 3\nassert str(villain) == '''armor: 25\nlevel: 15\nskill: –ë–æ–µ—Ü'''\nprint(villain)\n# class MyList:\n#     def __init__(self, elements):",
        "detail": "oop32",
        "documentation": {}
    },
    {
        "label": "villain.skill",
        "kind": 5,
        "importPath": "oop32",
        "description": "oop32",
        "peekOfCode": "villain.skill = '–ë–æ–µ—Ü'\nvillain.armor = 25\nassert len(villain) == 3\nassert str(villain) == '''armor: 25\nlevel: 15\nskill: –ë–æ–µ—Ü'''\nprint(villain)\n# class MyList:\n#     def __init__(self, elements):\n#         self.elements = elements",
        "detail": "oop32",
        "documentation": {}
    },
    {
        "label": "villain.armor",
        "kind": 5,
        "importPath": "oop32",
        "description": "oop32",
        "peekOfCode": "villain.armor = 25\nassert len(villain) == 3\nassert str(villain) == '''armor: 25\nlevel: 15\nskill: –ë–æ–µ—Ü'''\nprint(villain)\n# class MyList:\n#     def __init__(self, elements):\n#         self.elements = elements\n#     def __len__(self):",
        "detail": "oop32",
        "documentation": {}
    },
    {
        "label": "Vector",
        "kind": 6,
        "importPath": "oop33",
        "description": "oop33",
        "peekOfCode": "class Vector:\n    def __init__(self,*args) -> None:\n        self.values=[]\n        for n in args:\n            if isinstance(n,int) and not isinstance(n,bool):\n                self.values.append(n)\n        self.values.sort()\n    def __str__(self) -> str:\n        if len(self.values)==0:\n            return '–ü—É—Å—Ç–æ–π –≤–µ–∫—Ç–æ—Ä'",
        "detail": "oop33",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "oop33",
        "description": "oop33",
        "peekOfCode": "v1 = Vector(1,2,3)\nprint(v1) # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä(1, 2, 3)\"\nv2 = Vector(3,4,5)\nprint(v2) # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä(3, 4, 5)\"\nv3 = v1 + v2\nprint(v3) # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä(4, 6, 8)\"\nv4 = v3 + 5\nprint(v4) # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä(9, 11, 13)\"\nv5 = v1 * 2\nprint(v5) # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä(2, 4, 6)\"",
        "detail": "oop33",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "oop33",
        "description": "oop33",
        "peekOfCode": "v2 = Vector(3,4,5)\nprint(v2) # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä(3, 4, 5)\"\nv3 = v1 + v2\nprint(v3) # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä(4, 6, 8)\"\nv4 = v3 + 5\nprint(v4) # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä(9, 11, 13)\"\nv5 = v1 * 2\nprint(v5) # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä(2, 4, 6)\"\nv5 + 'hi' # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä –Ω–µ–ª—å–∑—è —Å–ª–æ–∂–∏—Ç—å —Å hi\"\n# # –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ Order       ",
        "detail": "oop33",
        "documentation": {}
    },
    {
        "label": "v3",
        "kind": 5,
        "importPath": "oop33",
        "description": "oop33",
        "peekOfCode": "v3 = v1 + v2\nprint(v3) # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä(4, 6, 8)\"\nv4 = v3 + 5\nprint(v4) # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä(9, 11, 13)\"\nv5 = v1 * 2\nprint(v5) # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä(2, 4, 6)\"\nv5 + 'hi' # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä –Ω–µ–ª—å–∑—è —Å–ª–æ–∂–∏—Ç—å —Å hi\"\n# # –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ Order       \n# class Order:\n#     def __init__(self,cart, customer) -> None:",
        "detail": "oop33",
        "documentation": {}
    },
    {
        "label": "v4",
        "kind": 5,
        "importPath": "oop33",
        "description": "oop33",
        "peekOfCode": "v4 = v3 + 5\nprint(v4) # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä(9, 11, 13)\"\nv5 = v1 * 2\nprint(v5) # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä(2, 4, 6)\"\nv5 + 'hi' # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä –Ω–µ–ª—å–∑—è —Å–ª–æ–∂–∏—Ç—å —Å hi\"\n# # –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ Order       \n# class Order:\n#     def __init__(self,cart, customer) -> None:\n#         self.cart=cart\n#         self.customer=customer",
        "detail": "oop33",
        "documentation": {}
    },
    {
        "label": "v5",
        "kind": 5,
        "importPath": "oop33",
        "description": "oop33",
        "peekOfCode": "v5 = v1 * 2\nprint(v5) # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä(2, 4, 6)\"\nv5 + 'hi' # –ø–µ—á–∞—Ç–∞–µ—Ç \"–í–µ–∫—Ç–æ—Ä –Ω–µ–ª—å–∑—è —Å–ª–æ–∂–∏—Ç—å —Å hi\"\n# # –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ Order       \n# class Order:\n#     def __init__(self,cart, customer) -> None:\n#         self.cart=cart\n#         self.customer=customer\n#     def __add__(self,cart):\n#         return Order(self.cart+[cart],self.customer)",
        "detail": "oop33",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "oop34",
        "description": "oop34",
        "peekOfCode": "class Rectangle:\n    def __init__(self, width, height) -> None:\n        self.width = width\n        self.height = height\n    @property\n    def area(self):\n        return self.width * self.height\n    def __eq__(self, __value: object) -> bool:\n        if isinstance(__value, (int, float)):\n            return self.area == __value",
        "detail": "oop34",
        "documentation": {}
    },
    {
        "label": "r1",
        "kind": 5,
        "importPath": "oop34",
        "description": "oop34",
        "peekOfCode": "r1 = Rectangle(3, 4)\nassert r1.width == 3\nassert r1.height == 4\nassert r1.area == 12\nassert isinstance(type(r1).area, property), \"–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ property area\"\nassert r1 > 11\nassert not r1 > 12\nassert r1 >= 12\nassert r1 <= 12\nassert not r1 > 13",
        "detail": "oop34",
        "documentation": {}
    },
    {
        "label": "r2",
        "kind": 5,
        "importPath": "oop34",
        "description": "oop34",
        "peekOfCode": "r2 = Rectangle(2, 6)\nassert r1 == r2\nassert not r1 != r2\nassert not r1 > r2\nassert not r1 < r2\nassert r1 >= r2\nassert r1 <= r2\nr3 = Rectangle(5, 2)\nassert not r2 == r3\nassert r2 != r3",
        "detail": "oop34",
        "documentation": {}
    },
    {
        "label": "r3",
        "kind": 5,
        "importPath": "oop34",
        "description": "oop34",
        "peekOfCode": "r3 = Rectangle(5, 2)\nassert not r2 == r3\nassert r2 != r3\nassert r2 > r3\nassert not r2 < r3\nassert r2 >= r3\nassert not r2 <= r3\nprint(\"Good\")\n# # –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ ChessPlayer\n# class ChessPlayer:",
        "detail": "oop34",
        "documentation": {}
    },
    {
        "label": "Quadrilateral",
        "kind": 6,
        "importPath": "oop35",
        "description": "oop35",
        "peekOfCode": "class Quadrilateral:\n    def __init__(self, width, height=0) -> None:\n        self.width = width\n        self.height = width if height == 0 else height\n    def __str__(self) -> str:\n        return (\n            f\"–ö–≤–∞–¥—Ä–∞—Ç —Ä–∞–∑–º–µ—Ä–æ–º {self.width}—Ö{self.width}\"\n            if self.height == self.width\n            else f\"–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Ä–∞–∑–º–µ—Ä–æ–º {self.width}—Ö{self.height}\"\n        )",
        "detail": "oop35",
        "documentation": {}
    },
    {
        "label": "q1",
        "kind": 5,
        "importPath": "oop35",
        "description": "oop35",
        "peekOfCode": "q1 = Quadrilateral(10)\nprint(q1)\nassert q1.height == 10\nassert q1.width == 10\nassert bool(q1) is True\nassert q1.__str__() == \"–ö–≤–∞–¥—Ä–∞—Ç —Ä–∞–∑–º–µ—Ä–æ–º 10—Ö10\"\nassert isinstance(q1, Quadrilateral)\nq2 = Quadrilateral(3, 5)\nprint(q2)\nassert q2.__str__() == \"–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Ä–∞–∑–º–µ—Ä–æ–º 3—Ö5\"",
        "detail": "oop35",
        "documentation": {}
    },
    {
        "label": "q2",
        "kind": 5,
        "importPath": "oop35",
        "description": "oop35",
        "peekOfCode": "q2 = Quadrilateral(3, 5)\nprint(q2)\nassert q2.__str__() == \"–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Ä–∞–∑–º–µ—Ä–æ–º 3—Ö5\"\nassert bool(q2) is not True\nassert isinstance(q2, Quadrilateral)\nq3 = Quadrilateral(4, 7)\nprint(q3)\nassert bool(q3) is False\nassert q3.__str__() == \"–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Ä–∞–∑–º–µ—Ä–æ–º 4—Ö7\"\nassert isinstance(q3, Quadrilateral)",
        "detail": "oop35",
        "documentation": {}
    },
    {
        "label": "q3",
        "kind": 5,
        "importPath": "oop35",
        "description": "oop35",
        "peekOfCode": "q3 = Quadrilateral(4, 7)\nprint(q3)\nassert bool(q3) is False\nassert q3.__str__() == \"–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Ä–∞–∑–º–µ—Ä–æ–º 4—Ö7\"\nassert isinstance(q3, Quadrilateral)\n# # –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ City\n# class City:\n#     def __init__(self, name) -> None:\n#         self.name = name.title()\n#     def __str__(self) -> str:",
        "detail": "oop35",
        "documentation": {}
    },
    {
        "label": "Timer",
        "kind": 6,
        "importPath": "oop36",
        "description": "oop36",
        "peekOfCode": "class Timer:\n    def __init__(self, func) -> None:\n        self.func = func\n    def __call__(self, *args: Any, **kwds: Any) -> Any:\n        start = time.time()\n        self.func()\n        print(f\"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã {time.time()-start}\")\n        return\n@Timer\ndef calculate():",
        "detail": "oop36",
        "documentation": {}
    },
    {
        "label": "calculate",
        "kind": 2,
        "importPath": "oop36",
        "description": "oop36",
        "peekOfCode": "def calculate():\n    for i in range(10000000):\n        2**100\ncalculate()\n# # –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ Addition\n# from typing import Any\n# class Addition:\n#     def __call__(self, *args: Any, **kwds: Any) -> Any:\n#         summa = 0\n#         for n in args:",
        "detail": "oop36",
        "documentation": {}
    },
    {
        "label": "ShoppingCart",
        "kind": 6,
        "importPath": "oop38",
        "description": "oop38",
        "peekOfCode": "class ShoppingCart:\n    def __init__(self) -> None:\n        self.items: dict = {}\n    def __getitem__(self, name):\n        if name in self.items:\n            return self.items[name]\n        return 0\n    def __setitem__(self, name, value):\n        self.items[name] = value\n    def __delitem__(self, name):",
        "detail": "oop38",
        "documentation": {}
    },
    {
        "label": "cart",
        "kind": 5,
        "importPath": "oop38",
        "description": "oop38",
        "peekOfCode": "cart = ShoppingCart()\n# Add some items to the cart\ncart.add_item(\"Apple\", 3)\ncart.add_item(\"Banana\", 2)\ncart.add_item(\"Orange\")\nassert cart[\"Banana\"] == 2\nassert cart[\"Orange\"] == 1\nassert cart[\"Kivi\"] == 0\ncart.add_item(\"Orange\", 9)\nassert cart[\"Orange\"] == 10",
        "detail": "oop38",
        "documentation": {}
    },
    {
        "label": "cart[\"Apple\"]",
        "kind": 5,
        "importPath": "oop38",
        "description": "oop38",
        "peekOfCode": "cart[\"Apple\"] = 5\ncart[\"Banana\"] = 7\ncart[\"Kivi\"] = 11\nassert cart[\"Apple\"] == 5\nassert cart[\"Banana\"] == 7\nassert cart[\"Kivi\"] == 11\nprint(\"Updated Shopping Cart:\")\nfor item_name in cart.items:\n    print(f\"{item_name}: {cart[item_name]}\")\n# Remove an item from the cart",
        "detail": "oop38",
        "documentation": {}
    },
    {
        "label": "cart[\"Banana\"]",
        "kind": 5,
        "importPath": "oop38",
        "description": "oop38",
        "peekOfCode": "cart[\"Banana\"] = 7\ncart[\"Kivi\"] = 11\nassert cart[\"Apple\"] == 5\nassert cart[\"Banana\"] == 7\nassert cart[\"Kivi\"] == 11\nprint(\"Updated Shopping Cart:\")\nfor item_name in cart.items:\n    print(f\"{item_name}: {cart[item_name]}\")\n# Remove an item from the cart\ncart.remove_item(\"Banana\")",
        "detail": "oop38",
        "documentation": {}
    },
    {
        "label": "cart[\"Kivi\"]",
        "kind": 5,
        "importPath": "oop38",
        "description": "oop38",
        "peekOfCode": "cart[\"Kivi\"] = 11\nassert cart[\"Apple\"] == 5\nassert cart[\"Banana\"] == 7\nassert cart[\"Kivi\"] == 11\nprint(\"Updated Shopping Cart:\")\nfor item_name in cart.items:\n    print(f\"{item_name}: {cart[item_name]}\")\n# Remove an item from the cart\ncart.remove_item(\"Banana\")\nassert cart[\"Banana\"] == 6",
        "detail": "oop38",
        "documentation": {}
    },
    {
        "label": "FibonacciIterator",
        "kind": 6,
        "importPath": "oop39",
        "description": "oop39",
        "peekOfCode": "class FibonacciIterator:\n    def __init__(self, stop):\n        self.stop = stop\n        self.previous = 0\n        self.current = 0\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if self.current > self.stop and self.previous > 0:\n            raise StopIteration",
        "detail": "oop39",
        "documentation": {}
    },
    {
        "label": "fibonacci_iter",
        "kind": 5,
        "importPath": "oop39",
        "description": "oop39",
        "peekOfCode": "fibonacci_iter = FibonacciIterator(0)\nfor number in fibonacci_iter:\n    print(number)\n# class StackIterator:\n#     def __init__(self, stack):\n#         self.stack = stack\n#         self.start = len(stack.items)\n#     def __iter__(self):\n#         return self\n#     def __next__(self):",
        "detail": "oop39",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "oop41",
        "description": "oop41",
        "peekOfCode": "class Person:\n    def __init__(self,name) -> None:\n        self.name=name\n    def get_name(self):        \n        return self.name\n    def is_employee(self):\n        return False\nclass Employee(Person):\n    def is_employee(self):\n        return True",
        "detail": "oop41",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "oop41",
        "description": "oop41",
        "peekOfCode": "class Employee(Person):\n    def is_employee(self):\n        return True\n# –ù–∏–∂–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\nassert issubclass(Employee, Person)\np = Person(\"just human\")\nassert p.name == 'just human'\nassert p.get_name() == 'just human'\nassert p.is_employee() is False\nemp = Employee(\"Geek\")",
        "detail": "oop41",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "oop41",
        "description": "oop41",
        "peekOfCode": "p = Person(\"just human\")\nassert p.name == 'just human'\nassert p.get_name() == 'just human'\nassert p.is_employee() is False\nemp = Employee(\"Geek\")\nassert emp.name == 'Geek'\nassert emp.get_name() == 'Geek'\nassert emp.is_employee() is True\nprint('Good')\n# # –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –∑–∞–¥–∞–Ω–∏—è     ",
        "detail": "oop41",
        "documentation": {}
    },
    {
        "label": "emp",
        "kind": 5,
        "importPath": "oop41",
        "description": "oop41",
        "peekOfCode": "emp = Employee(\"Geek\")\nassert emp.name == 'Geek'\nassert emp.get_name() == 'Geek'\nassert emp.is_employee() is True\nprint('Good')\n# # –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –∑–∞–¥–∞–Ω–∏—è     \n# class Vehicle:\n#     def __init__(self,*args):\n#         self.name, self.max_speed, self.mileage = args\n#     def display_info(self):",
        "detail": "oop41",
        "documentation": {}
    },
    {
        "label": "Device",
        "kind": 6,
        "importPath": "oop410",
        "description": "oop410",
        "peekOfCode": "class Device:\n    __slots__ = (\"_name\", \"_location\", \"_status\")\n    def __init__(self, _name, _location, _status=\"ON\") -> None:\n        self._name = _name\n        self._location = _location\n        self._status = _status\n    @property\n    def name(self):\n        return self._name\n    @property",
        "detail": "oop410",
        "documentation": {}
    },
    {
        "label": "Light",
        "kind": 6,
        "importPath": "oop410",
        "description": "oop410",
        "peekOfCode": "class Light(Device):\n    __slots__ = (\"_brightness\", \"_color\")\n    def __init__(self, _name, _location, _brightness, _color) -> None:\n        super().__init__(_name, _location)\n        self._brightness = _brightness\n        self._color = _color\n    @property\n    def color(self):\n        return self._color\n    @property",
        "detail": "oop410",
        "documentation": {}
    },
    {
        "label": "Thermostat",
        "kind": 6,
        "importPath": "oop410",
        "description": "oop410",
        "peekOfCode": "class Thermostat(Device):\n    __slots__ = (\"_current_temperature\", \"_target_temperature\")\n    def __init__(self, _name, _location, _current_temperature, _target_temperature) -> None:\n        super().__init__(_name, _location)\n        self._current_temperature = _current_temperature\n        self._target_temperature = _target_temperature\n    @property\n    def current_temperature(self):\n        return self._current_temperature\n    @current_temperature.setter",
        "detail": "oop410",
        "documentation": {}
    },
    {
        "label": "SmartTV",
        "kind": 6,
        "importPath": "oop410",
        "description": "oop410",
        "peekOfCode": "class SmartTV(Device):\n    __slots__ = \"_channel\"\n    def __init__(self, _name, _location, _channel) -> None:\n        super().__init__(_name, _location)\n        self._channel = _channel\n    @property\n    def channel(self):\n        return self._channel\n    @channel.setter\n    def channel(self, value):",
        "detail": "oop410",
        "documentation": {}
    },
    {
        "label": "device1",
        "kind": 5,
        "importPath": "oop410",
        "description": "oop410",
        "peekOfCode": "device1 = Device(\"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1\", \"–ì–æ—Å—Ç–∏–Ω–∞—è\")\nassert device1.name == \"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1\"\nassert device1._name == \"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1\"\nassert device1.location == \"–ì–æ—Å—Ç–∏–Ω–∞—è\"\nassert device1._location == \"–ì–æ—Å—Ç–∏–Ω–∞—è\"\nassert device1.status == \"ON\"\nassert device1._status == \"ON\"\ndevice1.turn_off()\nassert device1.status == \"OFF\"\ndevice1.location = \"–ö—É—Ö–Ω—è\"",
        "detail": "oop410",
        "documentation": {}
    },
    {
        "label": "device1.location",
        "kind": 5,
        "importPath": "oop410",
        "description": "oop410",
        "peekOfCode": "device1.location = \"–ö—É—Ö–Ω—è\"\nassert device1.location == \"–ö—É—Ö–Ω—è\"\nassert device1._location == \"–ö—É—Ö–Ω—è\"\ndevice1.turn_on()\nassert device1.status == \"ON\"\nlight1 = Light(\"–õ–∞–º–ø–∞\", \"–ì–æ—Å—Ç–∏–Ω–∞—è\", 50, \"–±–µ–ª—ã–π\")\nlight1.name == \"–õ–∞–º–ø–∞\"\nlight1.location == \"–ì–æ—Å—Ç–∏–Ω–∞—è\"\nlight1.status == \"ON\"\nlight1.brightness == \"50\"",
        "detail": "oop410",
        "documentation": {}
    },
    {
        "label": "light1",
        "kind": 5,
        "importPath": "oop410",
        "description": "oop410",
        "peekOfCode": "light1 = Light(\"–õ–∞–º–ø–∞\", \"–ì–æ—Å—Ç–∏–Ω–∞—è\", 50, \"–±–µ–ª—ã–π\")\nlight1.name == \"–õ–∞–º–ø–∞\"\nlight1.location == \"–ì–æ—Å—Ç–∏–Ω–∞—è\"\nlight1.status == \"ON\"\nlight1.brightness == \"50\"\nlight1.color == \"–±–µ–ª—ã–π\"\nlight1.turn_off()\nlight1.status == \"OFF\"\nthermostat_1 = Thermostat(\"–¢–µ—Ä–º–æ–º–µ—Ç—Ä\", \"–ë–∞–ª–∫–æ–Ω\", 10, 15)\nthermostat_1.name == \"–¢–µ—Ä–º–æ–º–µ—Ç—Ä\"",
        "detail": "oop410",
        "documentation": {}
    },
    {
        "label": "thermostat_1",
        "kind": 5,
        "importPath": "oop410",
        "description": "oop410",
        "peekOfCode": "thermostat_1 = Thermostat(\"–¢–µ—Ä–º–æ–º–µ—Ç—Ä\", \"–ë–∞–ª–∫–æ–Ω\", 10, 15)\nthermostat_1.name == \"–¢–µ—Ä–º–æ–º–µ—Ç—Ä\"\nthermostat_1.location == \"–ë–∞–ª–∫–æ–Ω\"\nthermostat_1.status == \"ON\"\nthermostat_1.current_temperature == 10\nthermostat_1.target_temperature == 15\ntv = SmartTV(\"Samsung\", \"–°–ø–∞–ª—å–Ω—è\", 20)\ntv.name == \"–¢–µ—Ä–º–æ–º–µ—Ç—Ä\"\ntv.location == \"–ë–∞–ª–∫–æ–Ω\"\ntv.status == \"ON\"",
        "detail": "oop410",
        "documentation": {}
    },
    {
        "label": "tv",
        "kind": 5,
        "importPath": "oop410",
        "description": "oop410",
        "peekOfCode": "tv = SmartTV(\"Samsung\", \"–°–ø–∞–ª—å–Ω—è\", 20)\ntv.name == \"–¢–µ—Ä–º–æ–º–µ—Ç—Ä\"\ntv.location == \"–ë–∞–ª–∫–æ–Ω\"\ntv.status == \"ON\"\ntv.channel == 20\nprint(\"GOOD\")",
        "detail": "oop410",
        "documentation": {}
    },
    {
        "label": "Database",
        "kind": 6,
        "importPath": "oop411",
        "description": "oop411",
        "peekOfCode": "class Database(ABC):\n    @abstractmethod\n    def connect(self):\n        pass\n    @abstractmethod\n    def disconnect(self):\n        pass\n    @abstractmethod\n    def execute(self, query):\n        pass",
        "detail": "oop411",
        "documentation": {}
    },
    {
        "label": "MySQLDatabase",
        "kind": 6,
        "importPath": "oop411",
        "description": "oop411",
        "peekOfCode": "class MySQLDatabase(Database):\n    def connect(self):\n        print(\"Connecting to MySQL database...\")\n    def disconnect(self):\n        print(\"Disconnecting from MySQL database...\")\n    def execute(self, query):\n        print(f\"Executing query {query} in MySQL database...\")\nclass PostgreSQLDatabase(Database):\n    def connect(self):\n        print(\"Connecting to PostgreSQL database...\")",
        "detail": "oop411",
        "documentation": {}
    },
    {
        "label": "PostgreSQLDatabase",
        "kind": 6,
        "importPath": "oop411",
        "description": "oop411",
        "peekOfCode": "class PostgreSQLDatabase(Database):\n    def connect(self):\n        print(\"Connecting to PostgreSQL database...\")\n    def disconnect(self):\n        print(\"Disconnecting from PostgreSQL database...\")\n    def execute(self, query):\n        print(f\"Executing query {query} in PostgreSQL database...\")\n# –ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\nmysql_db = MySQLDatabase()\npostgresql_db = PostgreSQLDatabase()",
        "detail": "oop411",
        "documentation": {}
    },
    {
        "label": "mysql_db",
        "kind": 5,
        "importPath": "oop411",
        "description": "oop411",
        "peekOfCode": "mysql_db = MySQLDatabase()\npostgresql_db = PostgreSQLDatabase()\nmysql_db.connect()\nmysql_db.execute(\"SELECT * FROM customers;\")\nmysql_db.disconnect()\npostgresql_db.connect()\npostgresql_db.execute(\"SELECT * FROM customers;\")\npostgresql_db.disconnect()\n# # –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å—ã Employee HourlyEmployee –∏ SalariedEmployee\n# from abc import ABC, abstractmethod",
        "detail": "oop411",
        "documentation": {}
    },
    {
        "label": "postgresql_db",
        "kind": 5,
        "importPath": "oop411",
        "description": "oop411",
        "peekOfCode": "postgresql_db = PostgreSQLDatabase()\nmysql_db.connect()\nmysql_db.execute(\"SELECT * FROM customers;\")\nmysql_db.disconnect()\npostgresql_db.connect()\npostgresql_db.execute(\"SELECT * FROM customers;\")\npostgresql_db.disconnect()\n# # –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å—ã Employee HourlyEmployee –∏ SalariedEmployee\n# from abc import ABC, abstractmethod\n# class Employee(ABC):",
        "detail": "oop411",
        "documentation": {}
    },
    {
        "label": "NewInt",
        "kind": 6,
        "importPath": "oop42",
        "description": "oop42",
        "peekOfCode": "class NewInt(int):\n    def repeat(self,rep=2):\n        return int(str(self)*rep)\n    def to_bin(self):\n        return int(str(bin(self))[2:])\na = NewInt(9)\nprint(a.repeat())  # –ø–µ—á–∞—Ç–∞–µ—Ç —á–∏—Å–ª–æ 99\nd = NewInt(a + 5)\nprint(d.repeat(3)) # –ø–µ—á–∞—Ç–∞–µ—Ç —á–∏—Å–ª–æ 141414\nb = NewInt(NewInt(7) * NewInt(5))",
        "detail": "oop42",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "oop42",
        "description": "oop42",
        "peekOfCode": "a = NewInt(9)\nprint(a.repeat())  # –ø–µ—á–∞—Ç–∞–µ—Ç —á–∏—Å–ª–æ 99\nd = NewInt(a + 5)\nprint(d.repeat(3)) # –ø–µ—á–∞—Ç–∞–µ—Ç —á–∏—Å–ª–æ 141414\nb = NewInt(NewInt(7) * NewInt(5))\nprint(b.to_bin()) # –ø–µ—á–∞—Ç–∞–µ—Ç 100011 - –¥–≤–æ–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ 35",
        "detail": "oop42",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "oop42",
        "description": "oop42",
        "peekOfCode": "d = NewInt(a + 5)\nprint(d.repeat(3)) # –ø–µ—á–∞—Ç–∞–µ—Ç —á–∏—Å–ª–æ 141414\nb = NewInt(NewInt(7) * NewInt(5))\nprint(b.to_bin()) # –ø–µ—á–∞—Ç–∞–µ—Ç 100011 - –¥–≤–æ–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ 35",
        "detail": "oop42",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "oop42",
        "description": "oop42",
        "peekOfCode": "b = NewInt(NewInt(7) * NewInt(5))\nprint(b.to_bin()) # –ø–µ—á–∞—Ç–∞–µ—Ç 100011 - –¥–≤–æ–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ 35",
        "detail": "oop42",
        "documentation": {}
    },
    {
        "label": "MethodOverriding",
        "kind": 6,
        "importPath": "oop43",
        "description": "oop43",
        "peekOfCode": "class MethodOverriding:\n    def __init__(self):\n        x = X()\n        y = Y()\n        y.method_2()\n        x.method_1()\n        y.method_1()\n        x = y\n        x.method_1() # ‚Ññ 1\n        x.method_2() # ‚Ññ 2",
        "detail": "oop43",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 6,
        "importPath": "oop43",
        "description": "oop43",
        "peekOfCode": "class X:\n    def method_1(self):\n        print(\"m1 ~ X\")\nclass Y(X):\n    def method_1(self):\n        print(\"m1 ~ Y\")\n    def method_2(self):\n        print(\"m2 ~ Y\")\nMethodOverriding()",
        "detail": "oop43",
        "documentation": {}
    },
    {
        "label": "Y",
        "kind": 6,
        "importPath": "oop43",
        "description": "oop43",
        "peekOfCode": "class Y(X):\n    def method_1(self):\n        print(\"m1 ~ Y\")\n    def method_2(self):\n        print(\"m2 ~ Y\")\nMethodOverriding()",
        "detail": "oop43",
        "documentation": {}
    },
    {
        "label": "Initialization",
        "kind": 6,
        "importPath": "oop45",
        "description": "oop45",
        "peekOfCode": "class Initialization:\n    def __init__(self, capacity, food) -> None:\n        if isinstance(capacity, int):\n            self.capacity = capacity\n            self.food = food\n        else:\n            print(\"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º\")\nclass Vegetarian(Initialization):\n    def __init__(self, capacity, food) -> None:\n        super().__init__(capacity, food)",
        "detail": "oop45",
        "documentation": {}
    },
    {
        "label": "Vegetarian",
        "kind": 6,
        "importPath": "oop45",
        "description": "oop45",
        "peekOfCode": "class Vegetarian(Initialization):\n    def __init__(self, capacity, food) -> None:\n        super().__init__(capacity, food)\n    def __str__(self) -> str:\n        return f\"{self.capacity} –ª—é–¥–µ–π –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç –Ω–µ –µ—Å—Ç—å –º—è—Å–æ! –û–Ω–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç {self.food}\"\nclass MeatEater(Initialization):\n    def __init__(self, capacity, food) -> None:\n        super().__init__(capacity, food)\n    def __str__(self) -> str:\n        return f\"{self.capacity} –º—è—Å–æ–µ–¥–æ–≤ –≤ –ú–æ—Å–∫–≤–µ! –ü–æ–º–∏–º–æ –º—è—Å–∞ –æ–Ω–∏ –µ–¥—è—Ç –µ—â–µ –∏ {self.food}\"",
        "detail": "oop45",
        "documentation": {}
    },
    {
        "label": "MeatEater",
        "kind": 6,
        "importPath": "oop45",
        "description": "oop45",
        "peekOfCode": "class MeatEater(Initialization):\n    def __init__(self, capacity, food) -> None:\n        super().__init__(capacity, food)\n    def __str__(self) -> str:\n        return f\"{self.capacity} –º—è—Å–æ–µ–¥–æ–≤ –≤ –ú–æ—Å–∫–≤–µ! –ü–æ–º–∏–º–æ –º—è—Å–∞ –æ–Ω–∏ –µ–¥—è—Ç –µ—â–µ –∏ {self.food}\"\nclass SweetTooth(Initialization):\n    def __init__(self, capacity, food) -> None:\n        super().__init__(capacity, food)\n    def __str__(self) -> str:\n        return f\"–°–ª–∞–¥–∫–æ–µ–∂–µ–∫ –≤ –ú–æ—Å–∫–≤–µ {self.capacity}. –ò—Ö —Å–∞–º–∞—è –ª—é–±–∏–º–∞—è –µ–¥–∞: {self.food}\"",
        "detail": "oop45",
        "documentation": {}
    },
    {
        "label": "SweetTooth",
        "kind": 6,
        "importPath": "oop45",
        "description": "oop45",
        "peekOfCode": "class SweetTooth(Initialization):\n    def __init__(self, capacity, food) -> None:\n        super().__init__(capacity, food)\n    def __str__(self) -> str:\n        return f\"–°–ª–∞–¥–∫–æ–µ–∂–µ–∫ –≤ –ú–æ—Å–∫–≤–µ {self.capacity}. –ò—Ö —Å–∞–º–∞—è –ª—é–±–∏–º–∞—è –µ–¥–∞: {self.food}\"\n    def __eq__(self, __value: object) -> bool:\n        if not isinstance(__value, (int, MeatEater, Vegetarian)):\n            return f\"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–¥–∫–æ–µ–∂–µ–∫ —Å {__value}\"\n        else:\n            if isinstance(__value, int):",
        "detail": "oop45",
        "documentation": {}
    },
    {
        "label": "p1",
        "kind": 5,
        "importPath": "oop45",
        "description": "oop45",
        "peekOfCode": "p1 = Initialization(\"Chuck\", [])\nassert isinstance(p1, Initialization)\nassert not hasattr(p1, \"capacity\"), '–ù–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞—Ç—Ä–∏–±—É—Ç \"capacity\", –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ'\nassert not hasattr(p1, \"food\"), '–ù–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞—Ç—Ä–∏–±—É—Ç \"food\", –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ'\nc1 = Vegetarian(100, [1, 2, 3])\nprint(c1)\nassert isinstance(c1, Vegetarian)\nassert c1.capacity == 100\nassert c1.food == [1, 2, 3]\nb1 = MeatEater(1000, [\"Arkasha\"])",
        "detail": "oop45",
        "documentation": {}
    },
    {
        "label": "c1",
        "kind": 5,
        "importPath": "oop45",
        "description": "oop45",
        "peekOfCode": "c1 = Vegetarian(100, [1, 2, 3])\nprint(c1)\nassert isinstance(c1, Vegetarian)\nassert c1.capacity == 100\nassert c1.food == [1, 2, 3]\nb1 = MeatEater(1000, [\"Arkasha\"])\nprint(b1)\nassert isinstance(b1, MeatEater)\nassert b1.capacity == 1000\nassert b1.food == [\"Arkasha\"]",
        "detail": "oop45",
        "documentation": {}
    },
    {
        "label": "b1",
        "kind": 5,
        "importPath": "oop45",
        "description": "oop45",
        "peekOfCode": "b1 = MeatEater(1000, [\"Arkasha\"])\nprint(b1)\nassert isinstance(b1, MeatEater)\nassert b1.capacity == 1000\nassert b1.food == [\"Arkasha\"]\npla = SweetTooth(444, [2150, 777])\nprint(pla)\nassert isinstance(pla, SweetTooth)\nassert pla.capacity == 444\nassert pla.food == [2150, 777]",
        "detail": "oop45",
        "documentation": {}
    },
    {
        "label": "pla",
        "kind": 5,
        "importPath": "oop45",
        "description": "oop45",
        "peekOfCode": "pla = SweetTooth(444, [2150, 777])\nprint(pla)\nassert isinstance(pla, SweetTooth)\nassert pla.capacity == 444\nassert pla.food == [2150, 777]\nassert pla > 100\nassert not pla < 80\nassert not pla == 90\nassert pla > c1\nassert not pla < c1",
        "detail": "oop45",
        "documentation": {}
    },
    {
        "label": "v_first",
        "kind": 5,
        "importPath": "oop45",
        "description": "oop45",
        "peekOfCode": "v_first = Vegetarian(10000, [\"–û—Ä–µ—Ö–∏\", \"–æ–≤–æ—â–∏\", \"—Ñ—Ä—É–∫—Ç—ã\"])\nprint(v_first)  # 10000 –ª—é–¥–µ–π –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç –Ω–µ –µ—Å—Ç—å –º—è—Å–æ! –û–Ω–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç ['–û—Ä–µ—Ö–∏', '–æ–≤–æ—â–∏', '—Ñ—Ä—É–∫—Ç—ã']\nv_second = Vegetarian([23], [\"nothing\"])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º\nm_first = MeatEater(15000, [\"–ñ–∞—Ä–µ–Ω—É—é –∫–∞—Ä—Ç–æ—à–∫—É\", \"—Ä—ã–±–∞\"])\nprint(m_first)  # 15000 –º—è—Å–æ–µ–¥–æ–≤ –≤ –ú–æ—Å–∫–≤–µ! –ü–æ–º–∏–º–æ –º—è—Å–∞ –æ–Ω–∏ –µ–¥—è—Ç –µ—â–µ –∏ ['–ñ–∞—Ä–µ–Ω—É—é –∫–∞—Ä—Ç–æ—à–∫—É', '—Ä—ã–±–∞']\ns_first = SweetTooth(30000, [\"–ú–æ—Ä–æ–∂–µ–Ω–æ–µ\", \"–ß–∏–ø—Å—ã\", \"–®–û–ö–û–õ–ê–î\"])\nprint(s_first)  # –°–ª–∞–¥–∫–æ–µ–∂–µ–∫ –≤ –ú–æ—Å–∫–≤–µ 30000. –ò—Ö —Å–∞–º–∞—è –ª—é–±–∏–º—è –µ–¥–∞: ['–ú–æ—Ä–æ–∂–µ–Ω–æ–µ', '–ß–∏–ø—Å—ã', '–®–û–ö–û–õ–ê–î']\nprint(s_first > v_first)  # –°–ª–∞–¥–∫–æ–µ–∂–µ–∫ –±–æ–ª—å—à–µ, —á–µ–º –ª—é–¥–µ–π —Å –¥—Ä—É–≥–∏–º –≤–∫—É—Å–æ–≤—ã–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ–º\nprint(30000 == s_first)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–¥–∫–æ–µ–∂–µ–∫ –∏–∑ –æ–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å 30000\nprint(s_first == 25000)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç",
        "detail": "oop45",
        "documentation": {}
    },
    {
        "label": "v_second",
        "kind": 5,
        "importPath": "oop45",
        "description": "oop45",
        "peekOfCode": "v_second = Vegetarian([23], [\"nothing\"])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º\nm_first = MeatEater(15000, [\"–ñ–∞—Ä–µ–Ω—É—é –∫–∞—Ä—Ç–æ—à–∫—É\", \"—Ä—ã–±–∞\"])\nprint(m_first)  # 15000 –º—è—Å–æ–µ–¥–æ–≤ –≤ –ú–æ—Å–∫–≤–µ! –ü–æ–º–∏–º–æ –º—è—Å–∞ –æ–Ω–∏ –µ–¥—è—Ç –µ—â–µ –∏ ['–ñ–∞—Ä–µ–Ω—É—é –∫–∞—Ä—Ç–æ—à–∫—É', '—Ä—ã–±–∞']\ns_first = SweetTooth(30000, [\"–ú–æ—Ä–æ–∂–µ–Ω–æ–µ\", \"–ß–∏–ø—Å—ã\", \"–®–û–ö–û–õ–ê–î\"])\nprint(s_first)  # –°–ª–∞–¥–∫–æ–µ–∂–µ–∫ –≤ –ú–æ—Å–∫–≤–µ 30000. –ò—Ö —Å–∞–º–∞—è –ª—é–±–∏–º—è –µ–¥–∞: ['–ú–æ—Ä–æ–∂–µ–Ω–æ–µ', '–ß–∏–ø—Å—ã', '–®–û–ö–û–õ–ê–î']\nprint(s_first > v_first)  # –°–ª–∞–¥–∫–æ–µ–∂–µ–∫ –±–æ–ª—å—à–µ, —á–µ–º –ª—é–¥–µ–π —Å –¥—Ä—É–≥–∏–º –≤–∫—É—Å–æ–≤—ã–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ–º\nprint(30000 == s_first)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–¥–∫–æ–µ–∂–µ–∫ –∏–∑ –æ–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å 30000\nprint(s_first == 25000)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç\nprint(100000 < s_first)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–¥–∫–æ–µ–∂–µ–∫ –≤ –ú–æ—Å–∫–≤–µ –Ω–µ –±–æ–ª—å—à–µ, —á–µ–º 100000\nprint(100 < s_first)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–¥–∫–æ–µ–∂–µ–∫ –±–æ–ª—å—à–µ, —á–µ–º 100",
        "detail": "oop45",
        "documentation": {}
    },
    {
        "label": "m_first",
        "kind": 5,
        "importPath": "oop45",
        "description": "oop45",
        "peekOfCode": "m_first = MeatEater(15000, [\"–ñ–∞—Ä–µ–Ω—É—é –∫–∞—Ä—Ç–æ—à–∫—É\", \"—Ä—ã–±–∞\"])\nprint(m_first)  # 15000 –º—è—Å–æ–µ–¥–æ–≤ –≤ –ú–æ—Å–∫–≤–µ! –ü–æ–º–∏–º–æ –º—è—Å–∞ –æ–Ω–∏ –µ–¥—è—Ç –µ—â–µ –∏ ['–ñ–∞—Ä–µ–Ω—É—é –∫–∞—Ä—Ç–æ—à–∫—É', '—Ä—ã–±–∞']\ns_first = SweetTooth(30000, [\"–ú–æ—Ä–æ–∂–µ–Ω–æ–µ\", \"–ß–∏–ø—Å—ã\", \"–®–û–ö–û–õ–ê–î\"])\nprint(s_first)  # –°–ª–∞–¥–∫–æ–µ–∂–µ–∫ –≤ –ú–æ—Å–∫–≤–µ 30000. –ò—Ö —Å–∞–º–∞—è –ª—é–±–∏–º—è –µ–¥–∞: ['–ú–æ—Ä–æ–∂–µ–Ω–æ–µ', '–ß–∏–ø—Å—ã', '–®–û–ö–û–õ–ê–î']\nprint(s_first > v_first)  # –°–ª–∞–¥–∫–æ–µ–∂–µ–∫ –±–æ–ª—å—à–µ, —á–µ–º –ª—é–¥–µ–π —Å –¥—Ä—É–≥–∏–º –≤–∫—É—Å–æ–≤—ã–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ–º\nprint(30000 == s_first)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–¥–∫–æ–µ–∂–µ–∫ –∏–∑ –æ–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å 30000\nprint(s_first == 25000)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç\nprint(100000 < s_first)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–¥–∫–æ–µ–∂–µ–∫ –≤ –ú–æ—Å–∫–≤–µ –Ω–µ –±–æ–ª—å—à–µ, —á–µ–º 100000\nprint(100 < s_first)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–¥–∫–æ–µ–∂–µ–∫ –±–æ–ª—å—à–µ, —á–µ–º 100\n# # –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ Transport Car Boat –∏ Plane",
        "detail": "oop45",
        "documentation": {}
    },
    {
        "label": "s_first",
        "kind": 5,
        "importPath": "oop45",
        "description": "oop45",
        "peekOfCode": "s_first = SweetTooth(30000, [\"–ú–æ—Ä–æ–∂–µ–Ω–æ–µ\", \"–ß–∏–ø—Å—ã\", \"–®–û–ö–û–õ–ê–î\"])\nprint(s_first)  # –°–ª–∞–¥–∫–æ–µ–∂–µ–∫ –≤ –ú–æ—Å–∫–≤–µ 30000. –ò—Ö —Å–∞–º–∞—è –ª—é–±–∏–º—è –µ–¥–∞: ['–ú–æ—Ä–æ–∂–µ–Ω–æ–µ', '–ß–∏–ø—Å—ã', '–®–û–ö–û–õ–ê–î']\nprint(s_first > v_first)  # –°–ª–∞–¥–∫–æ–µ–∂–µ–∫ –±–æ–ª—å—à–µ, —á–µ–º –ª—é–¥–µ–π —Å –¥—Ä—É–≥–∏–º –≤–∫—É—Å–æ–≤—ã–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ–º\nprint(30000 == s_first)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–¥–∫–æ–µ–∂–µ–∫ –∏–∑ –æ–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å 30000\nprint(s_first == 25000)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç\nprint(100000 < s_first)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–¥–∫–æ–µ–∂–µ–∫ –≤ –ú–æ—Å–∫–≤–µ –Ω–µ –±–æ–ª—å—à–µ, —á–µ–º 100000\nprint(100 < s_first)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–¥–∫–æ–µ–∂–µ–∫ –±–æ–ª—å—à–µ, —á–µ–º 100\n# # –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ Transport Car Boat –∏ Plane\n# # from typing import Optional\n# #     def __init__(self, brand, max_speed, kind: Optional[str] = None) -> None:",
        "detail": "oop45",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "oop46",
        "description": "oop46",
        "peekOfCode": "class Person:\n    def __init__(self, name, age) -> None:\n        self.name = name\n        self.age = age\n    def display_person_info(self):\n        print(f\"Person: {self.name}, {self.age}\")\nclass Company:\n    def __init__(self, company_name, location) -> None:\n        self.company_name = company_name\n        self.location = location",
        "detail": "oop46",
        "documentation": {}
    },
    {
        "label": "Company",
        "kind": 6,
        "importPath": "oop46",
        "description": "oop46",
        "peekOfCode": "class Company:\n    def __init__(self, company_name, location) -> None:\n        self.company_name = company_name\n        self.location = location\n    def display_company_info(self):\n        print(f\"Company: {self.company_name}, {self.location}\")\nclass Employee(Person, Company):\n    def __init__(self, name, age, company_name, location) -> None:\n        super().__init__(name, age)\n        Company.__init__(self, company_name, location)",
        "detail": "oop46",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "oop46",
        "description": "oop46",
        "peekOfCode": "class Employee(Person, Company):\n    def __init__(self, name, age, company_name, location) -> None:\n        super().__init__(name, age)\n        Company.__init__(self, company_name, location)\n# –ù–∏–∂–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –ø—Ä–æ–≤–µ–≤–∫–∏ –¥–ª—è –∫–æ–¥–∞\na = Person(\"Ivan\", 32)\na.display_person_info()\na = Company(\"Zara\", \"Prague\")\na.display_company_info()\nemp = Employee(\"Jessica\", 28, \"Google\", \"Atlanta\")",
        "detail": "oop46",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "oop46",
        "description": "oop46",
        "peekOfCode": "a = Person(\"Ivan\", 32)\na.display_person_info()\na = Company(\"Zara\", \"Prague\")\na.display_company_info()\nemp = Employee(\"Jessica\", 28, \"Google\", \"Atlanta\")\nemp.display_person_info()\nemp.display_company_info()\nemp2 = Employee(\"Kolya\", 11, \"Facebook\", \"Seatle\")\nemp2.display_person_info()\nemp2.display_company_info()",
        "detail": "oop46",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "oop46",
        "description": "oop46",
        "peekOfCode": "a = Company(\"Zara\", \"Prague\")\na.display_company_info()\nemp = Employee(\"Jessica\", 28, \"Google\", \"Atlanta\")\nemp.display_person_info()\nemp.display_company_info()\nemp2 = Employee(\"Kolya\", 11, \"Facebook\", \"Seatle\")\nemp2.display_person_info()\nemp2.display_company_info()\n# # –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ User Authentication AuthenticatedUser\n# class User:",
        "detail": "oop46",
        "documentation": {}
    },
    {
        "label": "emp",
        "kind": 5,
        "importPath": "oop46",
        "description": "oop46",
        "peekOfCode": "emp = Employee(\"Jessica\", 28, \"Google\", \"Atlanta\")\nemp.display_person_info()\nemp.display_company_info()\nemp2 = Employee(\"Kolya\", 11, \"Facebook\", \"Seatle\")\nemp2.display_person_info()\nemp2.display_company_info()\n# # –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ User Authentication AuthenticatedUser\n# class User:\n#     def __init__(self, user, password) -> None:\n#         self.user = user",
        "detail": "oop46",
        "documentation": {}
    },
    {
        "label": "emp2",
        "kind": 5,
        "importPath": "oop46",
        "description": "oop46",
        "peekOfCode": "emp2 = Employee(\"Kolya\", 11, \"Facebook\", \"Seatle\")\nemp2.display_person_info()\nemp2.display_company_info()\n# # –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ User Authentication AuthenticatedUser\n# class User:\n#     def __init__(self, user, password) -> None:\n#         self.user = user\n#         self.password = password\n#     def get_info(self):\n#         return f\"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.user}\"",
        "detail": "oop46",
        "documentation": {}
    },
    {
        "label": "DictMixin",
        "kind": 6,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "class DictMixin:\n    def to_dict(self):\n        return json.loads(json.dumps(self, default=lambda x: x.__dict__))\n# –ù–∏–∂–µ –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–∫—Å–∏–Ω–∞ DictMixin\nclass Phone(DictMixin):\n    def __init__(self, number):\n        self.number = number\nclass Person(DictMixin):\n    def __init__(self, name, age, address):\n        self.name = name",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "Phone",
        "kind": 6,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "class Phone(DictMixin):\n    def __init__(self, number):\n        self.number = number\nclass Person(DictMixin):\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address\nclass Address(DictMixin):\n    def __init__(self, street, city, state, zip_code):",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "class Person(DictMixin):\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address\nclass Address(DictMixin):\n    def __init__(self, street, city, state, zip_code):\n        self.street = street\n        self.city = city\n        self.state = state",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "Address",
        "kind": 6,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "class Address(DictMixin):\n    def __init__(self, street, city, state, zip_code):\n        self.street = street\n        self.city = city\n        self.state = state\n        self.zip_code = zip_code\nclass Company(DictMixin):\n    def __init__(self, name, address):\n        self.name = name\n        self.address = address",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "Company",
        "kind": 6,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "class Company(DictMixin):\n    def __init__(self, name, address):\n        self.name = name\n        self.address = address\naddress = Address(\"123 Main St\", \"Anytown\", \"CA\", \"12345\")\njohn_doe = Person(\"John Doe\", 30, address)\njohn_doe_dict = john_doe.to_dict()\nassert john_doe_dict == {\n    \"name\": \"John Doe\",\n    \"age\": 30,",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "address",
        "kind": 5,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "address = Address(\"123 Main St\", \"Anytown\", \"CA\", \"12345\")\njohn_doe = Person(\"John Doe\", 30, address)\njohn_doe_dict = john_doe.to_dict()\nassert john_doe_dict == {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"address\": {\"street\": \"123 Main St\", \"city\": \"Anytown\", \"state\": \"CA\", \"zip_code\": \"12345\"},\n}\naddress = Address(\"123 Main St\", \"Albuquerque\", \"NM\", \"987654\")\nassert address.to_dict() == {\"street\": \"123 Main St\", \"city\": \"Albuquerque\", \"state\": \"NM\", \"zip_code\": \"987654\"}",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "john_doe",
        "kind": 5,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "john_doe = Person(\"John Doe\", 30, address)\njohn_doe_dict = john_doe.to_dict()\nassert john_doe_dict == {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"address\": {\"street\": \"123 Main St\", \"city\": \"Anytown\", \"state\": \"CA\", \"zip_code\": \"12345\"},\n}\naddress = Address(\"123 Main St\", \"Albuquerque\", \"NM\", \"987654\")\nassert address.to_dict() == {\"street\": \"123 Main St\", \"city\": \"Albuquerque\", \"state\": \"NM\", \"zip_code\": \"987654\"}\nwalter = Person(\"Walter White\", 30, address)",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "john_doe_dict",
        "kind": 5,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "john_doe_dict = john_doe.to_dict()\nassert john_doe_dict == {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"address\": {\"street\": \"123 Main St\", \"city\": \"Anytown\", \"state\": \"CA\", \"zip_code\": \"12345\"},\n}\naddress = Address(\"123 Main St\", \"Albuquerque\", \"NM\", \"987654\")\nassert address.to_dict() == {\"street\": \"123 Main St\", \"city\": \"Albuquerque\", \"state\": \"NM\", \"zip_code\": \"987654\"}\nwalter = Person(\"Walter White\", 30, address)\nassert walter.to_dict() == {",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "address",
        "kind": 5,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "address = Address(\"123 Main St\", \"Albuquerque\", \"NM\", \"987654\")\nassert address.to_dict() == {\"street\": \"123 Main St\", \"city\": \"Albuquerque\", \"state\": \"NM\", \"zip_code\": \"987654\"}\nwalter = Person(\"Walter White\", 30, address)\nassert walter.to_dict() == {\n    \"address\": {\"city\": \"Albuquerque\", \"state\": \"NM\", \"street\": \"123 Main St\", \"zip_code\": \"987654\"},\n    \"age\": 30,\n    \"name\": \"Walter White\",\n}\nwalter_phone = Phone(\"555-1234\")\nwalter.phone = walter_phone",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "walter",
        "kind": 5,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "walter = Person(\"Walter White\", 30, address)\nassert walter.to_dict() == {\n    \"address\": {\"city\": \"Albuquerque\", \"state\": \"NM\", \"street\": \"123 Main St\", \"zip_code\": \"987654\"},\n    \"age\": 30,\n    \"name\": \"Walter White\",\n}\nwalter_phone = Phone(\"555-1234\")\nwalter.phone = walter_phone\nassert walter.to_dict() == {\n    \"address\": {\"city\": \"Albuquerque\", \"state\": \"NM\", \"street\": \"123 Main St\", \"zip_code\": \"987654\"},",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "walter_phone",
        "kind": 5,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "walter_phone = Phone(\"555-1234\")\nwalter.phone = walter_phone\nassert walter.to_dict() == {\n    \"address\": {\"city\": \"Albuquerque\", \"state\": \"NM\", \"street\": \"123 Main St\", \"zip_code\": \"987654\"},\n    \"age\": 30,\n    \"name\": \"Walter White\",\n    \"phone\": {\"number\": \"555-1234\"},\n}\ncompany_address = Address(\"3828 Piermont Dr\", \"Albuquerque\", \"NM\", \"12345\")\ncompany = Company(\"SCHOOL\", company_address)",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "walter.phone",
        "kind": 5,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "walter.phone = walter_phone\nassert walter.to_dict() == {\n    \"address\": {\"city\": \"Albuquerque\", \"state\": \"NM\", \"street\": \"123 Main St\", \"zip_code\": \"987654\"},\n    \"age\": 30,\n    \"name\": \"Walter White\",\n    \"phone\": {\"number\": \"555-1234\"},\n}\ncompany_address = Address(\"3828 Piermont Dr\", \"Albuquerque\", \"NM\", \"12345\")\ncompany = Company(\"SCHOOL\", company_address)\nassert company.to_dict() == {",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "company_address",
        "kind": 5,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "company_address = Address(\"3828 Piermont Dr\", \"Albuquerque\", \"NM\", \"12345\")\ncompany = Company(\"SCHOOL\", company_address)\nassert company.to_dict() == {\n    \"address\": {\"city\": \"Albuquerque\", \"state\": \"NM\", \"street\": \"3828 Piermont Dr\", \"zip_code\": \"12345\"},\n    \"name\": \"SCHOOL\",\n}\njesse_address = Address(\"456 Oak St\", \"Albuquerque\", \"NM\", \"12345\")\njesse = Person(\"Jesse Bruce Pinkman\", 27, jesse_address)\njesse.phone = Phone(\"555-5678\")\nfring = Person(\"Gustavo Fring\", 55, Address(\"Los Pollos Hermanos\", \"Albuquerque\", \"NM\", \"12345\"))",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "company",
        "kind": 5,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "company = Company(\"SCHOOL\", company_address)\nassert company.to_dict() == {\n    \"address\": {\"city\": \"Albuquerque\", \"state\": \"NM\", \"street\": \"3828 Piermont Dr\", \"zip_code\": \"12345\"},\n    \"name\": \"SCHOOL\",\n}\njesse_address = Address(\"456 Oak St\", \"Albuquerque\", \"NM\", \"12345\")\njesse = Person(\"Jesse Bruce Pinkman\", 27, jesse_address)\njesse.phone = Phone(\"555-5678\")\nfring = Person(\"Gustavo Fring\", 55, Address(\"Los Pollos Hermanos\", \"Albuquerque\", \"NM\", \"12345\"))\nfring.friends = [walter, jesse]",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "jesse_address",
        "kind": 5,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "jesse_address = Address(\"456 Oak St\", \"Albuquerque\", \"NM\", \"12345\")\njesse = Person(\"Jesse Bruce Pinkman\", 27, jesse_address)\njesse.phone = Phone(\"555-5678\")\nfring = Person(\"Gustavo Fring\", 55, Address(\"Los Pollos Hermanos\", \"Albuquerque\", \"NM\", \"12345\"))\nfring.friends = [walter, jesse]\nassert fring.to_dict() == {\n    \"address\": {\"city\": \"Albuquerque\", \"state\": \"NM\", \"street\": \"Los Pollos Hermanos\", \"zip_code\": \"12345\"},\n    \"age\": 55,\n    \"friends\": [\n        {",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "jesse",
        "kind": 5,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "jesse = Person(\"Jesse Bruce Pinkman\", 27, jesse_address)\njesse.phone = Phone(\"555-5678\")\nfring = Person(\"Gustavo Fring\", 55, Address(\"Los Pollos Hermanos\", \"Albuquerque\", \"NM\", \"12345\"))\nfring.friends = [walter, jesse]\nassert fring.to_dict() == {\n    \"address\": {\"city\": \"Albuquerque\", \"state\": \"NM\", \"street\": \"Los Pollos Hermanos\", \"zip_code\": \"12345\"},\n    \"age\": 55,\n    \"friends\": [\n        {\n            \"address\": {\"city\": \"Albuquerque\", \"state\": \"NM\", \"street\": \"123 Main St\", \"zip_code\": \"987654\"},",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "jesse.phone",
        "kind": 5,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "jesse.phone = Phone(\"555-5678\")\nfring = Person(\"Gustavo Fring\", 55, Address(\"Los Pollos Hermanos\", \"Albuquerque\", \"NM\", \"12345\"))\nfring.friends = [walter, jesse]\nassert fring.to_dict() == {\n    \"address\": {\"city\": \"Albuquerque\", \"state\": \"NM\", \"street\": \"Los Pollos Hermanos\", \"zip_code\": \"12345\"},\n    \"age\": 55,\n    \"friends\": [\n        {\n            \"address\": {\"city\": \"Albuquerque\", \"state\": \"NM\", \"street\": \"123 Main St\", \"zip_code\": \"987654\"},\n            \"age\": 30,",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "fring",
        "kind": 5,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "fring = Person(\"Gustavo Fring\", 55, Address(\"Los Pollos Hermanos\", \"Albuquerque\", \"NM\", \"12345\"))\nfring.friends = [walter, jesse]\nassert fring.to_dict() == {\n    \"address\": {\"city\": \"Albuquerque\", \"state\": \"NM\", \"street\": \"Los Pollos Hermanos\", \"zip_code\": \"12345\"},\n    \"age\": 55,\n    \"friends\": [\n        {\n            \"address\": {\"city\": \"Albuquerque\", \"state\": \"NM\", \"street\": \"123 Main St\", \"zip_code\": \"987654\"},\n            \"age\": 30,\n            \"name\": \"Walter White\",",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "fring.friends",
        "kind": 5,
        "importPath": "oop48",
        "description": "oop48",
        "peekOfCode": "fring.friends = [walter, jesse]\nassert fring.to_dict() == {\n    \"address\": {\"city\": \"Albuquerque\", \"state\": \"NM\", \"street\": \"Los Pollos Hermanos\", \"zip_code\": \"12345\"},\n    \"age\": 55,\n    \"friends\": [\n        {\n            \"address\": {\"city\": \"Albuquerque\", \"state\": \"NM\", \"street\": \"123 Main St\", \"zip_code\": \"987654\"},\n            \"age\": 30,\n            \"name\": \"Walter White\",\n            \"phone\": {\"number\": \"555-1234\"},",
        "detail": "oop48",
        "documentation": {}
    },
    {
        "label": "RangeValidator",
        "kind": 6,
        "importPath": "oop51",
        "description": "oop51",
        "peekOfCode": "class RangeValidator:\n    def __init__(self, start, end):\n        if not isinstance(start, (float, int)) or not isinstance(end, (float, int)):\n            raise TypeError(\"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö\")\n        self.start = start\n        self.end = end\n    def __set__(self, instance, value):\n        if not isinstance(value, (float, int)):\n            raise TypeError(\"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö\")\n        if self.start <= value <= self.end:",
        "detail": "oop51",
        "documentation": {}
    },
    {
        "label": "Temperature",
        "kind": 6,
        "importPath": "oop51",
        "description": "oop51",
        "peekOfCode": "class Temperature:\n    celsius = RangeValidator(-273.15, 1000)\ntemp = Temperature()\ntry:\n    temp.celsius = [1, 2]\nexcept TypeError as ex:\n    print(ex)\nclass Temperature:\n    celsius = RangeValidator(-273.15, 1000)\ntemp = Temperature()",
        "detail": "oop51",
        "documentation": {}
    },
    {
        "label": "Temperature",
        "kind": 6,
        "importPath": "oop51",
        "description": "oop51",
        "peekOfCode": "class Temperature:\n    celsius = RangeValidator(-273.15, 1000)\ntemp = Temperature()\ntry:\n    temp.celsius = -300\nexcept ValueError as ex:\n    print(ex)\nclass Temperature:\n    celsius = RangeValidator(-273.15, 1000)\n    kelvin = RangeValidator(0, 273)",
        "detail": "oop51",
        "documentation": {}
    },
    {
        "label": "Temperature",
        "kind": 6,
        "importPath": "oop51",
        "description": "oop51",
        "peekOfCode": "class Temperature:\n    celsius = RangeValidator(-273.15, 1000)\n    kelvin = RangeValidator(0, 273)\ntemp = Temperature()\ntry:\n    temp.celsius = -300\nexcept ValueError as ex:\n    print(ex)\ntry:\n    temp.kelvin = 500",
        "detail": "oop51",
        "documentation": {}
    },
    {
        "label": "temp",
        "kind": 5,
        "importPath": "oop51",
        "description": "oop51",
        "peekOfCode": "temp = Temperature()\ntry:\n    temp.celsius = [1, 2]\nexcept TypeError as ex:\n    print(ex)\nclass Temperature:\n    celsius = RangeValidator(-273.15, 1000)\ntemp = Temperature()\ntry:\n    temp.celsius = -300",
        "detail": "oop51",
        "documentation": {}
    },
    {
        "label": "temp",
        "kind": 5,
        "importPath": "oop51",
        "description": "oop51",
        "peekOfCode": "temp = Temperature()\ntry:\n    temp.celsius = -300\nexcept ValueError as ex:\n    print(ex)\nclass Temperature:\n    celsius = RangeValidator(-273.15, 1000)\n    kelvin = RangeValidator(0, 273)\ntemp = Temperature()\ntry:",
        "detail": "oop51",
        "documentation": {}
    },
    {
        "label": "temp",
        "kind": 5,
        "importPath": "oop51",
        "description": "oop51",
        "peekOfCode": "temp = Temperature()\ntry:\n    temp.celsius = -300\nexcept ValueError as ex:\n    print(ex)\ntry:\n    temp.kelvin = 500\nexcept ValueError as ex:\n    print(ex)\n# class MaxLengthAttribute:",
        "detail": "oop51",
        "documentation": {}
    },
    {
        "label": "CustomButton",
        "kind": 6,
        "importPath": "oop63",
        "description": "oop63",
        "peekOfCode": "class CustomButton:\n    def __init__(self, text, **kwargs) -> None:\n        self.text = text\n        self.config(**kwargs)\n    def config(self, **kwargs):\n        self.__dict__.update(kwargs)\n    def click(self):\n        try:\n            self.command()\n        except AttributeError:",
        "detail": "oop63",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "oop63",
        "description": "oop63",
        "peekOfCode": "def func():\n    print(\"–û–Ω–æ –∂–∏–≤–æ–µ\")\nbtn = CustomButton(text=\"Hello\", bd=20, bg=\"#ffaaaa\")\nbtn.click()  # –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞\nbtn.config(command=func)\nbtn.click()  # –û–Ω–æ –∂–∏–≤–æ–µ",
        "detail": "oop63",
        "documentation": {}
    },
    {
        "label": "btn",
        "kind": 5,
        "importPath": "oop63",
        "description": "oop63",
        "peekOfCode": "btn = CustomButton(text=\"Hello\", bd=20, bg=\"#ffaaaa\")\nbtn.click()  # –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞\nbtn.config(command=func)\nbtn.click()  # –û–Ω–æ –∂–∏–≤–æ–µ",
        "detail": "oop63",
        "documentation": {}
    },
    {
        "label": "sum_numbers",
        "kind": 2,
        "importPath": "oop64",
        "description": "oop64",
        "peekOfCode": "def sum_numbers(numbers):\n    if not isinstance(numbers, list):\n        raise TypeError(\"–ê—Ä–≥—É–º–µ–Ω—Ç numbers –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º\")\n    if len(numbers) == 0:\n        raise ValueError(\"–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫\")\n    try:\n        return sum(numbers)\n    except:\n        raise TypeError(\"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞\")\n# –ù–∏–∂–µ –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏–∏ sum_numbers",
        "detail": "oop64",
        "documentation": {}
    },
    {
        "label": "PasswordInvalidError",
        "kind": 6,
        "importPath": "oop65",
        "description": "oop65",
        "peekOfCode": "class PasswordInvalidError(Exception):\n    pass\nclass PasswordLengthError(PasswordInvalidError):\n    pass\nclass PasswordContainUpperError(PasswordInvalidError):\n    pass\nclass PasswordContainDigitError(PasswordInvalidError):\n    pass\nclass User:\n    def __init__(self, username) -> None:",
        "detail": "oop65",
        "documentation": {}
    },
    {
        "label": "PasswordLengthError",
        "kind": 6,
        "importPath": "oop65",
        "description": "oop65",
        "peekOfCode": "class PasswordLengthError(PasswordInvalidError):\n    pass\nclass PasswordContainUpperError(PasswordInvalidError):\n    pass\nclass PasswordContainDigitError(PasswordInvalidError):\n    pass\nclass User:\n    def __init__(self, username) -> None:\n        self.username = username\n        self.password = None",
        "detail": "oop65",
        "documentation": {}
    },
    {
        "label": "PasswordContainUpperError",
        "kind": 6,
        "importPath": "oop65",
        "description": "oop65",
        "peekOfCode": "class PasswordContainUpperError(PasswordInvalidError):\n    pass\nclass PasswordContainDigitError(PasswordInvalidError):\n    pass\nclass User:\n    def __init__(self, username) -> None:\n        self.username = username\n        self.password = None\n    def set_password(self, _value: str):\n        if len(_value) < 8:",
        "detail": "oop65",
        "documentation": {}
    },
    {
        "label": "PasswordContainDigitError",
        "kind": 6,
        "importPath": "oop65",
        "description": "oop65",
        "peekOfCode": "class PasswordContainDigitError(PasswordInvalidError):\n    pass\nclass User:\n    def __init__(self, username) -> None:\n        self.username = username\n        self.password = None\n    def set_password(self, _value: str):\n        if len(_value) < 8:\n            raise PasswordLengthError(\"–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤\")\n        dig = False",
        "detail": "oop65",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "oop65",
        "description": "oop65",
        "peekOfCode": "class User:\n    def __init__(self, username) -> None:\n        self.username = username\n        self.password = None\n    def set_password(self, _value: str):\n        if len(_value) < 8:\n            raise PasswordLengthError(\"–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤\")\n        dig = False\n        for i in set(_value):\n            dig = dig or i.isupper()",
        "detail": "oop65",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "oop65",
        "description": "oop65",
        "peekOfCode": "user = User(\"johndoe\")\ntry:\n    user.set_password(\"weakpwd\")\nexcept PasswordLengthError as e:\n    print(e)\ntry:\n    user.set_password(\"strongpassword8\")\nexcept PasswordContainUpperError as e:\n    print(e)\ntry:",
        "detail": "oop65",
        "documentation": {}
    },
    {
        "label": "Promo",
        "kind": 6,
        "importPath": "oop73",
        "description": "oop73",
        "peekOfCode": "class Promo:\n    name: str\n    discount: float\n    prod: list = field(default_factory=list)\n@dataclass(order=True)\nclass Product:\n    name: str\n    price: float = field(repr=False)\nclass Cart:\n    def __init__(self):",
        "detail": "oop73",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "oop73",
        "description": "oop73",
        "peekOfCode": "class Product:\n    name: str\n    price: float = field(repr=False)\nclass Cart:\n    def __init__(self):\n        self.goods = []\n        self.discount = 0\n    def add_product(self, other, amt=1):\n        for prod in range(len(self.goods)):\n            if self.goods[prod][0].name == other.name:",
        "detail": "oop73",
        "documentation": {}
    },
    {
        "label": "Cart",
        "kind": 6,
        "importPath": "oop73",
        "description": "oop73",
        "peekOfCode": "class Cart:\n    def __init__(self):\n        self.goods = []\n        self.discount = 0\n    def add_product(self, other, amt=1):\n        for prod in range(len(self.goods)):\n            if self.goods[prod][0].name == other.name:\n                self.goods[prod][1] += amt\n                break\n        else:",
        "detail": "oop73",
        "documentation": {}
    },
    {
        "label": "book",
        "kind": 5,
        "importPath": "oop73",
        "description": "oop73",
        "peekOfCode": "book = Product(\"–ö–Ω–∏–≥–∞\", 100.0)\nusb = Product(\"–§–ª–µ—à–∫–∞\", 50.0)\npen = Product(\"–†—É—á–∫–∞\", 10.0)\nACTIVE_PROMO = [\n    Promo(\"new\", 20, [pen]),\n    Promo(\"all_goods\", 30),\n    Promo(\"sale\", 50, [book, usb]),\n]\ncart = Cart()\ncart.add_product(book, 10)",
        "detail": "oop73",
        "documentation": {}
    },
    {
        "label": "usb",
        "kind": 5,
        "importPath": "oop73",
        "description": "oop73",
        "peekOfCode": "usb = Product(\"–§–ª–µ—à–∫–∞\", 50.0)\npen = Product(\"–†—É—á–∫–∞\", 10.0)\nACTIVE_PROMO = [\n    Promo(\"new\", 20, [pen]),\n    Promo(\"all_goods\", 30),\n    Promo(\"sale\", 50, [book, usb]),\n]\ncart = Cart()\ncart.add_product(book, 10)\ncart.add_product(pen)",
        "detail": "oop73",
        "documentation": {}
    },
    {
        "label": "pen",
        "kind": 5,
        "importPath": "oop73",
        "description": "oop73",
        "peekOfCode": "pen = Product(\"–†—É—á–∫–∞\", 10.0)\nACTIVE_PROMO = [\n    Promo(\"new\", 20, [pen]),\n    Promo(\"all_goods\", 30),\n    Promo(\"sale\", 50, [book, usb]),\n]\ncart = Cart()\ncart.add_product(book, 10)\ncart.add_product(pen)\ncart.add_product(book, 5)",
        "detail": "oop73",
        "documentation": {}
    },
    {
        "label": "ACTIVE_PROMO",
        "kind": 5,
        "importPath": "oop73",
        "description": "oop73",
        "peekOfCode": "ACTIVE_PROMO = [\n    Promo(\"new\", 20, [pen]),\n    Promo(\"all_goods\", 30),\n    Promo(\"sale\", 50, [book, usb]),\n]\ncart = Cart()\ncart.add_product(book, 10)\ncart.add_product(pen)\ncart.add_product(book, 5)\ncart.add_product(usb, 5)",
        "detail": "oop73",
        "documentation": {}
    },
    {
        "label": "cart",
        "kind": 5,
        "importPath": "oop73",
        "description": "oop73",
        "peekOfCode": "cart = Cart()\ncart.add_product(book, 10)\ncart.add_product(pen)\ncart.add_product(book, 5)\ncart.add_product(usb, 5)\ncart.add_product(usb, 15)\ncart.add_product(pen, 2)\nprint(cart.get_total())\n# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ 50% –Ω–∞ –∫–Ω–∏–≥–∏ –∏ —Ñ–ª–µ—à–∫–∏\ncart.apply_promo(\"sale\")",
        "detail": "oop73",
        "documentation": {}
    },
    {
        "label": "Logger",
        "kind": 6,
        "importPath": "oop82",
        "description": "oop82",
        "peekOfCode": "class Logger:\n    pass\n@singleton\nclass AppConfig:\n    pass\n@singleton\nclass SMTPServerConfig:\n    pass\nlog = Logger()\napp_conf = AppConfig()",
        "detail": "oop82",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "kind": 6,
        "importPath": "oop82",
        "description": "oop82",
        "peekOfCode": "class AppConfig:\n    pass\n@singleton\nclass SMTPServerConfig:\n    pass\nlog = Logger()\napp_conf = AppConfig()\napp_conf_2 = AppConfig()\nsmtp_conf = SMTPServerConfig()\nassert log is Logger()",
        "detail": "oop82",
        "documentation": {}
    },
    {
        "label": "SMTPServerConfig",
        "kind": 6,
        "importPath": "oop82",
        "description": "oop82",
        "peekOfCode": "class SMTPServerConfig:\n    pass\nlog = Logger()\napp_conf = AppConfig()\napp_conf_2 = AppConfig()\nsmtp_conf = SMTPServerConfig()\nassert log is Logger()\nassert app_conf is app_conf_2\nassert smtp_conf is SMTPServerConfig()\nassert log is not app_conf",
        "detail": "oop82",
        "documentation": {}
    },
    {
        "label": "singleton",
        "kind": 2,
        "importPath": "oop82",
        "description": "oop82",
        "peekOfCode": "def singleton(cls):\n    class NewCls:\n        instance = None\n        def __new__(*args, **kwargs):\n            if not NewCls.instance:\n                NewCls.instance = cls()\n            return NewCls.instance\n    return NewCls\n@singleton\nclass Logger:",
        "detail": "oop82",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "oop82",
        "description": "oop82",
        "peekOfCode": "log = Logger()\napp_conf = AppConfig()\napp_conf_2 = AppConfig()\nsmtp_conf = SMTPServerConfig()\nassert log is Logger()\nassert app_conf is app_conf_2\nassert smtp_conf is SMTPServerConfig()\nassert log is not app_conf\nassert log is not smtp_conf\nassert app_conf is not smtp_conf",
        "detail": "oop82",
        "documentation": {}
    },
    {
        "label": "app_conf",
        "kind": 5,
        "importPath": "oop82",
        "description": "oop82",
        "peekOfCode": "app_conf = AppConfig()\napp_conf_2 = AppConfig()\nsmtp_conf = SMTPServerConfig()\nassert log is Logger()\nassert app_conf is app_conf_2\nassert smtp_conf is SMTPServerConfig()\nassert log is not app_conf\nassert log is not smtp_conf\nassert app_conf is not smtp_conf\nprint(\"Good\")",
        "detail": "oop82",
        "documentation": {}
    },
    {
        "label": "app_conf_2",
        "kind": 5,
        "importPath": "oop82",
        "description": "oop82",
        "peekOfCode": "app_conf_2 = AppConfig()\nsmtp_conf = SMTPServerConfig()\nassert log is Logger()\nassert app_conf is app_conf_2\nassert smtp_conf is SMTPServerConfig()\nassert log is not app_conf\nassert log is not smtp_conf\nassert app_conf is not smtp_conf\nprint(\"Good\")\n# class Logger:",
        "detail": "oop82",
        "documentation": {}
    },
    {
        "label": "smtp_conf",
        "kind": 5,
        "importPath": "oop82",
        "description": "oop82",
        "peekOfCode": "smtp_conf = SMTPServerConfig()\nassert log is Logger()\nassert app_conf is app_conf_2\nassert smtp_conf is SMTPServerConfig()\nassert log is not app_conf\nassert log is not smtp_conf\nassert app_conf is not smtp_conf\nprint(\"Good\")\n# class Logger:\n#     log_level = \"\"",
        "detail": "oop82",
        "documentation": {}
    },
    {
        "label": "DatabaseModelMeta",
        "kind": 6,
        "importPath": "oop84",
        "description": "oop84",
        "peekOfCode": "class DatabaseModelMeta(type):\n    def __new__(cls, name, bases, dct):\n        cls_obj = super().__new__(cls, name, bases, dct)\n        cls_obj.ordering = True\n        cls_obj.default_value = None\n        return cls_obj\nclass DatabaseModel(metaclass=DatabaseModelMeta):\n    pass\nclass User(DatabaseModel):\n    pass",
        "detail": "oop84",
        "documentation": {}
    },
    {
        "label": "DatabaseModel",
        "kind": 6,
        "importPath": "oop84",
        "description": "oop84",
        "peekOfCode": "class DatabaseModel(metaclass=DatabaseModelMeta):\n    pass\nclass User(DatabaseModel):\n    pass\nclass Product(DatabaseModel):\n    pass\nuser = User()\nproduct = Product()\nprint(user.ordering, product.ordering)\nuser.ordering = False",
        "detail": "oop84",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "oop84",
        "description": "oop84",
        "peekOfCode": "class User(DatabaseModel):\n    pass\nclass Product(DatabaseModel):\n    pass\nuser = User()\nproduct = Product()\nprint(user.ordering, product.ordering)\nuser.ordering = False\nprint(user.ordering, product.ordering)",
        "detail": "oop84",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "oop84",
        "description": "oop84",
        "peekOfCode": "class Product(DatabaseModel):\n    pass\nuser = User()\nproduct = Product()\nprint(user.ordering, product.ordering)\nuser.ordering = False\nprint(user.ordering, product.ordering)",
        "detail": "oop84",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "oop84",
        "description": "oop84",
        "peekOfCode": "user = User()\nproduct = Product()\nprint(user.ordering, product.ordering)\nuser.ordering = False\nprint(user.ordering, product.ordering)",
        "detail": "oop84",
        "documentation": {}
    },
    {
        "label": "product",
        "kind": 5,
        "importPath": "oop84",
        "description": "oop84",
        "peekOfCode": "product = Product()\nprint(user.ordering, product.ordering)\nuser.ordering = False\nprint(user.ordering, product.ordering)",
        "detail": "oop84",
        "documentation": {}
    },
    {
        "label": "user.ordering",
        "kind": 5,
        "importPath": "oop84",
        "description": "oop84",
        "peekOfCode": "user.ordering = False\nprint(user.ordering, product.ordering)",
        "detail": "oop84",
        "documentation": {}
    },
    {
        "label": "objects",
        "kind": 5,
        "importPath": "op12",
        "description": "op12",
        "peekOfCode": "objects = [1, 2, 1, 5, True, False, True, 'false', [], [1,2], [1,2]]\ntmp=set()\nfor obj in objects:\n    tmp.add(id(obj))\nprint(len(tmp))\nprint(len(set(map(id,objects))))\n# x = [1, 2, 3]\n# y = x\n# y.append(4)\n# s = \"123\"",
        "detail": "op12",
        "documentation": {}
    },
    {
        "label": "countCombine",
        "kind": 2,
        "importPath": "op13",
        "description": "op13",
        "peekOfCode": "def countCombine(n,k):\n    if k==0:\n        return 1\n    if k>n:\n        return 0\n    return countCombine(n-1,k)+countCombine(n-1,k-1)\nn,k=map(int,input().split())\nprint (countCombine(n,k))\n# def s(a, *vs, b=10):\n#    res = a + b",
        "detail": "op13",
        "documentation": {}
    },
    {
        "label": "Fraction",
        "kind": 6,
        "importPath": "Other",
        "description": "Other",
        "peekOfCode": "class Fraction:\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n    def __add__(self, other):\n        new_numerator = (\n            self.numerator * other.denominator + other.numerator * self.denominator\n        )\n        new_denominator = self.denominator * other.denominator\n        return Fraction(new_numerator, new_denominator)",
        "detail": "Other",
        "documentation": {}
    },
    {
        "label": "frac1",
        "kind": 5,
        "importPath": "Other",
        "description": "Other",
        "peekOfCode": "frac1 = Fraction(1, 2)\nfrac2 = Fraction(3, 4)\n# –ü—Ä–∏–º–µ—Ä —Å–ª–æ–∂–µ–Ω–∏—è –¥—Ä–æ–±–µ–π\nresult = frac1 + frac2\nprint(result != Fraction(5, 4))  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: True\n# –ü—Ä–∏–º–µ—Ä –≤—ã—á–∏—Ç–∞–Ω–∏—è –¥—Ä–æ–±–µ–π\nresult = frac1 - frac2\nprint(result != Fraction(-1, 4))  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: True\n# –ü—Ä–∏–º–µ—Ä —É–º–Ω–æ–∂–µ–Ω–∏—è –¥—Ä–æ–±–µ–π\nresult = frac1 * frac2",
        "detail": "Other",
        "documentation": {}
    },
    {
        "label": "frac2",
        "kind": 5,
        "importPath": "Other",
        "description": "Other",
        "peekOfCode": "frac2 = Fraction(3, 4)\n# –ü—Ä–∏–º–µ—Ä —Å–ª–æ–∂–µ–Ω–∏—è –¥—Ä–æ–±–µ–π\nresult = frac1 + frac2\nprint(result != Fraction(5, 4))  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: True\n# –ü—Ä–∏–º–µ—Ä –≤—ã—á–∏—Ç–∞–Ω–∏—è –¥—Ä–æ–±–µ–π\nresult = frac1 - frac2\nprint(result != Fraction(-1, 4))  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: True\n# –ü—Ä–∏–º–µ—Ä —É–º–Ω–æ–∂–µ–Ω–∏—è –¥—Ä–æ–±–µ–π\nresult = frac1 * frac2\nprint(result == Fraction(3, 8))  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: True",
        "detail": "Other",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Other",
        "description": "Other",
        "peekOfCode": "result = frac1 + frac2\nprint(result != Fraction(5, 4))  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: True\n# –ü—Ä–∏–º–µ—Ä –≤—ã—á–∏—Ç–∞–Ω–∏—è –¥—Ä–æ–±–µ–π\nresult = frac1 - frac2\nprint(result != Fraction(-1, 4))  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: True\n# –ü—Ä–∏–º–µ—Ä —É–º–Ω–æ–∂–µ–Ω–∏—è –¥—Ä–æ–±–µ–π\nresult = frac1 * frac2\nprint(result == Fraction(3, 8))  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: True\n# –ü—Ä–∏–º–µ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥—Ä–æ–±–µ–π\nresult = frac1 == frac2",
        "detail": "Other",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Other",
        "description": "Other",
        "peekOfCode": "result = frac1 - frac2\nprint(result != Fraction(-1, 4))  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: True\n# –ü—Ä–∏–º–µ—Ä —É–º–Ω–æ–∂–µ–Ω–∏—è –¥—Ä–æ–±–µ–π\nresult = frac1 * frac2\nprint(result == Fraction(3, 8))  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: True\n# –ü—Ä–∏–º–µ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥—Ä–æ–±–µ–π\nresult = frac1 == frac2\nprint(result)  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: False",
        "detail": "Other",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Other",
        "description": "Other",
        "peekOfCode": "result = frac1 * frac2\nprint(result == Fraction(3, 8))  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: True\n# –ü—Ä–∏–º–µ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥—Ä–æ–±–µ–π\nresult = frac1 == frac2\nprint(result)  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: False",
        "detail": "Other",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Other",
        "description": "Other",
        "peekOfCode": "result = frac1 == frac2\nprint(result)  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: False",
        "detail": "Other",
        "documentation": {}
    },
    {
        "label": "my_range_gen",
        "kind": 2,
        "importPath": "p101",
        "description": "p101",
        "peekOfCode": "def my_range_gen(*args):\n    if len(args) == 1:\n        i = 0\n        while i < args[0]:\n            yield i\n            i += 1\n    elif len(args) == 2:\n        i = args[0]\n        while args[1] - i != 0:\n            yield i",
        "detail": "p101",
        "documentation": {}
    },
    {
        "label": "week",
        "kind": 5,
        "importPath": "p101",
        "description": "p101",
        "peekOfCode": "week = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\ndays = ((d, week[(d + 4) % 7]) for d in range(1, 78))\nfor _ in range(77):\n    print(next(days))",
        "detail": "p101",
        "documentation": {}
    },
    {
        "label": "days",
        "kind": 5,
        "importPath": "p101",
        "description": "p101",
        "peekOfCode": "days = ((d, week[(d + 4) % 7]) for d in range(1, 78))\nfor _ in range(77):\n    print(next(days))",
        "detail": "p101",
        "documentation": {}
    },
    {
        "label": "persons",
        "kind": 5,
        "importPath": "p103",
        "description": "p103",
        "peekOfCode": "persons = [\n    {\n        'birthday': '1983-10-25',\n        'job': 'Field seismologist',\n        'name': 'Andrew Hernandez',\n        'phone': '680-436-8521x3468'\n    },\n    {\n        'birthday': '1993-10-03',\n        'job': 'Pathologist',",
        "detail": "p103",
        "documentation": {}
    },
    {
        "label": "employees",
        "kind": 5,
        "importPath": "p104",
        "description": "p104",
        "peekOfCode": "employees = [\n    \"Pankratiy\",\n    \"Innokentiy\",\n    \"Anfisa\",\n    \"Yaroslava\",\n    \"Veniamin\",\n    \"Leonti\",\n    \"Daniil\",\n    \"Mishka\",\n    \"Lidochka\",",
        "detail": "p104",
        "documentation": {}
    },
    {
        "label": "identifiers",
        "kind": 5,
        "importPath": "p104",
        "description": "p104",
        "peekOfCode": "identifiers = [77, 48, 88, 85, 76, 81, 62, 43, 5, 56, 17, 20, 37, 32, 96]\nemployees_data = {}\nemployees_data.update(zip(sorted(identifiers), sorted(employees)))\nprint(employees_data)",
        "detail": "p104",
        "documentation": {}
    },
    {
        "label": "employees_data",
        "kind": 5,
        "importPath": "p104",
        "description": "p104",
        "peekOfCode": "employees_data = {}\nemployees_data.update(zip(sorted(identifiers), sorted(employees)))\nprint(employees_data)",
        "detail": "p104",
        "documentation": {}
    },
    {
        "label": "zip_with_function",
        "kind": 2,
        "importPath": "p105",
        "description": "p105",
        "peekOfCode": "def zip_with_function(l,f):\n    return [f(*i) for i in list(zip(*l))]\ndef combine_strings(a: str, b: str) -> str:\n    return a + b\ndef get_sum_two_numbers(a: int, b: int) -> int:\n    return a + b\ndef get_sum_three_numbers(a: int, b: int, c: int) -> int:\n    return a + b + c\nassert zip_with_function([[1, 2, 4], [3, 5, 8]], get_sum_two_numbers) == [4, 7, 12]\nassert zip_with_function([[10, 20], [30, 0]], get_sum_two_numbers) == [40, 20]",
        "detail": "p105",
        "documentation": {}
    },
    {
        "label": "combine_strings",
        "kind": 2,
        "importPath": "p105",
        "description": "p105",
        "peekOfCode": "def combine_strings(a: str, b: str) -> str:\n    return a + b\ndef get_sum_two_numbers(a: int, b: int) -> int:\n    return a + b\ndef get_sum_three_numbers(a: int, b: int, c: int) -> int:\n    return a + b + c\nassert zip_with_function([[1, 2, 4], [3, 5, 8]], get_sum_two_numbers) == [4, 7, 12]\nassert zip_with_function([[10, 20], [30, 0]], get_sum_two_numbers) == [40, 20]\nassert zip_with_function([[2, 5, 8], [3, 4, 7], [5, 6, 5]], get_sum_three_numbers) == [10, 15, 20]\nassert zip_with_function([[1, 2, 3], [4, 5, 6], [7, 8, 9]], get_sum_three_numbers) == [12, 15, 18]",
        "detail": "p105",
        "documentation": {}
    },
    {
        "label": "get_sum_two_numbers",
        "kind": 2,
        "importPath": "p105",
        "description": "p105",
        "peekOfCode": "def get_sum_two_numbers(a: int, b: int) -> int:\n    return a + b\ndef get_sum_three_numbers(a: int, b: int, c: int) -> int:\n    return a + b + c\nassert zip_with_function([[1, 2, 4], [3, 5, 8]], get_sum_two_numbers) == [4, 7, 12]\nassert zip_with_function([[10, 20], [30, 0]], get_sum_two_numbers) == [40, 20]\nassert zip_with_function([[2, 5, 8], [3, 4, 7], [5, 6, 5]], get_sum_three_numbers) == [10, 15, 20]\nassert zip_with_function([[1, 2, 3], [4, 5, 6], [7, 8, 9]], get_sum_three_numbers) == [12, 15, 18]\nassert zip_with_function([[\"a\", \"b\"], [\"1\", \"2\"]], combine_strings) == ['a1', 'b2']",
        "detail": "p105",
        "documentation": {}
    },
    {
        "label": "get_sum_three_numbers",
        "kind": 2,
        "importPath": "p105",
        "description": "p105",
        "peekOfCode": "def get_sum_three_numbers(a: int, b: int, c: int) -> int:\n    return a + b + c\nassert zip_with_function([[1, 2, 4], [3, 5, 8]], get_sum_two_numbers) == [4, 7, 12]\nassert zip_with_function([[10, 20], [30, 0]], get_sum_two_numbers) == [40, 20]\nassert zip_with_function([[2, 5, 8], [3, 4, 7], [5, 6, 5]], get_sum_three_numbers) == [10, 15, 20]\nassert zip_with_function([[1, 2, 3], [4, 5, 6], [7, 8, 9]], get_sum_three_numbers) == [12, 15, 18]\nassert zip_with_function([[\"a\", \"b\"], [\"1\", \"2\"]], combine_strings) == ['a1', 'b2']",
        "detail": "p105",
        "documentation": {}
    },
    {
        "label": "find_keys",
        "kind": 2,
        "importPath": "p106",
        "description": "p106",
        "peekOfCode": "def find_keys(**kwargs):\n    return sorted([i for i in kwargs if isinstance(kwargs[i], (list,tuple))],key=str.lower)\n# def find_keys(**kwargs):\n#     s=[]\n#     for i in kwargs:\n#         if isinstance(kwargs[i], (list,tuple)): s.append(i)\n#     return sorted(s,key=str.lower)\nassert find_keys(t=[4, 5], W=[5, 3], A=(3, 2), a={2, 3}, b=[4]) == ['A', 'b', 't', 'W']\nassert find_keys(name='Bruce', surname='Wayne') == []\nassert find_keys(marks=[4, 5], name='ashle', surname='Brown', age=20, Also=(1, 2)) == ['Also', 'marks']",
        "detail": "p106",
        "documentation": {}
    },
    {
        "label": "purchases",
        "kind": 5,
        "importPath": "P2_18",
        "description": "P2_18",
        "peekOfCode": "purchases = [\n    (\"–ù–æ—É—Ç–±—É–∫\", 2, 1000),\n    (\"–ú—ã—à—å\", 5, 20),\n    (\"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞\", 3, 50),\n    (\"–ù–∞—É—à–Ω–∏–∫–∏\", 2, 150),\n    (\"–ú–æ–Ω–∏—Ç–æ—Ä\", 1, 300),\n    (\"–§–ª–µ—à–∫–∞\", 10, 15),\n    (\"–ü—Ä–∏–Ω—Ç–µ—Ä\", 1, 200),\n    (\"–†–æ—É—Ç–µ—Ä\", 1, 120),\n    (\"–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞\", 2, 70),",
        "detail": "P2_18",
        "documentation": {}
    },
    {
        "label": "magM",
        "kind": 5,
        "importPath": "P3",
        "description": "P3",
        "peekOfCode": "magM = [0, 0]\nwith open(\"files.txt\", \"rb\") as f:\n    data = json.load(f)\n    for i in data.items():\n        if i[0] == \"features\":\n            for j in range(len(i[1])):\n                if i[1][j][\"properties\"][\"mag\"] > magM[0]:\n                    magM[0] = i[1][j][\"properties\"][\"mag\"]\n                    magM[1] = i[1][j][\"properties\"][\"place\"]\nprint(magM[1])",
        "detail": "P3",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "P3_24",
        "description": "P3_24",
        "peekOfCode": "f = open(\"test1.txt\", \"w\")\nf.close\nos.chdir(r\"..\")\nos.mkdir(\"second\")\nos.chdir(\"second\")\nf = open(\"test2.txt\", \"w\")\nf.close\nos.chdir(r\"..\")\ncat = {}\nfor root, directories, files in os.walk(r\"./\"):",
        "detail": "P3_24",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "P3_24",
        "description": "P3_24",
        "peekOfCode": "f = open(\"test2.txt\", \"w\")\nf.close\nos.chdir(r\"..\")\ncat = {}\nfor root, directories, files in os.walk(r\"./\"):\n    print(f\"{root}{\"/\" if root!=str(r\"./\") else \"\"}\")\n    for file in files:\n        print(file)",
        "detail": "P3_24",
        "documentation": {}
    },
    {
        "label": "cat",
        "kind": 5,
        "importPath": "P3_24",
        "description": "P3_24",
        "peekOfCode": "cat = {}\nfor root, directories, files in os.walk(r\"./\"):\n    print(f\"{root}{\"/\" if root!=str(r\"./\") else \"\"}\")\n    for file in files:\n        print(file)",
        "detail": "P3_24",
        "documentation": {}
    },
    {
        "label": "url_games",
        "kind": 5,
        "importPath": "P3_31",
        "description": "P3_31",
        "peekOfCode": "url_games = \"https://soccer365.ru/competitions/12/results/\"\nr = requests.get(url_games)\nprint(r.status_code)\nprint(r.headers[\"content-type\"])\nprint(r.encoding)\nprint(r.text[:5000])",
        "detail": "P3_31",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "P3_31",
        "description": "P3_31",
        "peekOfCode": "r = requests.get(url_games)\nprint(r.status_code)\nprint(r.headers[\"content-type\"])\nprint(r.encoding)\nprint(r.text[:5000])",
        "detail": "P3_31",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "P3_32",
        "description": "P3_32",
        "peekOfCode": "test = \"–î–æ–ø–æ–ª–Ω–∏—Ç–µ –æ–±—Ä–∞–∑–µ—Ü —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ color –∏ colour –∏—Å–ø–æ–ª—å–∑—É—è –≥—Ä—É–ø–ø—ã.\"\npattern = r\"colo.?r\"\nprint(test)\nprint(re.sub(pattern, \"+\", test))",
        "detail": "P3_32",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "P3_32",
        "description": "P3_32",
        "peekOfCode": "pattern = r\"colo.?r\"\nprint(test)\nprint(re.sub(pattern, \"+\", test))",
        "detail": "P3_32",
        "documentation": {}
    },
    {
        "label": "GeometricShape",
        "kind": 6,
        "importPath": "P4_13",
        "description": "P4_13",
        "peekOfCode": "class GeometricShape:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def area(self):\n        return self.width * self.height\n    def perimeter(self):\n        return 2 * (self.width + self.height)\n    @staticmethod\n    def is_rectangle(shape):",
        "detail": "P4_13",
        "documentation": {}
    },
    {
        "label": "rectangle1",
        "kind": 5,
        "importPath": "P4_13",
        "description": "P4_13",
        "peekOfCode": "rectangle1 = GeometricShape(5, 3)\nrectangle2 = GeometricShape(4, 4)\n# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä –ø–æ –ø–ª–æ—â–∞–¥–∏\nprint(\"Are they equal in area?\", rectangle1 == rectangle2)\n# –°–ª–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö —Ñ–∏–≥—É—Ä\nresulting_shape = rectangle1 + rectangle2\nprint(\"Resulting Shape:\", resulting_shape)\n# class Student:\n#     def __init__(self, name):\n#         self.name = name",
        "detail": "P4_13",
        "documentation": {}
    },
    {
        "label": "rectangle2",
        "kind": 5,
        "importPath": "P4_13",
        "description": "P4_13",
        "peekOfCode": "rectangle2 = GeometricShape(4, 4)\n# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä –ø–æ –ø–ª–æ—â–∞–¥–∏\nprint(\"Are they equal in area?\", rectangle1 == rectangle2)\n# –°–ª–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö —Ñ–∏–≥—É—Ä\nresulting_shape = rectangle1 + rectangle2\nprint(\"Resulting Shape:\", resulting_shape)\n# class Student:\n#     def __init__(self, name):\n#         self.name = name\n#     def greet(self):",
        "detail": "P4_13",
        "documentation": {}
    },
    {
        "label": "resulting_shape",
        "kind": 5,
        "importPath": "P4_13",
        "description": "P4_13",
        "peekOfCode": "resulting_shape = rectangle1 + rectangle2\nprint(\"Resulting Shape:\", resulting_shape)\n# class Student:\n#     def __init__(self, name):\n#         self.name = name\n#     def greet(self):\n#         return f\"{self.name} –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–∏–≤–µ—Ç\"\n# d = Student(\"–ò–≤–∞–Ω\")\n# print(d.greet())\n# input = [1, 2, 4, 1, 6, \"e\", 45, \"e\"]",
        "detail": "P4_13",
        "documentation": {}
    },
    {
        "label": "Juice",
        "kind": 6,
        "importPath": "P4_14",
        "description": "P4_14",
        "peekOfCode": "class Juice:\n    def __init__(self, name, capacity):\n        self.name = name\n        self.capacity = capacity\n    def __str__(self):\n        return f\"{self.name} ({self.capacity}L)\"\n    def __add__(self, other):\n        return Juice(f\"{self.name}&{other.name}\", self.capacity + other.capacity)\na = Juice(\"Orange\", 1.5)\nb = Juice(\"Apple\", 2.0)",
        "detail": "P4_14",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "P4_14",
        "description": "P4_14",
        "peekOfCode": "a = Juice(\"Orange\", 1.5)\nb = Juice(\"Apple\", 2.0)\nresult = a + b\nprint(result)\n# class Fraction:\n#     def __init__(self, numerator, denominator):\n#         self.numerator = numerator\n#         self.denominator = denominator\n#     @staticmethod\n#     def folding(numerator, denominator):",
        "detail": "P4_14",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "P4_14",
        "description": "P4_14",
        "peekOfCode": "b = Juice(\"Apple\", 2.0)\nresult = a + b\nprint(result)\n# class Fraction:\n#     def __init__(self, numerator, denominator):\n#         self.numerator = numerator\n#         self.denominator = denominator\n#     @staticmethod\n#     def folding(numerator, denominator):\n#         for i in range(2, 7):",
        "detail": "P4_14",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "P4_14",
        "description": "P4_14",
        "peekOfCode": "result = a + b\nprint(result)\n# class Fraction:\n#     def __init__(self, numerator, denominator):\n#         self.numerator = numerator\n#         self.denominator = denominator\n#     @staticmethod\n#     def folding(numerator, denominator):\n#         for i in range(2, 7):\n#             while numerator % i == 0 and denominator % i == 0:",
        "detail": "P4_14",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "P4_21",
        "description": "P4_21",
        "peekOfCode": "class Shape:\n    def calculate_area(self):\n        pass\n    def calculate_perimeter(self):\n        pass\nclass Rectangle(Shape):\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def calculate_area(self):",
        "detail": "P4_21",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "P4_21",
        "description": "P4_21",
        "peekOfCode": "class Rectangle(Shape):\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def calculate_area(self):\n        return self.length * self.width\n    def calculate_perimeter(self):\n        return 2 * (self.length + self.width)\nclass Circle(Shape):\n    def __init__(self, radius):",
        "detail": "P4_21",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "P4_21",
        "description": "P4_21",
        "peekOfCode": "class Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n    def calculate_area(self):\n        return pi * self.radius**2\n    def calculate_perimeter(self):\n        return pi * self.radius * 2\n# –¢–µ—Å—Ç—ã\nrectangle = Rectangle(5, 7)\nassert rectangle.calculate_area() == 35",
        "detail": "P4_21",
        "documentation": {}
    },
    {
        "label": "rectangle",
        "kind": 5,
        "importPath": "P4_21",
        "description": "P4_21",
        "peekOfCode": "rectangle = Rectangle(5, 7)\nassert rectangle.calculate_area() == 35\nassert rectangle.calculate_perimeter() == 24\ncircle = Circle(3)\nassert round(circle.calculate_area(), 2) == 28.27\nassert round(circle.calculate_perimeter(), 2) == 18.85\nprint(\"–¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\")",
        "detail": "P4_21",
        "documentation": {}
    },
    {
        "label": "circle",
        "kind": 5,
        "importPath": "P4_21",
        "description": "P4_21",
        "peekOfCode": "circle = Circle(3)\nassert round(circle.calculate_area(), 2) == 28.27\nassert round(circle.calculate_perimeter(), 2) == 18.85\nprint(\"–¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\")",
        "detail": "P4_21",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "P4_22",
        "description": "P4_22",
        "peekOfCode": "class Book:\n    def __init__(self, title, author, total_copies):\n        self.title = title\n        self.author = author\n        self.total_copies = total_copies\n        self.available_copies = total_copies\n    def borrow_book(self):\n        if self.available_copies:\n            self.available_copies -= 1\n            return True",
        "detail": "P4_22",
        "documentation": {}
    },
    {
        "label": "Author",
        "kind": 6,
        "importPath": "P4_22",
        "description": "P4_22",
        "peekOfCode": "class Author:\n    def __init__(self, name, birth_year):\n        self.name = name\n        self.birth_year = birth_year\n    def display_info(self):\n        print(f\"Author: {self.name}, Born: {self.birth_year}\")\nclass Librarian:\n    def __init__(self, name, position):\n        self.name = name\n        self.position = position",
        "detail": "P4_22",
        "documentation": {}
    },
    {
        "label": "Librarian",
        "kind": 6,
        "importPath": "P4_22",
        "description": "P4_22",
        "peekOfCode": "class Librarian:\n    def __init__(self, name, position):\n        self.name = name\n        self.position = position\n    def issue_book(self, book, member):\n        if book.borrow_book():\n            print(f\"Book '{book.title}' issued to {member}.\")\n        else:\n            print(f\"Sorry, '{book.title}' is currently unavailable for issuing.\")\n    def collect_book(self, book, member):",
        "detail": "P4_22",
        "documentation": {}
    },
    {
        "label": "Author",
        "kind": 6,
        "importPath": "P4_23",
        "description": "P4_23",
        "peekOfCode": "class Author:\n    def __init__(self, name):\n        self.name = name\n    def __str__(self):\n        return f\"Author: {self.name}\"\nclass Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n    def __str__(self):",
        "detail": "P4_23",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "P4_23",
        "description": "P4_23",
        "peekOfCode": "class Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n    def __str__(self):\n        return f\"Book: {self.title}, {self.author}\"\na1 = Author(\"–Ø\")\nb1 = Book(\"–ú–æ—è –∫–Ω–∏–≥–∞!\", a1)\nprint(b1)",
        "detail": "P4_23",
        "documentation": {}
    },
    {
        "label": "a1",
        "kind": 5,
        "importPath": "P4_23",
        "description": "P4_23",
        "peekOfCode": "a1 = Author(\"–Ø\")\nb1 = Book(\"–ú–æ—è –∫–Ω–∏–≥–∞!\", a1)\nprint(b1)",
        "detail": "P4_23",
        "documentation": {}
    },
    {
        "label": "b1",
        "kind": 5,
        "importPath": "P4_23",
        "description": "P4_23",
        "peekOfCode": "b1 = Book(\"–ú–æ—è –∫–Ω–∏–≥–∞!\", a1)\nprint(b1)",
        "detail": "P4_23",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 5,
        "importPath": "p611",
        "description": "p611",
        "peekOfCode": "os = [len(set(input().split())) for _ in range(int(input()))]\nfor i in os:\n    print(i)\n# words = [\"mention\",\"soup\",\"pneumonia\",\"tradition\",\"concert\",\"tease\",\"generation\",\"winter\",\"national\",\"jacket\",\n#     \"winter\",\"wrestle\",\"proposal\",\"error\",\"pneumonia\",\"concert\",\"value\",\"value\",\"disclose\",\"glasses\",\"tank\",\n#     \"national\",\"soup\",\"feel\",\"few\",\"concert\",\"wrestle\",\"proposal\",\"soup\",\"sail\",\"brown\",\"service\",\"proposal\",\n#     \"winter\",\"jacket\",\"mention\",\"tradition\",\"value\",\"feel\",\"bear\",\"few\",\"value\",\"winter\",\"proposal\",\"government\",\n#     \"control\",\"value\",\"few\",\"generation\",\"service\",\"national\",\"tradition\",\"government\",\"mention\",\"proposal\",\n# ]\n# sw = set(words)",
        "detail": "p611",
        "documentation": {}
    },
    {
        "label": "cc",
        "kind": 5,
        "importPath": "p614",
        "description": "p614",
        "peekOfCode": "cc = enumerate(input()[-1::-1], start=1)\ncs = 0\nfor i in cc:\n    if i[0] % 2 == 0:\n        cs += int(i[1]) * 2 if int(i[1]) * 2 < 10 else int(i[1]) * 2 - 9\n    else:\n        cs += int(i[1])\nprint(cs % 10 == 0)\n# english_words = (\n#     \"attack\",",
        "detail": "p614",
        "documentation": {}
    },
    {
        "label": "cs",
        "kind": 5,
        "importPath": "p614",
        "description": "p614",
        "peekOfCode": "cs = 0\nfor i in cc:\n    if i[0] % 2 == 0:\n        cs += int(i[1]) * 2 if int(i[1]) * 2 < 10 else int(i[1]) * 2 - 9\n    else:\n        cs += int(i[1])\nprint(cs % 10 == 0)\n# english_words = (\n#     \"attack\",\n#     \"bless\",",
        "detail": "p614",
        "documentation": {}
    },
    {
        "label": "my_tuple",
        "kind": 5,
        "importPath": "p62",
        "description": "p62",
        "peekOfCode": "my_tuple = (\n    -214,\n    181,\n    -139,\n    448,\n    -664,\n    -66,\n    213,\n    832,\n    717,",
        "detail": "p62",
        "documentation": {}
    },
    {
        "label": "cnt",
        "kind": 5,
        "importPath": "p62",
        "description": "p62",
        "peekOfCode": "cnt = 0\ns = 0\nfor i in my_tuple:\n    if not i % 2 == 0:\n        cnt += 1\n        s += i\nprint(s / cnt)\n# my_tuple = (\n#     32,\n#     45,",
        "detail": "p62",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "p62",
        "description": "p62",
        "peekOfCode": "s = 0\nfor i in my_tuple:\n    if not i % 2 == 0:\n        cnt += 1\n        s += i\nprint(s / cnt)\n# my_tuple = (\n#     32,\n#     45,\n#     32,",
        "detail": "p62",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "p67",
        "description": "p67",
        "peekOfCode": "data = {\n    \"my_friends\": {\n        \"count\": 10,\n        \"people\": [\n            {\n                \"first_name\": \"Kurt\",\n                \"id\": 621547005,\n                \"last_name\": \"Cobain\",\n                \"bdate\": \"31.8.2005\",\n            },",
        "detail": "p67",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "p67",
        "description": "p67",
        "peekOfCode": "s = []\nfor i in data[\"my_friends\"][\"people\"]:\n    s.append(i[\"first_name\"])\nfor i in sorted(s):\n    print(i)\n# persons = [\n#     (\"Allison Hill\", 334053, \"M\", \"1635644202\"),\n#     (\"Megan Mcclain\", 191161, \"F\", \"2101101595\"),\n#     (\"Brandon Hall\", 731262, \"M\", \"6054749119\"),\n#     (\"Michelle Miles\", 539898, \"M\", \"1355368461\"),",
        "detail": "p67",
        "documentation": {}
    },
    {
        "label": "check_password",
        "kind": 2,
        "importPath": "p71",
        "description": "p71",
        "peekOfCode": "def check_password(s):\n    f = True\n    cn = \"!@#$%*\"\n    ccnt = cnt = 0\n    if len(s) < 10:\n        f = False\n    if s == s.lower():\n        f = False\n    for i in s:\n        if i in cn:",
        "detail": "p71",
        "documentation": {}
    },
    {
        "label": "shift_letter",
        "kind": 2,
        "importPath": "p74",
        "description": "p74",
        "peekOfCode": "def shift_letter(l:str,sh:int)->str:\n    \"–§—É–Ω–∫—Ü–∏—è —Å–¥–≤–∏–≥–∞–µ—Ç —Å–∏–º–≤–æ–ª letter –Ω–∞ shift –ø–æ–∑–∏—Ü–∏–π\"\n    sl:str=[chr(i) for i in range(97,123)]\n    ind:int=sl.index(l)+sh\n    while ind>26 or ind<=-26:\n        ind=ind%26\n    return sl[ind]\ndef caesar_cipher(st:str,sh:int)->str:\n    \"–®–∏—Ñ—Ä —Ü–µ–∑–∞—Ä—è\"\n    so:str=''",
        "detail": "p74",
        "documentation": {}
    },
    {
        "label": "caesar_cipher",
        "kind": 2,
        "importPath": "p74",
        "description": "p74",
        "peekOfCode": "def caesar_cipher(st:str,sh:int)->str:\n    \"–®–∏—Ñ—Ä —Ü–µ–∑–∞—Ä—è\"\n    so:str=''\n    for ind in range(len(st)):\n        so+=shift_letter(st[ind],sh) if st[ind].isalpha() else st[ind]\n    return so\nprint(caesar_cipher('one more light',-33)) #hgx fhkx ebzam\n# print(caesar_cipher('w',-26)) #w\n# print(caesar_cipher('z',5)) #e\n# print(caesar_cipher('a',53)) #b",
        "detail": "p74",
        "documentation": {}
    },
    {
        "label": "get_word_indices",
        "kind": 2,
        "importPath": "p75",
        "description": "p75",
        "peekOfCode": "def get_word_indices(strings: list[str]) -> dict:\n    d={}\n    for i in range(len(strings)):\n        for j in strings[i].split():\n            if j.lower() in d:\n                d[j.lower()].append(i)\n            else:\n                d[j.lower()]=[i]      \n    return d\nassert get_word_indices(['This is a string',",
        "detail": "p75",
        "documentation": {}
    },
    {
        "label": "create_matrix",
        "kind": 2,
        "importPath": "p76",
        "description": "p76",
        "peekOfCode": "def create_matrix(size: int=3, up_fill: int = 0, down_fill: int = 0):\n    maxrix = [[0] * size for _ in range(size)]\n    for i in range(size):\n        for j in range(size):\n            if i==j: maxrix[i][i]=i+1\n            elif i<j: maxrix[i][j]=up_fill\n            elif i>j: maxrix[i][j]=down_fill\n    return maxrix\nassert create_matrix() == [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\nassert create_matrix(4) == [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]",
        "detail": "p76",
        "documentation": {}
    },
    {
        "label": "create_actor",
        "kind": 2,
        "importPath": "p77",
        "description": "p77",
        "peekOfCode": "def create_actor(name='–†–∞–π–∞–Ω',surname='–†–µ–π–Ω–æ–ª—å–¥—Å',age=46,**kwargs):\n    dact={}\n    dact['name']=name\n    dact['surname']=surname\n    dact['age']=age\n    dact.update(kwargs)\n    return dact\nprint(create_actor())\n# def info_kwargs(**kwargs):\n#     for i in sorted(kwargs):",
        "detail": "p77",
        "documentation": {}
    },
    {
        "label": "quick_sort",
        "kind": 2,
        "importPath": "p78",
        "description": "p78",
        "peekOfCode": "def quick_sort(s):\n    A=[]\n    B=[]\n    D=[]\n    if len(s)<=1: return s\n    mid=s[0]\n    for i in range(len(s)):\n        if s[i]<mid:\n            A.append(s[i])\n        elif s[i]==mid:",
        "detail": "p78",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "p91",
        "description": "p91",
        "peekOfCode": "words = set()\nwith open(\"words.txt\", encoding=\"utf-8\") as my_file:\n    for i in my_file.read().split():\n        if i.upper()[-2:] == \"–ï–Ø\":\n            words.add(i.upper())\nprint(*sorted(words, key=lambda x: (len(x), x)), sep=\"\\n\")",
        "detail": "p91",
        "documentation": {}
    },
    {
        "label": "people",
        "kind": 5,
        "importPath": "p93",
        "description": "p93",
        "peekOfCode": "people = '[{\"name\": \"Haley Whitney\", \"country\": \"British Indian Ocean Territory (Chagos Archipelago)\", \"age\": 54}, {\"name\": \"Matthew King\", \"country\": \"Colombia\", \"age\": 34}, {\"name\": \"Sean Sullivan\", \"country\": \"Mayotte\", \"age\": 40}, {\"name\": \"Christian Crawford\", \"country\": \"Russian Federation\", \"age\": 29}, {\"name\": \"Sarah Contreras\", \"country\": \"Honduras\", \"age\": 82}, {\"name\": \"Danielle Williams\", \"country\": \"Togo\", \"age\": 91}, {\"name\": \"Jonathan Wilson\", \"country\": \"Tunisia\", \"age\": 49}, {\"name\": \"Patricia Wilkerson\", \"country\": \"Georgia\", \"age\": 22}, {\"name\": \"Zachary Scott\", \"country\": \"Brunei Darussalam\", \"age\": 55}, {\"name\": \"Elizabeth Sanchez\", \"country\": \"Nauru\", \"age\": 23}, {\"name\": \"Christina Fernandez\", \"country\": \"Burundi\", \"age\": 71}, {\"name\": \"Allen Norton\", \"country\": \"Montserrat\", \"age\": 79}, {\"name\": \"Scott Arroyo\", \"country\": \"Montenegro\", \"age\": 72}, {\"name\": \"Brooke Boyd\", \"country\": \"Latvia\", \"age\": 74}, {\"name\": \"Jerry Morrow\", \"country\": \"San Marino\", \"age\": 23}, {\"name\": \"Danielle Bradshaw\", \"country\": \"Vietnam\", \"age\": 64}, {\"name\": \"Jerry Thompson\", \"country\": \"Belgium\", \"age\": 30}, {\"name\": \"Mark Jordan\", \"country\": \"Comoros\", \"age\": 89}, {\"name\": \"Joseph Berger\", \"country\": \"Cook Islands\", \"age\": 94}, {\"name\": \"Gina Brooks\", \"country\": \"Samoa\", \"age\": 51}, {\"name\": \"Walter Duran\", \"country\": \"Chad\", \"age\": 67}, {\"name\": \"John Martinez\", \"country\": \"Wallis and Futuna\", \"age\": 65}, {\"name\": \"Johnny Glover\", \"country\": \"Eritrea\", \"age\": 72}, {\"name\": \"Lindsay Moore\", \"country\": \"Liberia\", \"age\": 53}, {\"name\": \"Kimberly Burton\", \"country\": \"Nicaragua\", \"age\": 92}, {\"name\": \"Jacqueline Ballard\", \"country\": \"Nigeria\", \"age\": 78}, {\"name\": \"Charles Thompson\", \"country\": \"Saudi Arabia\", \"age\": 50}, {\"name\": \"Suzanne Roberts\", \"country\": \"Serbia\", \"age\": 43}, {\"name\": \"David Decker\", \"country\": \"South Africa\", \"age\": 71}, {\"name\": \"Christopher Perez\", \"country\": \"Cayman Islands\", \"age\": 49}, {\"name\": \"Debra Hall\", \"country\": \"Greece\", \"age\": 13}, {\"name\": \"John King\", \"country\": \"Bahamas\", \"age\": 40}, {\"name\": \"Justin Galvan\", \"country\": \"Namibia\", \"age\": 19}, {\"name\": \"Jacqueline Berger\", \"country\": \"Yemen\", \"age\": 59}, {\"name\": \"Shawn Robinson\", \"country\": \"Saint Pierre and Miquelon\", \"age\": 32}, {\"name\": \"Kristen Garcia\", \"country\": \"Portugal\", \"age\": 48}, {\"name\": \"Christopher Barry\", \"country\": \"French Polynesia\", \"age\": 23}, {\"name\": \"Alejandra Cook\", \"country\": \"Egypt\", \"age\": 16}, {\"name\": \"Jill Harrell\", \"country\": \"Comoros\", \"age\": 49}, {\"name\": \"Sara Zimmerman\", \"country\": \"Brazil\", \"age\": 26}, {\"name\": \"Mrs. Charlene Flores\", \"country\": \"New Caledonia\", \"age\": 75}, {\"name\": \"Melissa Crawford\", \"country\": \"Lebanon\", \"age\": 17}, {\"name\": \"Larry Wong\", \"country\": \"New Caledonia\", \"age\": 6}, {\"name\": \"Brenda Acosta\", \"country\": \"Grenada\", \"age\": 48}, {\"name\": \"Latoya Terry\", \"country\": \"Saint Martin\", \"age\": 41}, {\"name\": \"Seth Luna\", \"country\": \"Sao Tome and Principe\", \"age\": 59}, {\"name\": \"Micheal Adams\", \"country\": \"Barbados\", \"age\": 53}, {\"name\": \"Susan Carroll\", \"country\": \"Somalia\", \"age\": 64}, {\"name\": \"Douglas Morris\", \"country\": \"Thailand\", \"age\": 24}, {\"name\": \"Dennis Wagner\", \"country\": \"Zimbabwe\", \"age\": 66}, {\"name\": \"Kristin Johnson\", \"country\": \"Niue\", \"age\": 71}, {\"name\": \"Steven Krause\", \"country\": \"Turkmenistan\", \"age\": 84}, {\"name\": \"Jared Smith\", \"country\": \"Colombia\", \"age\": 46}, {\"name\": \"Lauren Anderson\", \"country\": \"Christmas Island\", \"age\": 46}, {\"name\": \"Joshua Spencer\", \"country\": \"Russian Federation\", \"age\": 38}, {\"name\": \"Maria Edwards\", \"country\": \"Hungary\", \"age\": 78}, {\"name\": \"Anne Lee\", \"country\": \"United States of America\", \"age\": 10}, {\"name\": \"James Mckenzie\", \"country\": \"Uganda\", \"age\": 43}, {\"name\": \"Joshua Gallegos\", \"country\": \"United States Minor Outlying Islands\", \"age\": 27}, {\"name\": \"Paul Herrera\", \"country\": \"Kiribati\", \"age\": 17}, {\"name\": \"Veronica White\", \"country\": \"Gabon\", \"age\": 88}, {\"name\": \"Michael Hall\", \"country\": \"China\", \"age\": 43}, {\"name\": \"Sabrina Thompson\", \"country\": \"Chad\", \"age\": 27}, {\"name\": \"Jennifer Archer\", \"country\": \"Korea\", \"age\": 45}, {\"name\": \"Christina Simmons\", \"country\": \"Israel\", \"age\": 80}, {\"name\": \"Travis White\", \"country\": \"Central African Republic\", \"age\": 31}, {\"name\": \"Dennis Hernandez\", \"country\": \"Slovenia\", \"age\": 66}, {\"name\": \"Matthew Richards\", \"country\": \"Svalbard & Jan Mayen Islands\", \"age\": 34}, {\"name\": \"Stephen Curry\", \"country\": \"Finland\", \"age\": 92}, {\"name\": \"Margaret Williamson\", \"country\": \"Hong Kong\", \"age\": 86}, {\"name\": \"Mary Estes\", \"country\": \"Montenegro\", \"age\": 19}, {\"name\": \"Alex Scott\", \"country\": \"Christmas Island\", \"age\": 67}, {\"name\": \"John Andrews\", \"country\": \"Bahamas\", \"age\": 68}, {\"name\": \"Jonathan Willis\", \"country\": \"Saint Martin\", \"age\": 23}, {\"name\": \"Olivia Campos\", \"country\": \"Armenia\", \"age\": 72}, {\"name\": \"Diana Davis\", \"country\": \"Azerbaijan\", \"age\": 54}, {\"name\": \"Jack Cummings\", \"country\": \"Martinique\", \"age\": 94}, {\"name\": \"Kaitlyn Mcdonald\", \"country\": \"Austria\", \"age\": 12}, {\"name\": \"Maria Blake\", \"country\": \"Pitcairn Islands\", \"age\": 91}, {\"name\": \"Kelly Thomas\", \"country\": \"Ethiopia\", \"age\": 74}, {\"name\": \"John Terrell Jr.\", \"country\": \"India\", \"age\": 50}, {\"name\": \"Lindsay Wood\", \"country\": \"United Arab Emirates\", \"age\": 72}, {\"name\": \"Matthew Gilbert\", \"country\": \"Madagascar\", \"age\": 86}, {\"name\": \"Tanner Johnson\", \"country\": \"Congo\", \"age\": 11}, {\"name\": \"Michael Garcia\", \"country\": \"Liberia\", \"age\": 45}, {\"name\": \"Nicole Johnson\", \"country\": \"Barbados\", \"age\": 54}, {\"name\": \"William Lee\", \"country\": \"Lithuania\", \"age\": 59}, {\"name\": \"Jeffrey Coffey\", \"country\": \"Faroe Islands\", \"age\": 88}, {\"name\": \"Sandra Freeman\", \"country\": \"Philippines\", \"age\": 35}, {\"name\": \"Latoya Maxwell\", \"country\": \"Sweden\", \"age\": 12}, {\"name\": \"Darius Blevins\", \"country\": \"Thailand\", \"age\": 29}, {\"name\": \"Teresa Newman\", \"country\": \"Jersey\", \"age\": 6}, {\"name\": \"Larry Bray\", \"country\": \"Brunei Darussalam\", \"age\": 21}, {\"name\": \"Adam Roberson\", \"country\": \"Jordan\", \"age\": 71}, {\"name\": \"Michael Gomez\", \"country\": \"Tajikistan\", \"age\": 37}, {\"name\": \"Abigail Mccarthy\", \"country\": \"Kiribati\", \"age\": 85}, {\"name\": \"Tom Morris\", \"country\": \"Cayman Islands\", \"age\": 27}, {\"name\": \"Kevin Wagner\", \"country\": \"Suriname\", \"age\": 55}, {\"name\": \"Peggy Bryant\", \"country\": \"Korea\", \"age\": 36}, {\"name\": \"Erik Mclaughlin\", \"country\": \"Austria\", \"age\": 24}]'\ndata = json.loads(people)\nfor i in sorted(data, key=lambda x: (x[\"age\"], x[\"name\"])):\n    print(f\"{i['name']}, {i['country']}, {i['age']}\")\n# with open(\"Alphabet.json\") as file:\n#     key = json.load(file)\n# with open(\"Abracadabra__1_.txt\", encoding=\"utf-8\") as my_file:\n#     with open(\"AbracadabraDecode.txt\", mode=\"w\") as out_file:\n#         for i in my_file.read():\n#             if i in key:",
        "detail": "p93",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "p93",
        "description": "p93",
        "peekOfCode": "data = json.loads(people)\nfor i in sorted(data, key=lambda x: (x[\"age\"], x[\"name\"])):\n    print(f\"{i['name']}, {i['country']}, {i['age']}\")\n# with open(\"Alphabet.json\") as file:\n#     key = json.load(file)\n# with open(\"Abracadabra__1_.txt\", encoding=\"utf-8\") as my_file:\n#     with open(\"AbracadabraDecode.txt\", mode=\"w\") as out_file:\n#         for i in my_file.read():\n#             if i in key:\n#                 out_file.write(key[i])",
        "detail": "p93",
        "documentation": {}
    },
    {
        "label": "multiply_set",
        "kind": 2,
        "importPath": "pbtz4215",
        "description": "pbtz4215",
        "peekOfCode": "def multiply_set(nlst):\n    return nlst[0] * nlst[1] * nlst[2]\nsingle = [\n    2,\n    3,\n    5,\n    7,\n    11,\n    13,\n    17,",
        "detail": "pbtz4215",
        "documentation": {}
    },
    {
        "label": "multiply_set",
        "kind": 2,
        "importPath": "pbtz4215",
        "description": "pbtz4215",
        "peekOfCode": "def multiply_set(nlst):\n    return nlst[0] * nlst[1] * nlst[2]\ndef shift_set(nlst):\n    global result\n    result.add((nlst[1], nlst[0], nlst[2]))\n    result.add((nlst[1], nlst[2], nlst[0]))\n    result.add((nlst[2], nlst[1], nlst[0]))\n    result.add((nlst[2], nlst[0], nlst[1]))\n    result.add((nlst[0], nlst[1], nlst[2]))\n    result.add((nlst[0], nlst[2], nlst[1]))",
        "detail": "pbtz4215",
        "documentation": {}
    },
    {
        "label": "shift_set",
        "kind": 2,
        "importPath": "pbtz4215",
        "description": "pbtz4215",
        "peekOfCode": "def shift_set(nlst):\n    global result\n    result.add((nlst[1], nlst[0], nlst[2]))\n    result.add((nlst[1], nlst[2], nlst[0]))\n    result.add((nlst[2], nlst[1], nlst[0]))\n    result.add((nlst[2], nlst[0], nlst[1]))\n    result.add((nlst[0], nlst[1], nlst[2]))\n    result.add((nlst[0], nlst[2], nlst[1]))\nsingle = [\n    2,",
        "detail": "pbtz4215",
        "documentation": {}
    },
    {
        "label": "single",
        "kind": 5,
        "importPath": "pbtz4215",
        "description": "pbtz4215",
        "peekOfCode": "single = [\n    2,\n    3,\n    5,\n    7,\n    11,\n    13,\n    17,\n    19,\n    23,",
        "detail": "pbtz4215",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "pbtz4215",
        "description": "pbtz4215",
        "peekOfCode": "n = int(input())\nresult = []\nmax_num = 0\nfor i1 in single:\n    for i2 in single:\n        for i3 in single:\n            number_set = [i1, i2, i3]\n            if multiply_set(number_set) <= n:\n                result.append(number_set)\n            else:",
        "detail": "pbtz4215",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "pbtz4215",
        "description": "pbtz4215",
        "peekOfCode": "result = []\nmax_num = 0\nfor i1 in single:\n    for i2 in single:\n        for i3 in single:\n            number_set = [i1, i2, i3]\n            if multiply_set(number_set) <= n:\n                result.append(number_set)\n            else:\n                if max_num == 0:",
        "detail": "pbtz4215",
        "documentation": {}
    },
    {
        "label": "max_num",
        "kind": 5,
        "importPath": "pbtz4215",
        "description": "pbtz4215",
        "peekOfCode": "max_num = 0\nfor i1 in single:\n    for i2 in single:\n        for i3 in single:\n            number_set = [i1, i2, i3]\n            if multiply_set(number_set) <= n:\n                result.append(number_set)\n            else:\n                if max_num == 0:\n                    max_num = i3",
        "detail": "pbtz4215",
        "documentation": {}
    },
    {
        "label": "single",
        "kind": 5,
        "importPath": "pbtz4215",
        "description": "pbtz4215",
        "peekOfCode": "single = [\n    2,\n    3,\n    5,\n    7,\n    11,\n    13,\n    17,\n    19,\n    23,",
        "detail": "pbtz4215",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "pbtz4215",
        "description": "pbtz4215",
        "peekOfCode": "n = int(input())\nresult = set()\nfor i1 in single:\n    for i2 in single:\n        for i3 in single:\n            number_set = (i1, i2, i3)\n            if multiply_set(number_set) <= n:\n                shift_set(number_set)\n            else:\n                max_num = i3",
        "detail": "pbtz4215",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "pbtz4215",
        "description": "pbtz4215",
        "peekOfCode": "result = set()\nfor i1 in single:\n    for i2 in single:\n        for i3 in single:\n            number_set = (i1, i2, i3)\n            if multiply_set(number_set) <= n:\n                shift_set(number_set)\n            else:\n                max_num = i3\n                break",
        "detail": "pbtz4215",
        "documentation": {}
    },
    {
        "label": "out",
        "kind": 5,
        "importPath": "pbtz4215",
        "description": "pbtz4215",
        "peekOfCode": "out = []\nfor i in result:\n    out.append(list(i))\nprint(out)",
        "detail": "pbtz4215",
        "documentation": {}
    },
    {
        "label": "fillna_mean",
        "kind": 2,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "def fillna_mean(x):\n    return x.fillna(x.mean())\nprint(s.transform(fillna_mean))\n# —Å–æ–∑–¥–∞–¥–∏–º —Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã—Ö\ndf = pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]})\n# –æ—Ç–±—Ä–æ—Å–∏–º –∫–æ–ª–æ–Ω–∫—É 'B'\ndf = df.drop(columns=[\"B\"])\nprint(df)\n# —Å–æ–∑–¥–∞–¥–∏–º —Å–µ—Ä–∏—é —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\ns = pd.Series([1, 2, 2])",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s1 = pd.Series([1, 2])\ns2 = pd.Series([3, 4])\n# append s2 to s1\ns3 = s1._append(s2)\nprint(s3)\ns = pd.Series([10, 20, 30])\nmean_value = s.mean()\nprint(mean_value)\nimport numpy as np\n# –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s2 = pd.Series([3, 4])\n# append s2 to s1\ns3 = s1._append(s2)\nprint(s3)\ns = pd.Series([10, 20, 30])\nmean_value = s.mean()\nprint(mean_value)\nimport numpy as np\n# –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏\ndf = pd.DataFrame(",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s3",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s3 = s1._append(s2)\nprint(s3)\ns = pd.Series([10, 20, 30])\nmean_value = s.mean()\nprint(mean_value)\nimport numpy as np\n# –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏\ndf = pd.DataFrame(\n    [\n        [np.nan, 2, np.nan, 0],",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s = pd.Series([10, 20, 30])\nmean_value = s.mean()\nprint(mean_value)\nimport numpy as np\n# –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏\ndf = pd.DataFrame(\n    [\n        [np.nan, 2, np.nan, 0],\n        [3, 4, np.nan, 1],\n        [np.nan, np.nan, np.nan, np.nan],",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "mean_value",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "mean_value = s.mean()\nprint(mean_value)\nimport numpy as np\n# –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏\ndf = pd.DataFrame(\n    [\n        [np.nan, 2, np.nan, 0],\n        [3, 4, np.nan, 1],\n        [np.nan, np.nan, np.nan, np.nan],\n        [np.nan, 3, np.nan, 4],",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "df = pd.DataFrame(\n    [\n        [np.nan, 2, np.nan, 0],\n        [3, 4, np.nan, 1],\n        [np.nan, np.nan, np.nan, np.nan],\n        [np.nan, 3, np.nan, 4],\n    ],\n    columns=list(\"ABCD\"),\n)\n# –í—ã–≤–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π DataFrame",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "df1",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "df1 = df.fillna(0)\nprint(df1)\n# create a series\ns = pd.Series([1, 2, 3])\n# apply a function to each element in the series\ns = s.apply(lambda x: x * 2)\nprint(s)\ns = pd.Series([1, None, 3])\ndef fillna_mean(x):\n    return x.fillna(x.mean())",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s = pd.Series([1, 2, 3])\n# apply a function to each element in the series\ns = s.apply(lambda x: x * 2)\nprint(s)\ns = pd.Series([1, None, 3])\ndef fillna_mean(x):\n    return x.fillna(x.mean())\nprint(s.transform(fillna_mean))\n# —Å–æ–∑–¥–∞–¥–∏–º —Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã—Ö\ndf = pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]})",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s = s.apply(lambda x: x * 2)\nprint(s)\ns = pd.Series([1, None, 3])\ndef fillna_mean(x):\n    return x.fillna(x.mean())\nprint(s.transform(fillna_mean))\n# —Å–æ–∑–¥–∞–¥–∏–º —Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã—Ö\ndf = pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]})\n# –æ—Ç–±—Ä–æ—Å–∏–º –∫–æ–ª–æ–Ω–∫—É 'B'\ndf = df.drop(columns=[\"B\"])",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s = pd.Series([1, None, 3])\ndef fillna_mean(x):\n    return x.fillna(x.mean())\nprint(s.transform(fillna_mean))\n# —Å–æ–∑–¥–∞–¥–∏–º —Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã—Ö\ndf = pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]})\n# –æ—Ç–±—Ä–æ—Å–∏–º –∫–æ–ª–æ–Ω–∫—É 'B'\ndf = df.drop(columns=[\"B\"])\nprint(df)\n# —Å–æ–∑–¥–∞–¥–∏–º —Å–µ—Ä–∏—é —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "df = pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]})\n# –æ—Ç–±—Ä–æ—Å–∏–º –∫–æ–ª–æ–Ω–∫—É 'B'\ndf = df.drop(columns=[\"B\"])\nprint(df)\n# —Å–æ–∑–¥–∞–¥–∏–º —Å–µ—Ä–∏—é —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\ns = pd.Series([1, 2, 2])\n# —É–¥–∞–ª–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã\ns = s.drop_duplicates()\nprint(s)\n# —Å–æ–∑–¥–∞–¥–∏–º –¥–≤–µ —Å–µ—Ä–∏–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "df = df.drop(columns=[\"B\"])\nprint(df)\n# —Å–æ–∑–¥–∞–¥–∏–º —Å–µ—Ä–∏—é —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\ns = pd.Series([1, 2, 2])\n# —É–¥–∞–ª–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã\ns = s.drop_duplicates()\nprint(s)\n# —Å–æ–∑–¥–∞–¥–∏–º –¥–≤–µ —Å–µ—Ä–∏–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\ns1 = pd.Series([1, 2])\ns2 = pd.Series([1, 2])",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s = pd.Series([1, 2, 2])\n# —É–¥–∞–ª–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã\ns = s.drop_duplicates()\nprint(s)\n# —Å–æ–∑–¥–∞–¥–∏–º –¥–≤–µ —Å–µ—Ä–∏–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\ns1 = pd.Series([1, 2])\ns2 = pd.Series([1, 2])\n# –ø—Ä–æ–≤–µ—Ä–∏–º, –æ–¥–∏–Ω–∞–∫–æ–≤—ã –ª–∏ –æ–Ω–∏\nresult = s1.equals(s2)\nprint(result)",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s = s.drop_duplicates()\nprint(s)\n# —Å–æ–∑–¥–∞–¥–∏–º –¥–≤–µ —Å–µ—Ä–∏–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\ns1 = pd.Series([1, 2])\ns2 = pd.Series([1, 2])\n# –ø—Ä–æ–≤–µ—Ä–∏–º, –æ–¥–∏–Ω–∞–∫–æ–≤—ã –ª–∏ –æ–Ω–∏\nresult = s1.equals(s2)\nprint(result)\n# —Å–æ–∑–¥–∞–¥–∏–º —Å–µ—Ä–∏—é –∏ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\ns = pd.Series([1, 2])",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s1 = pd.Series([1, 2])\ns2 = pd.Series([1, 2])\n# –ø—Ä–æ–≤–µ—Ä–∏–º, –æ–¥–∏–Ω–∞–∫–æ–≤—ã –ª–∏ –æ–Ω–∏\nresult = s1.equals(s2)\nprint(result)\n# —Å–æ–∑–¥–∞–¥–∏–º —Å–µ—Ä–∏—é –∏ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\ns = pd.Series([1, 2])\nvalues = [1]\n# –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–µ—Ä–∏–∏ –≤ —Å–ø–∏—Å–∫–µ –∑–Ω–∞—á–µ–Ω–∏–π\nresult = s.isin(values)",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s2 = pd.Series([1, 2])\n# –ø—Ä–æ–≤–µ—Ä–∏–º, –æ–¥–∏–Ω–∞–∫–æ–≤—ã –ª–∏ –æ–Ω–∏\nresult = s1.equals(s2)\nprint(result)\n# —Å–æ–∑–¥–∞–¥–∏–º —Å–µ—Ä–∏—é –∏ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\ns = pd.Series([1, 2])\nvalues = [1]\n# –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–µ—Ä–∏–∏ –≤ —Å–ø–∏—Å–∫–µ –∑–Ω–∞—á–µ–Ω–∏–π\nresult = s.isin(values)\nprint(result)",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "result = s1.equals(s2)\nprint(result)\n# —Å–æ–∑–¥–∞–¥–∏–º —Å–µ—Ä–∏—é –∏ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\ns = pd.Series([1, 2])\nvalues = [1]\n# –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–µ—Ä–∏–∏ –≤ —Å–ø–∏—Å–∫–µ –∑–Ω–∞—á–µ–Ω–∏–π\nresult = s.isin(values)\nprint(result)\n# —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–∏—é –∏ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\ns = pd.Series([\"cat\", \"dog\"])",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s = pd.Series([1, 2])\nvalues = [1]\n# –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–µ—Ä–∏–∏ –≤ —Å–ø–∏—Å–∫–µ –∑–Ω–∞—á–µ–Ω–∏–π\nresult = s.isin(values)\nprint(result)\n# —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–∏—é –∏ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\ns = pd.Series([\"cat\", \"dog\"])\nmapping = {\"cat\": \"feline\", \"dog\": \"canine\"}\n# —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–µ—Ä–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Å –ø–æ–º–æ—â—å—é .map()\ns = s.map(mapping)",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "values = [1]\n# –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–µ—Ä–∏–∏ –≤ —Å–ø–∏—Å–∫–µ –∑–Ω–∞—á–µ–Ω–∏–π\nresult = s.isin(values)\nprint(result)\n# —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–∏—é –∏ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\ns = pd.Series([\"cat\", \"dog\"])\nmapping = {\"cat\": \"feline\", \"dog\": \"canine\"}\n# —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–µ—Ä–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Å –ø–æ–º–æ—â—å—é .map()\ns = s.map(mapping)\nprint(s)",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "result = s.isin(values)\nprint(result)\n# —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–∏—é –∏ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\ns = pd.Series([\"cat\", \"dog\"])\nmapping = {\"cat\": \"feline\", \"dog\": \"canine\"}\n# —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–µ—Ä–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Å –ø–æ–º–æ—â—å—é .map()\ns = s.map(mapping)\nprint(s)\n# —Å–æ–∑–¥–∞–π—Ç–µ —Ä—è–¥ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã –∏—Ö –¥—Ä—É–≥–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.\ns = pd.Series([1, 2])",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s = pd.Series([\"cat\", \"dog\"])\nmapping = {\"cat\": \"feline\", \"dog\": \"canine\"}\n# —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–µ—Ä–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Å –ø–æ–º–æ—â—å—é .map()\ns = s.map(mapping)\nprint(s)\n# —Å–æ–∑–¥–∞–π—Ç–µ —Ä—è–¥ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã –∏—Ö –¥—Ä—É–≥–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.\ns = pd.Series([1, 2])\nto_replace = [1]\nvalue = [3]\n# –∑–∞–º–µ–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–µ—Ä–∏–∏ –Ω–∞ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "mapping",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "mapping = {\"cat\": \"feline\", \"dog\": \"canine\"}\n# —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–µ—Ä–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Å –ø–æ–º–æ—â—å—é .map()\ns = s.map(mapping)\nprint(s)\n# —Å–æ–∑–¥–∞–π—Ç–µ —Ä—è–¥ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã –∏—Ö –¥—Ä—É–≥–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.\ns = pd.Series([1, 2])\nto_replace = [1]\nvalue = [3]\n# –∑–∞–º–µ–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–µ—Ä–∏–∏ –Ω–∞ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\ns = s.replace(to_replace=to_replace, value=value)",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s = s.map(mapping)\nprint(s)\n# —Å–æ–∑–¥–∞–π—Ç–µ —Ä—è–¥ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã –∏—Ö –¥—Ä—É–≥–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.\ns = pd.Series([1, 2])\nto_replace = [1]\nvalue = [3]\n# –∑–∞–º–µ–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–µ—Ä–∏–∏ –Ω–∞ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\ns = s.replace(to_replace=to_replace, value=value)\nprint(s)\n# –°–æ–∑–¥–∞–µ–º series",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s = pd.Series([1, 2])\nto_replace = [1]\nvalue = [3]\n# –∑–∞–º–µ–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–µ—Ä–∏–∏ –Ω–∞ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\ns = s.replace(to_replace=to_replace, value=value)\nprint(s)\n# –°–æ–∑–¥–∞–µ–º series\ns = pd.Series([2, 1])\n# —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–µ—Ä–∏–∏\ns = s.sort_values()",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "to_replace",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "to_replace = [1]\nvalue = [3]\n# –∑–∞–º–µ–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–µ—Ä–∏–∏ –Ω–∞ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\ns = s.replace(to_replace=to_replace, value=value)\nprint(s)\n# –°–æ–∑–¥–∞–µ–º series\ns = pd.Series([2, 1])\n# —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–µ—Ä–∏–∏\ns = s.sort_values()\nprint(s)",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "value = [3]\n# –∑–∞–º–µ–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–µ—Ä–∏–∏ –Ω–∞ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\ns = s.replace(to_replace=to_replace, value=value)\nprint(s)\n# –°–æ–∑–¥–∞–µ–º series\ns = pd.Series([2, 1])\n# —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–µ—Ä–∏–∏\ns = s.sort_values()\nprint(s)\ns = pd.Series([3, 1, 2])",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s = s.replace(to_replace=to_replace, value=value)\nprint(s)\n# –°–æ–∑–¥–∞–µ–º series\ns = pd.Series([2, 1])\n# —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–µ—Ä–∏–∏\ns = s.sort_values()\nprint(s)\ns = pd.Series([3, 1, 2])\nprint(s.sort_values())\ns1 = pd.Series([10, 20, 30])",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s = pd.Series([2, 1])\n# —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–µ—Ä–∏–∏\ns = s.sort_values()\nprint(s)\ns = pd.Series([3, 1, 2])\nprint(s.sort_values())\ns1 = pd.Series([10, 20, 30])\nn = 5\ns_new = s1.div(n)\nprint(s_new)",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s = s.sort_values()\nprint(s)\ns = pd.Series([3, 1, 2])\nprint(s.sort_values())\ns1 = pd.Series([10, 20, 30])\nn = 5\ns_new = s1.div(n)\nprint(s_new)\ns_new = s1.sub(n)\nprint(s_new)",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s = pd.Series([3, 1, 2])\nprint(s.sort_values())\ns1 = pd.Series([10, 20, 30])\nn = 5\ns_new = s1.div(n)\nprint(s_new)\ns_new = s1.sub(n)\nprint(s_new)\ns1 = pd.Series([1, 2, 3])\ns2 = pd.Series([4, 5, 6])",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s1 = pd.Series([10, 20, 30])\nn = 5\ns_new = s1.div(n)\nprint(s_new)\ns_new = s1.sub(n)\nprint(s_new)\ns1 = pd.Series([1, 2, 3])\ns2 = pd.Series([4, 5, 6])\ns_new = s1.mul(s2)\nprint(s_new)",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "n = 5\ns_new = s1.div(n)\nprint(s_new)\ns_new = s1.sub(n)\nprint(s_new)\ns1 = pd.Series([1, 2, 3])\ns2 = pd.Series([4, 5, 6])\ns_new = s1.mul(s2)\nprint(s_new)\ns = pd.Series([1, 2, 3])",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s_new",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s_new = s1.div(n)\nprint(s_new)\ns_new = s1.sub(n)\nprint(s_new)\ns1 = pd.Series([1, 2, 3])\ns2 = pd.Series([4, 5, 6])\ns_new = s1.mul(s2)\nprint(s_new)\ns = pd.Series([1, 2, 3])\ns_new = s.pow(2)",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s_new",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s_new = s1.sub(n)\nprint(s_new)\ns1 = pd.Series([1, 2, 3])\ns2 = pd.Series([4, 5, 6])\ns_new = s1.mul(s2)\nprint(s_new)\ns = pd.Series([1, 2, 3])\ns_new = s.pow(2)\nprint(s_new)",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s1 = pd.Series([1, 2, 3])\ns2 = pd.Series([4, 5, 6])\ns_new = s1.mul(s2)\nprint(s_new)\ns = pd.Series([1, 2, 3])\ns_new = s.pow(2)\nprint(s_new)",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s2 = pd.Series([4, 5, 6])\ns_new = s1.mul(s2)\nprint(s_new)\ns = pd.Series([1, 2, 3])\ns_new = s.pow(2)\nprint(s_new)",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s_new",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s_new = s1.mul(s2)\nprint(s_new)\ns = pd.Series([1, 2, 3])\ns_new = s.pow(2)\nprint(s_new)",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s = pd.Series([1, 2, 3])\ns_new = s.pow(2)\nprint(s_new)",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "s_new",
        "kind": 5,
        "importPath": "PNM_pandas",
        "description": "PNM_pandas",
        "peekOfCode": "s_new = s.pow(2)\nprint(s_new)",
        "detail": "PNM_pandas",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "pok31",
        "description": "pok31",
        "peekOfCode": "numbers = [-6, -8, 0, 1, 3, 8, -7, 12, 17, 24, 25, 3, 5, 1]\nres = 0\nfor num in numbers:\n    res += (num % 2 == 1) and (num > 1) \nprint(res)",
        "detail": "pok31",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "pok31",
        "description": "pok31",
        "peekOfCode": "res = 0\nfor num in numbers:\n    res += (num % 2 == 1) and (num > 1) \nprint(res)",
        "detail": "pok31",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "Pok41",
        "description": "Pok41",
        "peekOfCode": "list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]\ntotal = 0\ncounter = 0\nfor i in list1:\n    total += sum(i)\n    counter += len(i)\nprint(total / counter)",
        "detail": "Pok41",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "Pok41",
        "description": "Pok41",
        "peekOfCode": "total = 0\ncounter = 0\nfor i in list1:\n    total += sum(i)\n    counter += len(i)\nprint(total / counter)",
        "detail": "Pok41",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "Pok41",
        "description": "Pok41",
        "peekOfCode": "counter = 0\nfor i in list1:\n    total += sum(i)\n    counter += len(i)\nprint(total / counter)",
        "detail": "Pok41",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Pok44",
        "description": "Pok44",
        "peekOfCode": "n = int(input())\nmaxrix = [[0] * n for _ in range(n)]\nvch = rch = nch = lch = 0\nfor i in range(n):\n    row = list(map(int, input().split()))\n    for j in range(n):\n        maxrix[i][j] = row[j]\nfor i in range(n):\n    for j in range(n):\n        if i < j and i < n - 1 - j:",
        "detail": "Pok44",
        "documentation": {}
    },
    {
        "label": "maxrix",
        "kind": 5,
        "importPath": "Pok44",
        "description": "Pok44",
        "peekOfCode": "maxrix = [[0] * n for _ in range(n)]\nvch = rch = nch = lch = 0\nfor i in range(n):\n    row = list(map(int, input().split()))\n    for j in range(n):\n        maxrix[i][j] = row[j]\nfor i in range(n):\n    for j in range(n):\n        if i < j and i < n - 1 - j:\n            vch += maxrix[i][j]",
        "detail": "Pok44",
        "documentation": {}
    },
    {
        "label": "vch",
        "kind": 5,
        "importPath": "Pok44",
        "description": "Pok44",
        "peekOfCode": "vch = rch = nch = lch = 0\nfor i in range(n):\n    row = list(map(int, input().split()))\n    for j in range(n):\n        maxrix[i][j] = row[j]\nfor i in range(n):\n    for j in range(n):\n        if i < j and i < n - 1 - j:\n            vch += maxrix[i][j]\n        if i < j and i > n - 1 - j:",
        "detail": "Pok44",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Pok45",
        "description": "Pok45",
        "peekOfCode": "n = int(input())\nmaxrix = [[0] * n for _ in range(n)]\nf=True\ngs=vs=cs=0\ndb=set()\nrs=set()\nfor i in range(n):\n    row = list(map(int, input().split()))\n    rs.add(sum(row))\n    for j in range(n):",
        "detail": "Pok45",
        "documentation": {}
    },
    {
        "label": "maxrix",
        "kind": 5,
        "importPath": "Pok45",
        "description": "Pok45",
        "peekOfCode": "maxrix = [[0] * n for _ in range(n)]\nf=True\ngs=vs=cs=0\ndb=set()\nrs=set()\nfor i in range(n):\n    row = list(map(int, input().split()))\n    rs.add(sum(row))\n    for j in range(n):\n        maxrix[i][j] = row[j]",
        "detail": "Pok45",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Pok46",
        "description": "Pok46",
        "peekOfCode": "result = [[int(0) for _ in range(m)] for _ in range(n)]\nli = len(result)\nlj = len(result[0])\nci, cj = 0, 0\ndirect = 1\npointdirm = m - 1\npointdirn = n - 1\npointrot = 0\nfor nm in range(n * m):\n    result[ci][cj] = nm + 1",
        "detail": "Pok46",
        "documentation": {}
    },
    {
        "label": "li",
        "kind": 5,
        "importPath": "Pok46",
        "description": "Pok46",
        "peekOfCode": "li = len(result)\nlj = len(result[0])\nci, cj = 0, 0\ndirect = 1\npointdirm = m - 1\npointdirn = n - 1\npointrot = 0\nfor nm in range(n * m):\n    result[ci][cj] = nm + 1\n    if direct == 1:",
        "detail": "Pok46",
        "documentation": {}
    },
    {
        "label": "lj",
        "kind": 5,
        "importPath": "Pok46",
        "description": "Pok46",
        "peekOfCode": "lj = len(result[0])\nci, cj = 0, 0\ndirect = 1\npointdirm = m - 1\npointdirn = n - 1\npointrot = 0\nfor nm in range(n * m):\n    result[ci][cj] = nm + 1\n    if direct == 1:\n        cj += 1",
        "detail": "Pok46",
        "documentation": {}
    },
    {
        "label": "direct",
        "kind": 5,
        "importPath": "Pok46",
        "description": "Pok46",
        "peekOfCode": "direct = 1\npointdirm = m - 1\npointdirn = n - 1\npointrot = 0\nfor nm in range(n * m):\n    result[ci][cj] = nm + 1\n    if direct == 1:\n        cj += 1\n        if cj > pointdirm:\n            cj = pointdirm",
        "detail": "Pok46",
        "documentation": {}
    },
    {
        "label": "pointdirm",
        "kind": 5,
        "importPath": "Pok46",
        "description": "Pok46",
        "peekOfCode": "pointdirm = m - 1\npointdirn = n - 1\npointrot = 0\nfor nm in range(n * m):\n    result[ci][cj] = nm + 1\n    if direct == 1:\n        cj += 1\n        if cj > pointdirm:\n            cj = pointdirm\n            direct = 2",
        "detail": "Pok46",
        "documentation": {}
    },
    {
        "label": "pointdirn",
        "kind": 5,
        "importPath": "Pok46",
        "description": "Pok46",
        "peekOfCode": "pointdirn = n - 1\npointrot = 0\nfor nm in range(n * m):\n    result[ci][cj] = nm + 1\n    if direct == 1:\n        cj += 1\n        if cj > pointdirm:\n            cj = pointdirm\n            direct = 2\n    if direct == 2:",
        "detail": "Pok46",
        "documentation": {}
    },
    {
        "label": "pointrot",
        "kind": 5,
        "importPath": "Pok46",
        "description": "Pok46",
        "peekOfCode": "pointrot = 0\nfor nm in range(n * m):\n    result[ci][cj] = nm + 1\n    if direct == 1:\n        cj += 1\n        if cj > pointdirm:\n            cj = pointdirm\n            direct = 2\n    if direct == 2:\n        ci += 1",
        "detail": "Pok46",
        "documentation": {}
    },
    {
        "label": "maxrix",
        "kind": 5,
        "importPath": "Pok46old",
        "description": "Pok46old",
        "peekOfCode": "maxrix = [[0] * n for _ in range(m)]\ni=st=0\nwhile i<n:\n    j=i if i<m else m\n    while j>=0:\n        st+=1\n        maxrix[i-j][j]=st\n        j-=1\n    i+=1\nfor i in range(m):",
        "detail": "Pok46old",
        "documentation": {}
    },
    {
        "label": "matrixpower",
        "kind": 2,
        "importPath": "Pok47",
        "description": "Pok47",
        "peekOfCode": "def matrixpower(a,b):\n    def rowtomatrix(r,c,m):\n        s=0\n        for i in range(len(r)):\n            s+=r[i]*m[i][c]\n        return s\n    matrixC = [[0 for _ in range(len(a))] for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(len(a)):\n            matrixC[i][j]=rowtomatrix(a[i],j,b)",
        "detail": "Pok47",
        "documentation": {}
    },
    {
        "label": "matrixA",
        "kind": 5,
        "importPath": "Pok47",
        "description": "Pok47",
        "peekOfCode": "matrixA = [[None for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n    matrixA[i]=[x for x in list(map(int,input().split()))]\nm=int(input())\nmatrixC = [[0 for _ in range(n)] for _ in range(n)]    \nmatrixC=matrixpower(matrixA,matrixA)\nfor _ in range(m-2):\n    matrixC=matrixpower(matrixC,matrixA)\nfor i in range(n):\n    print(*matrixC[i])",
        "detail": "Pok47",
        "documentation": {}
    },
    {
        "label": "matrixC",
        "kind": 5,
        "importPath": "Pok47",
        "description": "Pok47",
        "peekOfCode": "matrixC = [[0 for _ in range(n)] for _ in range(n)]    \nmatrixC=matrixpower(matrixA,matrixA)\nfor _ in range(m-2):\n    matrixC=matrixpower(matrixC,matrixA)\nfor i in range(n):\n    print(*matrixC[i])\n#–£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü\n# def rowtomatrix(r,c,m):\n#     s=0\n#     for i in range(len(r)):",
        "detail": "Pok47",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "pop14",
        "description": "pop14",
        "peekOfCode": "def get(namespace, var):\n    if (namespace in gvariable) and (var in gvariable[namespace]):\n        print(namespace)\n    else:\n        for key, value in gnamespace.items():\n            if namespace in value:\n                return get(key, var)\n        print(\"None\")\n    return\n# def get(namespace, var):",
        "detail": "pop14",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "pop14",
        "description": "pop14",
        "peekOfCode": "def create(namespace, parent):\n    if parent in gnamespace:\n        gnamespace[parent].append(namespace)\n        gnamespace[namespace] = []\n        gvariable[namespace] = []\n# def create(namespace, parent):\n#     global gnamespace\n#     global gvariable\n#     for key in gnamespace:\n#         if key == parent:",
        "detail": "pop14",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "pop14",
        "description": "pop14",
        "peekOfCode": "def add(namespace, var):\n    if namespace in gvariable:\n        gvariable[namespace].append(var)\n    else:\n        gvariable[namespace] = [var]\n# def add(namespace, var):\n#     global gvariable\n#     for key in gvariable:\n#         if key == namespace:\n#             gvariable[namespace].append(var)",
        "detail": "pop14",
        "documentation": {}
    },
    {
        "label": "gnamespace",
        "kind": 5,
        "importPath": "pop14",
        "description": "pop14",
        "peekOfCode": "gnamespace = {\"global\": []}\ngvariable = {}\ndef get(namespace, var):\n    if (namespace in gvariable) and (var in gvariable[namespace]):\n        print(namespace)\n    else:\n        for key, value in gnamespace.items():\n            if namespace in value:\n                return get(key, var)\n        print(\"None\")",
        "detail": "pop14",
        "documentation": {}
    },
    {
        "label": "gvariable",
        "kind": 5,
        "importPath": "pop14",
        "description": "pop14",
        "peekOfCode": "gvariable = {}\ndef get(namespace, var):\n    if (namespace in gvariable) and (var in gvariable[namespace]):\n        print(namespace)\n    else:\n        for key, value in gnamespace.items():\n            if namespace in value:\n                return get(key, var)\n        print(\"None\")\n    return",
        "detail": "pop14",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "pop14",
        "description": "pop14",
        "peekOfCode": "test = [\n    \"create a global\",\n    \"add a a1\",\n    \"add a a2\",\n    \"add a a3\",\n    \"create sub_a a\",\n    \"add sub_a a000\",\n    \"get a a3\",\n    \"get a a2\",\n    \"get a a1\",",
        "detail": "pop14",
        "documentation": {}
    },
    {
        "label": "Buffer",
        "kind": 6,
        "importPath": "pop15",
        "description": "pop15",
        "peekOfCode": "class Buffer:\n    def __init__(self):\n        # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤\n        self.buffer = []\n    def add(self, *a):\n        # –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n        for i in a:\n            self.buffer.append(i)\n            if len(self.buffer) == 5:\n                print(sum(self.buffer), end=\"\\n\")",
        "detail": "pop15",
        "documentation": {}
    },
    {
        "label": "buf",
        "kind": 5,
        "importPath": "pop15",
        "description": "pop15",
        "peekOfCode": "buf = Buffer()\nbuf.add(1, 2, 3)\nbuf.get_current_part()  # –≤–µ—Ä–Ω—É—Ç—å [1, 2, 3]\nbuf.add(4, 5, 6)  # print(15) ‚Äì –≤—ã–≤–æ–¥ —Å—É–º–º—ã –ø–µ—Ä–≤–æ–π –ø—è—Ç–µ—Ä–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤\nbuf.get_current_part()  # –≤–µ—Ä–Ω—É—Ç—å [6]\nbuf.add(7, 8, 9, 10)  # print(40) ‚Äì –≤—ã–≤–æ–¥ —Å—É–º–º—ã –≤—Ç–æ—Ä–æ–π –ø—è—Ç–µ—Ä–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤\nbuf.get_current_part()  # –≤–µ—Ä–Ω—É—Ç—å []\nbuf.add(\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n)  # print(5), print(5) ‚Äì –≤—ã–≤–æ–¥ —Å—É–º–º —Ç—Ä–µ—Ç—å–µ–π –∏ —á–µ—Ç–≤–µ—Ä—Ç–æ–π –ø—è—Ç–µ—Ä–∫–∏",
        "detail": "pop15",
        "documentation": {}
    },
    {
        "label": "islinkclass",
        "kind": 2,
        "importPath": "pop16",
        "description": "pop16",
        "peekOfCode": "def islinkclass(pr, pot):\n    if pr == pot or grafclass[pot].count(pr) != 0:\n        return True\n    else:\n        for i in grafclass[pot]:\n            if islinkclass(pr, i):\n                return True\n        return False\nfor _ in range(int(input())):\n    k = input().split()",
        "detail": "pop16",
        "documentation": {}
    },
    {
        "label": "checkdup",
        "kind": 2,
        "importPath": "pop16",
        "description": "pop16",
        "peekOfCode": "def checkdup(d):\n    return cls[d] is None or any(map(checkdup, cls[d]))\ncls = {d: set(b[1:]) for _ in range(int(input())) for d, *b in [input().split()]}\nfor _ in range(int(input())):\n    c = input()\n    if checkdup(c):\n        print(c)\n    cls[c] = None\n\"\"\"\n# grafclass = {}",
        "detail": "pop16",
        "documentation": {}
    },
    {
        "label": "grafclass",
        "kind": 5,
        "importPath": "pop16",
        "description": "pop16",
        "peekOfCode": "grafclass = {}\nlistExcecuted = []\ndef islinkclass(pr, pot):\n    if pr == pot or grafclass[pot].count(pr) != 0:\n        return True\n    else:\n        for i in grafclass[pot]:\n            if islinkclass(pr, i):\n                return True\n        return False",
        "detail": "pop16",
        "documentation": {}
    },
    {
        "label": "listExcecuted",
        "kind": 5,
        "importPath": "pop16",
        "description": "pop16",
        "peekOfCode": "listExcecuted = []\ndef islinkclass(pr, pot):\n    if pr == pot or grafclass[pot].count(pr) != 0:\n        return True\n    else:\n        for i in grafclass[pot]:\n            if islinkclass(pr, i):\n                return True\n        return False\nfor _ in range(int(input())):",
        "detail": "pop16",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "pop16",
        "description": "pop16",
        "peekOfCode": "res = []\nfor _ in range(int(input())):\n    listExcecuted.append(input())\nfor i in range(len(listExcecuted)):\n    for j in grafclass[listExcecuted[i]]:\n        for k in range(i):\n            if islinkclass(listExcecuted[k], j):\n                if listExcecuted[i] not in res:\n                    res.append((listExcecuted[i]))\n                break",
        "detail": "pop16",
        "documentation": {}
    },
    {
        "label": "cls",
        "kind": 5,
        "importPath": "pop16",
        "description": "pop16",
        "peekOfCode": "cls = {d: set(b[1:]) for _ in range(int(input())) for d, *b in [input().split()]}\nfor _ in range(int(input())):\n    c = input()\n    if checkdup(c):\n        print(c)\n    cls[c] = None\n\"\"\"\n# grafclass = {}\n# def islinkclass(pr, pot):\n#     if pr == pot or grafclass[pot].count(pr) != 0:",
        "detail": "pop16",
        "documentation": {}
    },
    {
        "label": "NonPositiveError",
        "kind": 6,
        "importPath": "pop21",
        "description": "pop21",
        "peekOfCode": "class NonPositiveError(Exception):\n    pass\nclass PositiveList(list):\n    def append(self, el):\n        if el <= 0:\n            raise (NonPositiveError)\n        else:\n            super().append(el)\nm = PositiveList()\nm.append(1)",
        "detail": "pop21",
        "documentation": {}
    },
    {
        "label": "PositiveList",
        "kind": 6,
        "importPath": "pop21",
        "description": "pop21",
        "peekOfCode": "class PositiveList(list):\n    def append(self, el):\n        if el <= 0:\n            raise (NonPositiveError)\n        else:\n            super().append(el)\nm = PositiveList()\nm.append(1)\nm.append(0)\nm.append(-1)",
        "detail": "pop21",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "pop21",
        "description": "pop21",
        "peekOfCode": "m = PositiveList()\nm.append(1)\nm.append(0)\nm.append(-1)\nprint(m)",
        "detail": "pop21",
        "documentation": {}
    },
    {
        "label": "testsimple",
        "kind": 2,
        "importPath": "pop23",
        "description": "pop23",
        "peekOfCode": "def testsimple(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef primes():\n    st = 2\n    while True:\n        if testsimple(st):\n            yield st",
        "detail": "pop23",
        "documentation": {}
    },
    {
        "label": "primes",
        "kind": 2,
        "importPath": "pop23",
        "description": "pop23",
        "peekOfCode": "def primes():\n    st = 2\n    while True:\n        if testsimple(st):\n            yield st\n        st += 1\nprint(list(itertools.takewhile(lambda x: x <= 31, primes())))\n# class multifilter:\n#     def judge_half(self, n):\n#         pos = 0",
        "detail": "pop23",
        "documentation": {}
    },
    {
        "label": "out",
        "kind": 5,
        "importPath": "pop24",
        "description": "pop24",
        "peekOfCode": "out = []\nfor s in os.walk(\"sample\"):\n    for i in s[-1]:\n        if i.endswith(\".py\"):\n            out.append(s[0].replace(\"\\\\\", \"/\"))\n            break\nwith open(\"ans.txt\", \"w\") as f:\n    f.write(str(\"\\n\".join(out)))\nprint(str(\"\\n\".join(out)))\n# with open(\"dataset_24465_4.txt\") as rd, open(\"dataset_24465_4o.txt\", \"w\") as wc:",
        "detail": "pop24",
        "documentation": {}
    },
    {
        "label": "mod_checker",
        "kind": 2,
        "importPath": "pop25",
        "description": "pop25",
        "peekOfCode": "def mod_checker(x, mod=0):\n    return lambda y: mod == y % x\nmod_3 = mod_checker(3)\nprint(mod_3(3))  # True\nprint(mod_3(4))  # False\nmod_3_1 = mod_checker(3, 1)\nprint(mod_3_1(4))  # True",
        "detail": "pop25",
        "documentation": {}
    },
    {
        "label": "mod_3",
        "kind": 5,
        "importPath": "pop25",
        "description": "pop25",
        "peekOfCode": "mod_3 = mod_checker(3)\nprint(mod_3(3))  # True\nprint(mod_3(4))  # False\nmod_3_1 = mod_checker(3, 1)\nprint(mod_3_1(4))  # True",
        "detail": "pop25",
        "documentation": {}
    },
    {
        "label": "mod_3_1",
        "kind": 5,
        "importPath": "pop25",
        "description": "pop25",
        "peekOfCode": "mod_3_1 = mod_checker(3, 1)\nprint(mod_3_1(4))  # True",
        "detail": "pop25",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "pop31",
        "description": "pop31",
        "peekOfCode": "s = input()\nt = input()\nprint(sum(1 for i in range(len(s)) if s.startswith(t, i)))\n# s, a, b = input(), input(), input()\n# c = 0\n# while True:\n#     if c > 1000:\n#         print(\"Impossible\")\n#         break\n#     else:",
        "detail": "pop31",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "pop31",
        "description": "pop31",
        "peekOfCode": "t = input()\nprint(sum(1 for i in range(len(s)) if s.startswith(t, i)))\n# s, a, b = input(), input(), input()\n# c = 0\n# while True:\n#     if c > 1000:\n#         print(\"Impossible\")\n#         break\n#     else:\n#         if s.find(a) == -1:",
        "detail": "pop31",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "pop32",
        "description": "pop32",
        "peekOfCode": "pattern = r\"\\b(\\w)(\\w)+?\"\nfor line in sys.stdin:\n    line = line.rstrip()\n    print(re.sub(pattern, r\"\\2\\1\", line))\n# —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å–ª–æ–≤–æ, —Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ –¥–≤—É—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–∞—Å—Ç–µ–π (—Ç–∞–Ω–¥–µ–º–Ω—ã–π –ø–æ–≤—Ç–æ—Ä).\npattern = r\".*\\b(\\w+)\\1\\b\"\nfor line in sys.stdin:\n    line = line.rstrip()\n    if re.match(pattern, line):\n        print(line)",
        "detail": "pop32",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "pop32",
        "description": "pop32",
        "peekOfCode": "pattern = r\".*\\b(\\w+)\\1\\b\"\nfor line in sys.stdin:\n    line = line.rstrip()\n    if re.match(pattern, line):\n        print(line)\n# –í—ã–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ \"cat\" –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Ä–∞–∑–∞.\npattern = r\".*(cat).*\\1\"\nfor line in sys.stdin:\n    line = line.rstrip()\n    if re.match(pattern, line):",
        "detail": "pop32",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "pop32",
        "description": "pop32",
        "peekOfCode": "pattern = r\".*(cat).*\\1\"\nfor line in sys.stdin:\n    line = line.rstrip()\n    if re.match(pattern, line):\n        print(\"------->\", line)",
        "detail": "pop32",
        "documentation": {}
    },
    {
        "label": "allUrl",
        "kind": 5,
        "importPath": "pop33",
        "description": "pop33",
        "peekOfCode": "allUrl = []\npattern = r\"<a href=.*//(.+)/\"\nwith open(\"pop33.html\", \"r\", encoding=\"utf-8\") as f:\n    while True:\n        i = f.readline()\n        if not i:\n            break\n        if re.match(pattern, i):\n            allUrl.extend(re.findall(pattern, i))\nprint(allUrl)",
        "detail": "pop33",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "pop33",
        "description": "pop33",
        "peekOfCode": "pattern = r\"<a href=.*//(.+)/\"\nwith open(\"pop33.html\", \"r\", encoding=\"utf-8\") as f:\n    while True:\n        i = f.readline()\n        if not i:\n            break\n        if re.match(pattern, i):\n            allUrl.extend(re.findall(pattern, i))\nprint(allUrl)\n# allUrl1 = []",
        "detail": "pop33",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "ProblemaIosipha",
        "description": "ProblemaIosipha",
        "peekOfCode": "n = int(input())\nk = int(input())\nstart = [i for i in range(1, n + 1)]\nc = 1\nwhile len(start) > 1:\n    c += 1\n    if c > k:\n        start.pop(0)\n    temp = start.pop(0)\n    start.append(temp)",
        "detail": "ProblemaIosipha",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "ProblemaIosipha",
        "description": "ProblemaIosipha",
        "peekOfCode": "k = int(input())\nstart = [i for i in range(1, n + 1)]\nc = 1\nwhile len(start) > 1:\n    c += 1\n    if c > k:\n        start.pop(0)\n    temp = start.pop(0)\n    start.append(temp)\n    if c == k:",
        "detail": "ProblemaIosipha",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "ProblemaIosipha",
        "description": "ProblemaIosipha",
        "peekOfCode": "start = [i for i in range(1, n + 1)]\nc = 1\nwhile len(start) > 1:\n    c += 1\n    if c > k:\n        start.pop(0)\n    temp = start.pop(0)\n    start.append(temp)\n    if c == k:\n        start.pop(0)",
        "detail": "ProblemaIosipha",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "ProblemaIosipha",
        "description": "ProblemaIosipha",
        "peekOfCode": "c = 1\nwhile len(start) > 1:\n    c += 1\n    if c > k:\n        start.pop(0)\n    temp = start.pop(0)\n    start.append(temp)\n    if c == k:\n        start.pop(0)\n        c = 1",
        "detail": "ProblemaIosipha",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "PT4_1",
        "description": "PT4_1",
        "peekOfCode": "n = 7\n# -- –≤–∞—à –∫–æ–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç—É—Ç\nresult = sum(i for i in range(n) if i % 2 != 0)\n# -- –≤–∞—à –∫–æ–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç—É—Ç\nprint(result)",
        "detail": "PT4_1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "PT4_1",
        "description": "PT4_1",
        "peekOfCode": "result = sum(i for i in range(n) if i % 2 != 0)\n# -- –≤–∞—à –∫–æ–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç—É—Ç\nprint(result)",
        "detail": "PT4_1",
        "documentation": {}
    },
    {
        "label": "merge",
        "kind": 2,
        "importPath": "recSortSli",
        "description": "recSortSli",
        "peekOfCode": "def merge(left, right):\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1",
        "detail": "recSortSli",
        "documentation": {}
    },
    {
        "label": "recSortSli",
        "kind": 2,
        "importPath": "recSortSli",
        "description": "recSortSli",
        "peekOfCode": "def recSortSli(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        mid = len(lst) // 2\n        left = recSortSli(lst[:mid])\n        right = recSortSli(lst[mid:])\n        return merge(left, right)\nlst = list(map(int, inp.split()))\nprint(*recSortSli(lst))",
        "detail": "recSortSli",
        "documentation": {}
    },
    {
        "label": "inp",
        "kind": 5,
        "importPath": "recSortSli",
        "description": "recSortSli",
        "peekOfCode": "inp = \"8 11 -6 3 0 1 1\"\ndef merge(left, right):\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])",
        "detail": "recSortSli",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": "recSortSli",
        "description": "recSortSli",
        "peekOfCode": "lst = list(map(int, inp.split()))\nprint(*recSortSli(lst))",
        "detail": "recSortSli",
        "documentation": {}
    },
    {
        "label": "print_thread_id",
        "kind": 2,
        "importPath": "Stepik",
        "description": "Stepik",
        "peekOfCode": "def print_thread_id():\n    time.sleep(1)\n    if not hasattr(thread_local_storage, \"thread_id\"):\n        thread_local_storage.thread_id = threading.get_ident()\n    print(f\"Thread ID: {thread_local_storage.thread_id}\")\nthread_local_storage = threading.local()\nthreads = [threading.Thread(target=print_thread_id) for _ in range(5)]\nfor thread in threads:\n    thread.start()\nfor thread in threads:",
        "detail": "Stepik",
        "documentation": {}
    },
    {
        "label": "thread_local_storage",
        "kind": 5,
        "importPath": "Stepik",
        "description": "Stepik",
        "peekOfCode": "thread_local_storage = threading.local()\nthreads = [threading.Thread(target=print_thread_id) for _ in range(5)]\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()",
        "detail": "Stepik",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "Stepik",
        "description": "Stepik",
        "peekOfCode": "threads = [threading.Thread(target=print_thread_id) for _ in range(5)]\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()",
        "detail": "Stepik",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "kind": 6,
        "importPath": "Test",
        "description": "Test",
        "peekOfCode": "class Iterator:\n    def __init__(self, text):\n        self.text = text.upper()\n        self.index = 0\n    def __iter__(self):\n        return self\n    def __next__(self):\n        try:\n            result = self.text[self.index]\n        except IndexError:",
        "detail": "Test",
        "documentation": {}
    },
    {
        "label": "phrase",
        "kind": 5,
        "importPath": "Test",
        "description": "Test",
        "peekOfCode": "phrase = Iterator(\"Qwerty\")\nit_1 = iter(phrase)\nit_2 = iter(phrase)\nfor i in it_1:\n    print(i)\nfor i in it_1:\n    print(i)\nfor i in it_2:\n    print(i)",
        "detail": "Test",
        "documentation": {}
    },
    {
        "label": "it_1",
        "kind": 5,
        "importPath": "Test",
        "description": "Test",
        "peekOfCode": "it_1 = iter(phrase)\nit_2 = iter(phrase)\nfor i in it_1:\n    print(i)\nfor i in it_1:\n    print(i)\nfor i in it_2:\n    print(i)",
        "detail": "Test",
        "documentation": {}
    },
    {
        "label": "it_2",
        "kind": 5,
        "importPath": "Test",
        "description": "Test",
        "peekOfCode": "it_2 = iter(phrase)\nfor i in it_1:\n    print(i)\nfor i in it_1:\n    print(i)\nfor i in it_2:\n    print(i)",
        "detail": "Test",
        "documentation": {}
    },
    {
        "label": "AppSettings",
        "kind": 6,
        "importPath": "Test_class",
        "description": "Test_class",
        "peekOfCode": "class AppSettings:\n    __instance = None\n    def __new__(cls):\n        if not cls.__instance:\n            cls.__instance = super(AppSettings, cls).__new__(cls)\n            # –õ–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ–π)\n            cls.__instance.initialize_settings()\n        return cls.__instance\n    def initialize_settings(self):\n        # –õ–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
        "detail": "Test_class",
        "documentation": {}
    },
    {
        "label": "app_settings_1",
        "kind": 5,
        "importPath": "Test_class",
        "description": "Test_class",
        "peekOfCode": "app_settings_1 = AppSettings.get_app()\napp_settings_2 = AppSettings()\nprint(app_settings_1 is app_settings_2)  # –í—ã–≤–µ–¥–µ—Ç True\n# –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º\nprint(app_settings_1.app_name)  # –í—ã–≤–µ–¥–µ—Ç \"MyApp\"\nprint(app_settings_2.app_name)  # –í—ã–≤–µ–¥–µ—Ç \"MyApp\"\nprint(app_settings_1.debug_mode)  # –í—ã–≤–µ–¥–µ—Ç False\nprint(app_settings_2.debug_mode)  # –í—ã–≤–µ–¥–µ—Ç False",
        "detail": "Test_class",
        "documentation": {}
    },
    {
        "label": "app_settings_2",
        "kind": 5,
        "importPath": "Test_class",
        "description": "Test_class",
        "peekOfCode": "app_settings_2 = AppSettings()\nprint(app_settings_1 is app_settings_2)  # –í—ã–≤–µ–¥–µ—Ç True\n# –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º\nprint(app_settings_1.app_name)  # –í—ã–≤–µ–¥–µ—Ç \"MyApp\"\nprint(app_settings_2.app_name)  # –í—ã–≤–µ–¥–µ—Ç \"MyApp\"\nprint(app_settings_1.debug_mode)  # –í—ã–≤–µ–¥–µ—Ç False\nprint(app_settings_2.debug_mode)  # –í—ã–≤–µ–¥–µ—Ç False",
        "detail": "Test_class",
        "documentation": {}
    },
    {
        "label": "domen",
        "kind": 2,
        "importPath": "Test_re",
        "description": "Test_re",
        "peekOfCode": "def domen(s):\n    res = re.findall(pattern, s)\n    print(res)\n    return None if not res else res[0]\nassert domen(dim[0]) == \"stepik.org\"\nassert domen(dim[1]) == \"stepik.org\"\nassert domen(dim[2]) == \"neerc.ifmo.ru\"\nassert domen(dim[3]) == \"mail.ru\"\nassert domen(dim[4]) == \"ya.ru\"\nassert domen(dim[5]) == \"www.ya.ru\"",
        "detail": "Test_re",
        "documentation": {}
    },
    {
        "label": "dim",
        "kind": 5,
        "importPath": "Test_re",
        "description": "Test_re",
        "peekOfCode": "dim = [\n    '<a href=\"http://stepik.org/courses\">',\n    \"<a href='https://stepik.org'>\",\n    \"<a href='http://neerc.ifmo.ru:1345'>\",\n    '<a href=\"ftp://mail.ru/distib\" >',\n    '<a href=\"ya.ru\">',\n    '<a href=\"www.ya.ru\">',\n    '<a href=\"../skip_relative_links\">',\n    '<a href=\"ya.ru\">',\n    '<a href=\"www.ya.ru\">',",
        "detail": "Test_re",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "Test_re",
        "description": "Test_re",
        "peekOfCode": "pattern = r\"<a href=.*//(.+)[/|\\'|\\:|]\"\ndef domen(s):\n    res = re.findall(pattern, s)\n    print(res)\n    return None if not res else res[0]\nassert domen(dim[0]) == \"stepik.org\"\nassert domen(dim[1]) == \"stepik.org\"\nassert domen(dim[2]) == \"neerc.ifmo.ru\"\nassert domen(dim[3]) == \"mail.ru\"\nassert domen(dim[4]) == \"ya.ru\"",
        "detail": "Test_re",
        "documentation": {}
    },
    {
        "label": "my_func",
        "kind": 2,
        "importPath": "theory",
        "description": "theory",
        "peekOfCode": "def my_func(a, /, b):\n    print(f\"{a=}, {b=}\")\nmy_func(a=10, 20)",
        "detail": "theory",
        "documentation": {}
    },
    {
        "label": "sum_array",
        "kind": 2,
        "importPath": "thread136",
        "description": "thread136",
        "peekOfCode": "def sum_array():\n    return sum(array)\n# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –º–∞—Å—Å–∏–≤\ndef thread_task():\n    global total_sum\n    total_sum=sum_array()\n# –°–æ–∑–¥–∞–π—Ç–µ –ø–æ—Ç–æ–∫\nthread = threading.Thread(target=thread_task)\n# –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ—Ç–æ–∫\nthread.start()",
        "detail": "thread136",
        "documentation": {}
    },
    {
        "label": "thread_task",
        "kind": 2,
        "importPath": "thread136",
        "description": "thread136",
        "peekOfCode": "def thread_task():\n    global total_sum\n    total_sum=sum_array()\n# –°–æ–∑–¥–∞–π—Ç–µ –ø–æ—Ç–æ–∫\nthread = threading.Thread(target=thread_task)\n# –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ—Ç–æ–∫\nthread.start()\n# –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞\nthread.join()\n# –ù–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ —Å—É–º–º—É –º–∞—Å—Å–∏–≤–∞ array",
        "detail": "thread136",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "thread136",
        "description": "thread136",
        "peekOfCode": "array = [123456, 7890123, 987654, 114455, 995423, 1000000]\n# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\ntotal_sum = 0\n# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—É–º–º—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞\ndef sum_array():\n    return sum(array)\n# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –º–∞—Å—Å–∏–≤\ndef thread_task():\n    global total_sum\n    total_sum=sum_array()",
        "detail": "thread136",
        "documentation": {}
    },
    {
        "label": "total_sum",
        "kind": 5,
        "importPath": "thread136",
        "description": "thread136",
        "peekOfCode": "total_sum = 0\n# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—É–º–º—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞\ndef sum_array():\n    return sum(array)\n# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –º–∞—Å—Å–∏–≤\ndef thread_task():\n    global total_sum\n    total_sum=sum_array()\n# –°–æ–∑–¥–∞–π—Ç–µ –ø–æ—Ç–æ–∫\nthread = threading.Thread(target=thread_task)",
        "detail": "thread136",
        "documentation": {}
    },
    {
        "label": "thread",
        "kind": 5,
        "importPath": "thread136",
        "description": "thread136",
        "peekOfCode": "thread = threading.Thread(target=thread_task)\n# –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ—Ç–æ–∫\nthread.start()\n# –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞\nthread.join()\n# –ù–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ —Å—É–º–º—É –º–∞—Å—Å–∏–≤–∞ array\nprint(total_sum)",
        "detail": "thread136",
        "documentation": {}
    },
    {
        "label": "thread_sum",
        "kind": 2,
        "importPath": "thread137",
        "description": "thread137",
        "peekOfCode": "def thread_sum(*args):\n    global total_sum\n    total_sum=_sum(args[0],args[1])\ndef thread_mul(*args):\n    global total_mul\n    total_mul=_mul(args[0],args[1])\nthreadS = threading.Thread(target=thread_sum,args=(1,1000))\nthreadM = threading.Thread(target=thread_mul,args=(1,10))\nthreadS.start()\nthreadM.start()",
        "detail": "thread137",
        "documentation": {}
    },
    {
        "label": "thread_mul",
        "kind": 2,
        "importPath": "thread137",
        "description": "thread137",
        "peekOfCode": "def thread_mul(*args):\n    global total_mul\n    total_mul=_mul(args[0],args[1])\nthreadS = threading.Thread(target=thread_sum,args=(1,1000))\nthreadM = threading.Thread(target=thread_mul,args=(1,10))\nthreadS.start()\nthreadM.start()\n# –í—ã–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã –ø–æ—Ç–æ–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Å–ª–æ–≤–∏—è–º –∑–∞–¥–∞—á–∏\nprint(f\"–°—É–º–º–∞ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 1000: {total_sum}\")\nprint(f\"–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10: {total_mul}\")",
        "detail": "thread137",
        "documentation": {}
    },
    {
        "label": "total_sum",
        "kind": 5,
        "importPath": "thread137",
        "description": "thread137",
        "peekOfCode": "total_sum = 0\ntotal_mul = 1\ndef _sum(start,end):\n    return sum([i for i in range(start,end+1)])\ndef _mul(start,end):\n    t=1\n    for i in range(start,end+1):\n        t*=i\n    return t\n# –°–æ–∑–¥–∞–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ—Ç–æ–∫–∏ —Å —Ü–µ–ª–µ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏",
        "detail": "thread137",
        "documentation": {}
    },
    {
        "label": "total_mul",
        "kind": 5,
        "importPath": "thread137",
        "description": "thread137",
        "peekOfCode": "total_mul = 1\ndef _sum(start,end):\n    return sum([i for i in range(start,end+1)])\ndef _mul(start,end):\n    t=1\n    for i in range(start,end+1):\n        t*=i\n    return t\n# –°–æ–∑–¥–∞–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ—Ç–æ–∫–∏ —Å —Ü–µ–ª–µ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏\ndef thread_sum(*args):",
        "detail": "thread137",
        "documentation": {}
    },
    {
        "label": "threadS",
        "kind": 5,
        "importPath": "thread137",
        "description": "thread137",
        "peekOfCode": "threadS = threading.Thread(target=thread_sum,args=(1,1000))\nthreadM = threading.Thread(target=thread_mul,args=(1,10))\nthreadS.start()\nthreadM.start()\n# –í—ã–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã –ø–æ—Ç–æ–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Å–ª–æ–≤–∏—è–º –∑–∞–¥–∞—á–∏\nprint(f\"–°—É–º–º–∞ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 1000: {total_sum}\")\nprint(f\"–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10: {total_mul}\")",
        "detail": "thread137",
        "documentation": {}
    },
    {
        "label": "threadM",
        "kind": 5,
        "importPath": "thread137",
        "description": "thread137",
        "peekOfCode": "threadM = threading.Thread(target=thread_mul,args=(1,10))\nthreadS.start()\nthreadM.start()\n# –í—ã–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã –ø–æ—Ç–æ–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Å–ª–æ–≤–∏—è–º –∑–∞–¥–∞—á–∏\nprint(f\"–°—É–º–º–∞ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 1000: {total_sum}\")\nprint(f\"–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10: {total_mul}\")",
        "detail": "thread137",
        "documentation": {}
    },
    {
        "label": "sum_even_numbers",
        "kind": 2,
        "importPath": "thread138",
        "description": "thread138",
        "peekOfCode": "def sum_even_numbers():\n    global sum_even\n    sum_even=sum([n for n in numbers if not n%2])\n# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª\ndef sum_odd_numbers():\n    global sum_odd\n    sum_odd=sum([n for n in numbers if n%2])\n# –°–æ–∑–¥–∞–π—Ç–µ –ø–æ—Ç–æ–∫–∏\nthread_even = threading.Thread(target=sum_even_numbers)\nthread_odd = threading.Thread(target=sum_odd_numbers)",
        "detail": "thread138",
        "documentation": {}
    },
    {
        "label": "sum_odd_numbers",
        "kind": 2,
        "importPath": "thread138",
        "description": "thread138",
        "peekOfCode": "def sum_odd_numbers():\n    global sum_odd\n    sum_odd=sum([n for n in numbers if n%2])\n# –°–æ–∑–¥–∞–π—Ç–µ –ø–æ—Ç–æ–∫–∏\nthread_even = threading.Thread(target=sum_even_numbers)\nthread_odd = threading.Thread(target=sum_odd_numbers)\n# –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ—Ç–æ–∫–∏\nthread_even.start()\nthread_odd.start()\n# –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–æ–≤",
        "detail": "thread138",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "thread138",
        "description": "thread138",
        "peekOfCode": "numbers = [456, 467, 961, 561, 512, 740, 6412, 464, 444, 102, 456, 347, 905, 854, 901, 326, 267, 236, 790, 235, 745,\n           769, 467, 734, 745, 895, 445, 312, 123, 451, 523, 567, 344, 234]\n# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—É–º–º\nsum_even = 0\nsum_odd = 0\n# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª\ndef sum_even_numbers():\n    global sum_even\n    sum_even=sum([n for n in numbers if not n%2])\n# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª",
        "detail": "thread138",
        "documentation": {}
    },
    {
        "label": "sum_even",
        "kind": 5,
        "importPath": "thread138",
        "description": "thread138",
        "peekOfCode": "sum_even = 0\nsum_odd = 0\n# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª\ndef sum_even_numbers():\n    global sum_even\n    sum_even=sum([n for n in numbers if not n%2])\n# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª\ndef sum_odd_numbers():\n    global sum_odd\n    sum_odd=sum([n for n in numbers if n%2])",
        "detail": "thread138",
        "documentation": {}
    },
    {
        "label": "sum_odd",
        "kind": 5,
        "importPath": "thread138",
        "description": "thread138",
        "peekOfCode": "sum_odd = 0\n# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª\ndef sum_even_numbers():\n    global sum_even\n    sum_even=sum([n for n in numbers if not n%2])\n# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª\ndef sum_odd_numbers():\n    global sum_odd\n    sum_odd=sum([n for n in numbers if n%2])\n# –°–æ–∑–¥–∞–π—Ç–µ –ø–æ—Ç–æ–∫–∏",
        "detail": "thread138",
        "documentation": {}
    },
    {
        "label": "thread_even",
        "kind": 5,
        "importPath": "thread138",
        "description": "thread138",
        "peekOfCode": "thread_even = threading.Thread(target=sum_even_numbers)\nthread_odd = threading.Thread(target=sum_odd_numbers)\n# –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ—Ç–æ–∫–∏\nthread_even.start()\nthread_odd.start()\n# –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–æ–≤\nthread_even.join()\nthread_odd.join()\n# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\nprint(f\"–°—É–º–º–∞ —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª: {sum_even}\")",
        "detail": "thread138",
        "documentation": {}
    },
    {
        "label": "thread_odd",
        "kind": 5,
        "importPath": "thread138",
        "description": "thread138",
        "peekOfCode": "thread_odd = threading.Thread(target=sum_odd_numbers)\n# –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ—Ç–æ–∫–∏\nthread_even.start()\nthread_odd.start()\n# –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–æ–≤\nthread_even.join()\nthread_odd.join()\n# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\nprint(f\"–°—É–º–º–∞ —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª: {sum_even}\")\nprint(f\"–°—É–º–º–∞ –Ω–µ—á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª: {sum_odd}\")",
        "detail": "thread138",
        "documentation": {}
    },
    {
        "label": "sort_numbers_descending",
        "kind": 2,
        "importPath": "thread139",
        "description": "thread139",
        "peekOfCode": "def sort_numbers_descending():\n    #–î–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é\n    array_descending.sort(reverse=True)\ndef sort_numbers_ascending():\n    #–î–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é\n    array_ascending.sort()\ndef sort_symbols():\n    #–î–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ\n    symbols_array.sort()\n# –°–æ–∑–¥–∞–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ—Ç–æ–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏",
        "detail": "thread139",
        "documentation": {}
    },
    {
        "label": "sort_numbers_ascending",
        "kind": 2,
        "importPath": "thread139",
        "description": "thread139",
        "peekOfCode": "def sort_numbers_ascending():\n    #–î–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é\n    array_ascending.sort()\ndef sort_symbols():\n    #–î–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ\n    symbols_array.sort()\n# –°–æ–∑–¥–∞–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ—Ç–æ–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏\nthread1 = threading.Thread(target=sort_numbers_descending)\nthread2 = threading.Thread(target=sort_numbers_ascending)\nthread3 = threading.Thread(target=sort_symbols)",
        "detail": "thread139",
        "documentation": {}
    },
    {
        "label": "sort_symbols",
        "kind": 2,
        "importPath": "thread139",
        "description": "thread139",
        "peekOfCode": "def sort_symbols():\n    #–î–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ\n    symbols_array.sort()\n# –°–æ–∑–¥–∞–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ—Ç–æ–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏\nthread1 = threading.Thread(target=sort_numbers_descending)\nthread2 = threading.Thread(target=sort_numbers_ascending)\nthread3 = threading.Thread(target=sort_symbols)\nthread1.start()\nthread2.start()\nthread3.start()",
        "detail": "thread139",
        "documentation": {}
    },
    {
        "label": "array_descending",
        "kind": 5,
        "importPath": "thread139",
        "description": "thread139",
        "peekOfCode": "array_descending = [733, 725, 389, 606, 544, 526, 496, 448, 345, 239]\narray_ascending = [124, 168, 350, 501, 389, 419, 428, 662, 760, 829]\nsymbols_array = ['g', 'e', 'k', 'a', 'w', 'z', 'o', 'b', 'm', 'l', 'h', 'n', 'd', 's', 'q']\n# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–æ–≤\ndef sort_numbers_descending():\n    #–î–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é\n    array_descending.sort(reverse=True)\ndef sort_numbers_ascending():\n    #–î–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é\n    array_ascending.sort()",
        "detail": "thread139",
        "documentation": {}
    },
    {
        "label": "array_ascending",
        "kind": 5,
        "importPath": "thread139",
        "description": "thread139",
        "peekOfCode": "array_ascending = [124, 168, 350, 501, 389, 419, 428, 662, 760, 829]\nsymbols_array = ['g', 'e', 'k', 'a', 'w', 'z', 'o', 'b', 'm', 'l', 'h', 'n', 'd', 's', 'q']\n# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–æ–≤\ndef sort_numbers_descending():\n    #–î–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é\n    array_descending.sort(reverse=True)\ndef sort_numbers_ascending():\n    #–î–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é\n    array_ascending.sort()\ndef sort_symbols():",
        "detail": "thread139",
        "documentation": {}
    },
    {
        "label": "symbols_array",
        "kind": 5,
        "importPath": "thread139",
        "description": "thread139",
        "peekOfCode": "symbols_array = ['g', 'e', 'k', 'a', 'w', 'z', 'o', 'b', 'm', 'l', 'h', 'n', 'd', 's', 'q']\n# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–æ–≤\ndef sort_numbers_descending():\n    #–î–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é\n    array_descending.sort(reverse=True)\ndef sort_numbers_ascending():\n    #–î–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é\n    array_ascending.sort()\ndef sort_symbols():\n    #–î–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ",
        "detail": "thread139",
        "documentation": {}
    },
    {
        "label": "thread1",
        "kind": 5,
        "importPath": "thread139",
        "description": "thread139",
        "peekOfCode": "thread1 = threading.Thread(target=sort_numbers_descending)\nthread2 = threading.Thread(target=sort_numbers_ascending)\nthread3 = threading.Thread(target=sort_symbols)\nthread1.start()\nthread2.start()\nthread3.start()\n# –í—ã–≤–µ–¥–µ—Ç–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã\nprint(f\"–ú–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª (–ø–æ —É–±—ã–≤–∞–Ω–∏—é): {array_descending}\")\nprint(f\"–ú–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é): {array_ascending}\")\nprint(f\"–ú–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ (–ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫): {symbols_array}\")",
        "detail": "thread139",
        "documentation": {}
    },
    {
        "label": "thread2",
        "kind": 5,
        "importPath": "thread139",
        "description": "thread139",
        "peekOfCode": "thread2 = threading.Thread(target=sort_numbers_ascending)\nthread3 = threading.Thread(target=sort_symbols)\nthread1.start()\nthread2.start()\nthread3.start()\n# –í—ã–≤–µ–¥–µ—Ç–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã\nprint(f\"–ú–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª (–ø–æ —É–±—ã–≤–∞–Ω–∏—é): {array_descending}\")\nprint(f\"–ú–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é): {array_ascending}\")\nprint(f\"–ú–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ (–ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫): {symbols_array}\")",
        "detail": "thread139",
        "documentation": {}
    },
    {
        "label": "thread3",
        "kind": 5,
        "importPath": "thread139",
        "description": "thread139",
        "peekOfCode": "thread3 = threading.Thread(target=sort_symbols)\nthread1.start()\nthread2.start()\nthread3.start()\n# –í—ã–≤–µ–¥–µ—Ç–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã\nprint(f\"–ú–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª (–ø–æ —É–±—ã–≤–∞–Ω–∏—é): {array_descending}\")\nprint(f\"–ú–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é): {array_ascending}\")\nprint(f\"–ú–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ (–ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫): {symbols_array}\")",
        "detail": "thread139",
        "documentation": {}
    },
    {
        "label": "my_func",
        "kind": 2,
        "importPath": "thread1513",
        "description": "thread1513",
        "peekOfCode": "def my_func(i):\n    print(f\"–ü–æ—Ç–æ–∫ {i} –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è\")\n    time.sleep(1)\n    print(f\"–ü–æ—Ç–æ–∫ {i} –∑–∞–∫–æ–Ω—á–∏–ª —Å–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\")\nthreads = []\nfor i in range(1, 4):\n    thread = threading.Thread(target=my_func, args=(i, ))\n    threads.append(thread)\nfor thread in threads:\n    thread.start()",
        "detail": "thread1513",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "thread1513",
        "description": "thread1513",
        "peekOfCode": "threads = []\nfor i in range(1, 4):\n    thread = threading.Thread(target=my_func, args=(i, ))\n    threads.append(thread)\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\nprint(f\"{threading.main_thread().name} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\")",
        "detail": "thread1513",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 2,
        "importPath": "thread1514",
        "description": "thread1514",
        "peekOfCode": "def f1():\n    for i in range(1, 6):\n        time.sleep(.5)\n        print(i)\ndef f2():\n    for i in range(6, 11):\n        time.sleep(1)\n        print(i)\n#–°–æ–∑–¥–∞–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ—Ç–æ–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞—á–∏\nthread1 = threading.Thread(target=f1)",
        "detail": "thread1514",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 2,
        "importPath": "thread1514",
        "description": "thread1514",
        "peekOfCode": "def f2():\n    for i in range(6, 11):\n        time.sleep(1)\n        print(i)\n#–°–æ–∑–¥–∞–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ—Ç–æ–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞—á–∏\nthread1 = threading.Thread(target=f1)\nthread2 = threading.Thread(target=f2)\nthread1.start()\nthread2.start()\n#–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤",
        "detail": "thread1514",
        "documentation": {}
    },
    {
        "label": "thread1",
        "kind": 5,
        "importPath": "thread1514",
        "description": "thread1514",
        "peekOfCode": "thread1 = threading.Thread(target=f1)\nthread2 = threading.Thread(target=f2)\nthread1.start()\nthread2.start()\n#–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤\nthread1.join()\nthread2.join()\n#–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –ø–æ—Ç–æ–∫–æ–≤\nprint(\"–û–±–∞ –ø–æ—Ç–æ–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.\")",
        "detail": "thread1514",
        "documentation": {}
    },
    {
        "label": "thread2",
        "kind": 5,
        "importPath": "thread1514",
        "description": "thread1514",
        "peekOfCode": "thread2 = threading.Thread(target=f2)\nthread1.start()\nthread2.start()\n#–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤\nthread1.join()\nthread2.join()\n#–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –ø–æ—Ç–æ–∫–æ–≤\nprint(\"–û–±–∞ –ø–æ—Ç–æ–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.\")",
        "detail": "thread1514",
        "documentation": {}
    },
    {
        "label": "task1",
        "kind": 2,
        "importPath": "thread1613",
        "description": "thread1613",
        "peekOfCode": "def task1():\n    for n in range(1,6):\n        print(n)\ndef task2():\n    for b in 'abcde':\n        print(b)\ndef main():    \n    thread1 = Thread(target=task1)\n    thread1.start()\n    thread1.join()",
        "detail": "thread1613",
        "documentation": {}
    },
    {
        "label": "task2",
        "kind": 2,
        "importPath": "thread1613",
        "description": "thread1613",
        "peekOfCode": "def task2():\n    for b in 'abcde':\n        print(b)\ndef main():    \n    thread1 = Thread(target=task1)\n    thread1.start()\n    thread1.join()\n    thread2 = Thread(target=task2)\n    thread2.start()\n    thread2.join()",
        "detail": "thread1613",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "thread1613",
        "description": "thread1613",
        "peekOfCode": "def main():    \n    thread1 = Thread(target=task1)\n    thread1.start()\n    thread1.join()\n    thread2 = Thread(target=task2)\n    thread2.start()\n    thread2.join()\n    print(\"–ì–æ—Ç–æ–≤–æ!\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "thread1613",
        "documentation": {}
    },
    {
        "label": "worker2",
        "kind": 2,
        "importPath": "thread1713",
        "description": "thread1713",
        "peekOfCode": "def worker2():\n    print(f\"–ü–æ—Ç–æ–∫ {current_thread().name} –∑–∞–ø—É—Å—Ç–∏–ª—Å—è.\")\n    time.sleep(2)\ndef worker3():\n    print(f\"–ü–æ—Ç–æ–∫ {current_thread().name} –∑–∞–ø—É—Å—Ç–∏–ª—Å—è.\")\n    time.sleep(3)\n# –ù–∞–ø–∏—à–∏—Ç–µ –∏ –≤—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é main()\ndef main():\n    t1 = Thread(target=worker2, name=\"A\")\n    t2 = Thread(target=worker3, name=\"B\")",
        "detail": "thread1713",
        "documentation": {}
    },
    {
        "label": "worker3",
        "kind": 2,
        "importPath": "thread1713",
        "description": "thread1713",
        "peekOfCode": "def worker3():\n    print(f\"–ü–æ—Ç–æ–∫ {current_thread().name} –∑–∞–ø—É—Å—Ç–∏–ª—Å—è.\")\n    time.sleep(3)\n# –ù–∞–ø–∏—à–∏—Ç–µ –∏ –≤—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é main()\ndef main():\n    t1 = Thread(target=worker2, name=\"A\")\n    t2 = Thread(target=worker3, name=\"B\")\n    t1.start()\n    t2.start()\n    t1.join(timeout=2.1)",
        "detail": "thread1713",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "thread1713",
        "description": "thread1713",
        "peekOfCode": "def main():\n    t1 = Thread(target=worker2, name=\"A\")\n    t2 = Thread(target=worker3, name=\"B\")\n    t1.start()\n    t2.start()\n    t1.join(timeout=2.1)\n    if t2.is_alive():\n        print(f\"–ü–æ—Ç–æ–∫ {t2.name} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "thread1713",
        "documentation": {}
    },
    {
        "label": "task",
        "kind": 2,
        "importPath": "thread1815",
        "description": "thread1815",
        "peekOfCode": "def task():\n    time.sleep(2)\n    print(f\"–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è {current_thread().name}\")\n# –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤—ã—Ö –∏–º–µ–Ω\n# –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—à–∏—Ç –≤ –∑–∞–¥–∞—á—É\ncode_names = [\n    \"Alpha\",\n    \"India\",\n    \"Hotel\",\n    \"Delta\",",
        "detail": "thread1815",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "thread1815",
        "description": "thread1815",
        "peekOfCode": "def main():\n    for n in range(15):\n        p = Thread(target=task)\n        p.start()\n        print(f\"–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è –ø–æ—Ç–æ–∫–∞: {p.name}\")\n        p.name = code_names[n]\n        print(f\"–ù–æ–≤–æ–µ –∏–º—è –ø–æ—Ç–æ–∫–∞: {p.name}\")\nmain()",
        "detail": "thread1815",
        "documentation": {}
    },
    {
        "label": "code_names",
        "kind": 5,
        "importPath": "thread1815",
        "description": "thread1815",
        "peekOfCode": "code_names = [\n    \"Alpha\",\n    \"India\",\n    \"Hotel\",\n    \"Delta\",\n    \"Bravo\",\n    \"Juliet\",\n    \"Golf\",\n    \"Echo\",\n    \"Charlie\",",
        "detail": "thread1815",
        "documentation": {}
    },
    {
        "label": "mission",
        "kind": 2,
        "importPath": "thread1816",
        "description": "thread1816",
        "peekOfCode": "def mission(mission_name):\n    print(f\"[{mission_name}] –ú–∏—Å—Å–∏—è –Ω–∞—á–∞–ª–∞—Å—å.\")\n    time.sleep(random.randint(1, 3))\n    print(f\"[{mission_name}] –ú–∏—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\")\ndef main():\n    plst = []\n    for m, mv in missions.items():\n        p = Thread(target=mission, args=(mv,), name=m)\n        print(f\"[{p.name} ({mv})] –°—Ç–∞—Ç—É—Å –º–∏—Å—Å–∏–∏ –¥–æ –∑–∞–ø—É—Å–∫–∞: {p.is_alive()}\")\n        plst.append(p)",
        "detail": "thread1816",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "thread1816",
        "description": "thread1816",
        "peekOfCode": "def main():\n    plst = []\n    for m, mv in missions.items():\n        p = Thread(target=mission, args=(mv,), name=m)\n        print(f\"[{p.name} ({mv})] –°—Ç–∞—Ç—É—Å –º–∏—Å—Å–∏–∏ –¥–æ –∑–∞–ø—É—Å–∫–∞: {p.is_alive()}\")\n        plst.append(p)\n        p.start()\n        print(f\"[{p.name} ({mv})] –ú–∏—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞: {p.is_alive()}\")\n    while len(plst) > 0:\n        for p in plst:",
        "detail": "thread1816",
        "documentation": {}
    },
    {
        "label": "missions",
        "kind": 5,
        "importPath": "thread1816",
        "description": "thread1816",
        "peekOfCode": "missions = {\n    \"Thread-Scan\": \"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\",\n    \"Thread-Hack\": \"–í–∑–ª–æ–º —Å–∏—Å—Ç–µ–º—ã\",\n    # ...,\n}\n# –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤\ndef mission(mission_name):\n    print(f\"[{mission_name}] –ú–∏—Å—Å–∏—è –Ω–∞—á–∞–ª–∞—Å—å.\")\n    time.sleep(random.randint(1, 3))\n    print(f\"[{mission_name}] –ú–∏—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\")",
        "detail": "thread1816",
        "documentation": {}
    },
    {
        "label": "print_thread_id",
        "kind": 2,
        "importPath": "thread1913",
        "description": "thread1913",
        "peekOfCode": "def print_thread_id():\n    time.sleep(1)\n    if not hasattr(thread_local_storage, \"thread_id\"):\n        thread_local_storage.thread_id = threading.get_ident()\n    print(f\"Thread ID: {thread_local_storage.thread_id}\")\nthread_local_storage = threading.local()\nthreads = [threading.Thread(target=print_thread_id) for _ in range(5)]\nfor thread in threads:\n    thread.start()\nfor thread in threads:",
        "detail": "thread1913",
        "documentation": {}
    },
    {
        "label": "thread_local_storage",
        "kind": 5,
        "importPath": "thread1913",
        "description": "thread1913",
        "peekOfCode": "thread_local_storage = threading.local()\nthreads = [threading.Thread(target=print_thread_id) for _ in range(5)]\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()",
        "detail": "thread1913",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "thread1913",
        "description": "thread1913",
        "peekOfCode": "threads = [threading.Thread(target=print_thread_id) for _ in range(5)]\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()",
        "detail": "thread1913",
        "documentation": {}
    },
    {
        "label": "thread_function",
        "kind": 2,
        "importPath": "thread1915",
        "description": "thread1915",
        "peekOfCode": "def thread_function(data):\n    thread_data.data = data\n    thread_data.sleep_time = data.get(\"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\")\n    for key, value in thread_data.data.items():\n        if value:\n            print(\n                f\"–ò–º—è –ø–æ—Ç–æ–∫–∞ - {threading.current_thread().name}, –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∞ - {key}: {value}\"\n            )\n        time.sleep(thread_data.sleep_time / 10 if thread_data.sleep_time else 3)\nthread_data = threading.local()",
        "detail": "thread1915",
        "documentation": {}
    },
    {
        "label": "students_info",
        "kind": 5,
        "importPath": "thread1915",
        "description": "thread1915",
        "peekOfCode": "students_info = {\n    \"–í–∞—Ä–ª–∞–∞–º –ë–∏—Ä—é–∫–æ–≤–∞\": {\n        \"–í–æ–∑—Ä–∞—Å—Ç\": 25,\n        \"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\": None,\n        \"–ì–æ—Ä–æ–¥\": None,\n        \"–°—Ç—Ä–∞–Ω–∞\": \"–†–æ—Å—Å–∏—è\",\n        \"–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç\": \"–ó–ê–û ¬´–ú–∏—Ä–æ–Ω–æ–≤–∞-–ü—Ä–æ—Ö–æ—Ä–æ–≤¬ª\",\n        \"–ö—É—Ä—Å\": 3,\n        \"–ì—Ä—É–ø–ø–∞\": \"CK008\",\n        \"–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞\": \"ostaplitkin@example.com\",",
        "detail": "thread1915",
        "documentation": {}
    },
    {
        "label": "thread_data",
        "kind": 5,
        "importPath": "thread1915",
        "description": "thread1915",
        "peekOfCode": "thread_data = threading.local()\nfor key, value in students_info.items():\n    thread = threading.Thread(target=thread_function, args=(value,))\n    thread.name = key\n    thread.start()",
        "detail": "thread1915",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "Trash---",
        "description": "Trash---",
        "peekOfCode": "class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.maker = model\n    def display_info(self):\n        return f\"{self.make} {self.model}\"\ncar = Car(\"Toyota\", \"Camry\")\nprint(car.display_info())\n# class Logger:\n#     log_level = \"\"",
        "detail": "Trash---",
        "documentation": {}
    },
    {
        "label": "my_context_manager",
        "kind": 2,
        "importPath": "Trash---",
        "description": "Trash---",
        "peekOfCode": "def my_context_manager():;\n    print(\"–ù–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ...\");\n    yield \"–£—Ö —Ç—ã –∫–∞–∫ –∫—Ä—É—Ç–æ!\";\n    print(\"–ö–æ–Ω–µ—Ü –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...\");\nwith my_context_manager() as phrase:;\n    print(phrase);\n\"\"\"",
        "detail": "Trash---",
        "documentation": {}
    },
    {
        "label": "car",
        "kind": 5,
        "importPath": "Trash---",
        "description": "Trash---",
        "peekOfCode": "car = Car(\"Toyota\", \"Camry\")\nprint(car.display_info())\n# class Logger:\n#     log_level = \"\"\n#     def __new__(cls, *args, **kwargs):\n#         if not Logger.log_level:\n#             log = super(Logger, cls).__new__(cls)\n#             Logger.log_level = \"INFO\"\n#         return log\n#     @classmethod",
        "detail": "Trash---",
        "documentation": {}
    },
    {
        "label": "logger_1",
        "kind": 5,
        "importPath": "Trash---",
        "description": "Trash---",
        "peekOfCode": "logger_1 = Logger()\nprint(logger_1.log_level)  # –í—ã–≤–µ–¥–µ—Ç \"INFO\"\nlogger_2 = Logger.get_logger()\nlogger_2.set_level(\"DEBUG\")\nprint(logger_1.log_level)  # –í—ã–≤–µ–¥–µ—Ç \"DEBUG\"\nprint(logger_2.log_level)  # –í—ã–≤–µ–¥–µ—Ç \"DEBUG\"\nprint(logger_2 is logger_1)\n# class Point:\n#     def __new__(cls, *args, **kwargs):\n#         print(f\"–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {cls.__name__}\")",
        "detail": "Trash---",
        "documentation": {}
    },
    {
        "label": "logger_2",
        "kind": 5,
        "importPath": "Trash---",
        "description": "Trash---",
        "peekOfCode": "logger_2 = Logger.get_logger()\nlogger_2.set_level(\"DEBUG\")\nprint(logger_1.log_level)  # –í—ã–≤–µ–¥–µ—Ç \"DEBUG\"\nprint(logger_2.log_level)  # –í—ã–≤–µ–¥–µ—Ç \"DEBUG\"\nprint(logger_2 is logger_1)\n# class Point:\n#     def __new__(cls, *args, **kwargs):\n#         print(f\"–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {cls.__name__}\")\n#         instance = super().__new__(cls)\n#         return instance",
        "detail": "Trash---",
        "documentation": {}
    },
    {
        "label": "my_range_gen",
        "kind": 2,
        "importPath": "Trash",
        "description": "Trash",
        "peekOfCode": "def my_range_gen(*args):\n    if len(args) == 1:\n        i = 0\n        while i < args[0]:\n            yield i\n            i += 1\n    elif len(args) == 2:\n        i = args[0]\n        while args[1] - i != 0:\n            yield i",
        "detail": "Trash",
        "documentation": {}
    },
    {
        "label": "rotate",
        "kind": 2,
        "importPath": "Trash_only",
        "description": "Trash_only",
        "peekOfCode": "def rotate(tpl: tuple[int | float], shift: int = 1) -> tuple[int | float]:\n    \"\"\"–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥ –∫–æ—Ä—Ç–µ–∂–∞ –Ω–∞ shift –ø–æ–∑–∏—Ü–∏–π –≤–ø—Ä–∞–≤–æ(shift>0) –∏–ª–∏ –≤–ª–µ–≤–æ(shift<0)\"\"\"\n    return tpl[-shift % len(tpl) :] + tpl[: -shift % len(tpl)]\nprint(rotate.__doc__)\nprint(rotate.__annotations__)\nprint(rotate((1, 2, 3, 4, 5, 6, 7), -3))\n'''",
        "detail": "Trash_only",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Trash_only",
        "description": "Trash_only",
        "peekOfCode": "x = 0.01\nminf = None\nwhile round(x, 2) != 0.4:\n    f = (x ** (2 * math.log10(x) ** 2) - 10 * x**3) ** 2\n    print(round(f, 4), end=\" \")\n    if minf == None:\n        minf = f\n        k = x\n    else:\n        if minf > f:",
        "detail": "Trash_only",
        "documentation": {}
    },
    {
        "label": "minf",
        "kind": 5,
        "importPath": "Trash_only",
        "description": "Trash_only",
        "peekOfCode": "minf = None\nwhile round(x, 2) != 0.4:\n    f = (x ** (2 * math.log10(x) ** 2) - 10 * x**3) ** 2\n    print(round(f, 4), end=\" \")\n    if minf == None:\n        minf = f\n        k = x\n    else:\n        if minf > f:\n            minf, k = f, x",
        "detail": "Trash_only",
        "documentation": {}
    },
    {
        "label": "people",
        "kind": 5,
        "importPath": "Zad1",
        "description": "Zad1",
        "peekOfCode": "people = [\n    ['Amy Smith', '694.322.8133x22426'],\n    ['Brian Shaw', '593.662.5217x338'],\n    ['Christian Sharp', '118.197.8810'],\n    ['Sean Schmidt', '9722527521'],\n    ['Thomas Long', '163.814.9938'],\n    ['Joshua Willis', '+1-978-530-6971x601'],\n    ['Ann Hoffman', '434.104.4302'],\n    ['John Leonard', '(956)182-8435'],\n    ['Daniel Ross', '870-365-8303x416'],",
        "detail": "Zad1",
        "documentation": {}
    },
    {
        "label": "MagicalBox",
        "kind": 6,
        "importPath": "–†–∞–∑–±–æ—Ä",
        "description": "–†–∞–∑–±–æ—Ä",
        "peekOfCode": "class MagicalBox:\n    def __init__(self, contents=None):\n        self.contents = contents\n    @property\n    def contents(self):\n        if self._contents == \"rabbit\":\n            return \"üêá A magical rabbit!\"\n        else:\n            return self._contents\n    @contents.setter",
        "detail": "–†–∞–∑–±–æ—Ä",
        "documentation": {}
    },
    {
        "label": "box",
        "kind": 5,
        "importPath": "–†–∞–∑–±–æ—Ä",
        "description": "–†–∞–∑–±–æ—Ä",
        "peekOfCode": "box = MagicalBox(\"rabbit\")\nprint(box.contents)",
        "detail": "–†–∞–∑–±–æ—Ä",
        "documentation": {}
    },
    {
        "label": "get_line_list",
        "kind": 2,
        "importPath": "—Ä–µ–∫—É—Ä—Å–∏—è",
        "description": "—Ä–µ–∫—É—Ä—Å–∏—è",
        "peekOfCode": "def get_line_list(d, a=[]):\n    [get_line_list(f, a) if type(f) == list else a.append(f) for f in d]\n    return a\n\"\"\"\n# –∑–¥–µ—Å—å –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É\ndef get_line_list(d, a=[]):\n    if len(d) == 0:\n        return a\n    else:\n        if type(d[0]) == list:",
        "detail": "—Ä–µ–∫—É—Ä—Å–∏—è",
        "documentation": {}
    },
    {
        "label": "get_line_list",
        "kind": 2,
        "importPath": "—Ä–µ–∫—É—Ä—Å–∏—è",
        "description": "—Ä–µ–∫—É—Ä—Å–∏—è",
        "peekOfCode": "def get_line_list(d, a=[]):\n    if len(d) == 0:\n        return a\n    else:\n        if type(d[0]) == list:\n            get_line_list(d[0])\n            a.extend(d.pop(0))\n        else:\n            a.append(d.pop(0))\n        get_line_list(d)",
        "detail": "—Ä–µ–∫—É—Ä—Å–∏—è",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "—Ä–µ–∫—É—Ä—Å–∏—è",
        "description": "—Ä–µ–∫—É—Ä—Å–∏—è",
        "peekOfCode": "d = [1, 2, [True, False], [\"–ú–æ—Å–∫–≤–∞\", \"–£—Ñ–∞\", [100, 101], [\"True\", [-2, -1]]], 7.89]\n\"\"\"\n–ß—É–∂–æ–µ —Ä–µ—à–µ–Ω–∏–µ\ndef get_line_list(d, a=[]):\n    [get_line_list(f, a) if type(f) == list else a.append(f) for f in d]\n    return a\n\"\"\"\n# –∑–¥–µ—Å—å –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É\ndef get_line_list(d, a=[]):\n    if len(d) == 0:",
        "detail": "—Ä–µ–∫—É—Ä—Å–∏—è",
        "documentation": {}
    }
]